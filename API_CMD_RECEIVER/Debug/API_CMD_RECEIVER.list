
API_CMD_RECEIVER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069a0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08006aac  08006aac  00007aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b08  08006b08  000081a4  2**0
                  CONTENTS
  4 .ARM          00000008  08006b08  08006b08  00007b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b10  08006b10  000081a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b10  08006b10  00007b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006b14  08006b14  00007b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001a4  20000000  08006b18  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001250  200001a4  08006cbc  000081a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013f4  08006cbc  000083f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b0bc  00000000  00000000  000081cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002370  00000000  00000000  00013289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000990  00000000  00000000  00015600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00018afa  00000000  00000000  00015f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000c556  00000000  00000000  0002ea8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00083ecf  00000000  00000000  0003afe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000beeaf  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 000006eb  00000000  00000000  000beef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002514  00000000  00000000  000bf5e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000c1af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001a4 	.word	0x200001a4
 8000128:	00000000 	.word	0x00000000
 800012c:	08006a94 	.word	0x08006a94

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001a8 	.word	0x200001a8
 8000148:	08006a94 	.word	0x08006a94

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000160:	b480      	push	{r7}
 8000162:	b083      	sub	sp, #12
 8000164:	af00      	add	r7, sp, #0
 8000166:	4603      	mov	r3, r0
 8000168:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800016a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800016e:	2b00      	cmp	r3, #0
 8000170:	db0b      	blt.n	800018a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000172:	79fb      	ldrb	r3, [r7, #7]
 8000174:	f003 021f 	and.w	r2, r3, #31
 8000178:	4906      	ldr	r1, [pc, #24]	@ (8000194 <__NVIC_EnableIRQ+0x34>)
 800017a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800017e:	095b      	lsrs	r3, r3, #5
 8000180:	2001      	movs	r0, #1
 8000182:	fa00 f202 	lsl.w	r2, r0, r2
 8000186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800018a:	bf00      	nop
 800018c:	370c      	adds	r7, #12
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	e000e100 	.word	0xe000e100

08000198 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000198:	b480      	push	{r7}
 800019a:	b083      	sub	sp, #12
 800019c:	af00      	add	r7, sp, #0
 800019e:	4603      	mov	r3, r0
 80001a0:	6039      	str	r1, [r7, #0]
 80001a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	db0a      	blt.n	80001c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001ac:	683b      	ldr	r3, [r7, #0]
 80001ae:	b2da      	uxtb	r2, r3
 80001b0:	490c      	ldr	r1, [pc, #48]	@ (80001e4 <__NVIC_SetPriority+0x4c>)
 80001b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001b6:	0112      	lsls	r2, r2, #4
 80001b8:	b2d2      	uxtb	r2, r2
 80001ba:	440b      	add	r3, r1
 80001bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001c0:	e00a      	b.n	80001d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001c2:	683b      	ldr	r3, [r7, #0]
 80001c4:	b2da      	uxtb	r2, r3
 80001c6:	4908      	ldr	r1, [pc, #32]	@ (80001e8 <__NVIC_SetPriority+0x50>)
 80001c8:	79fb      	ldrb	r3, [r7, #7]
 80001ca:	f003 030f 	and.w	r3, r3, #15
 80001ce:	3b04      	subs	r3, #4
 80001d0:	0112      	lsls	r2, r2, #4
 80001d2:	b2d2      	uxtb	r2, r2
 80001d4:	440b      	add	r3, r1
 80001d6:	761a      	strb	r2, [r3, #24]
}
 80001d8:	bf00      	nop
 80001da:	370c      	adds	r7, #12
 80001dc:	46bd      	mov	sp, r7
 80001de:	bc80      	pop	{r7}
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	e000e100 	.word	0xe000e100
 80001e8:	e000ed00 	.word	0xe000ed00

080001ec <CHECK_CMD>:

int led_buf_l[10] = {0,0,0,0,0,0,0,0,0,0};
int led_buf_r[10] = {11,11,11,11,11,11,11,11,11,11};
int buf_pos = 0;

void CHECK_CMD(char *buf) {
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b084      	sub	sp, #16
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
	int cmd = 0;
 80001f4:	2300      	movs	r3, #0
 80001f6:	60fb      	str	r3, [r7, #12]
    if (strcmp(buf, "SW_L") == 0) cmd = 1;
 80001f8:	4951      	ldr	r1, [pc, #324]	@ (8000340 <CHECK_CMD+0x154>)
 80001fa:	6878      	ldr	r0, [r7, #4]
 80001fc:	f7ff ffa6 	bl	800014c <strcmp>
 8000200:	4603      	mov	r3, r0
 8000202:	2b00      	cmp	r3, #0
 8000204:	d102      	bne.n	800020c <CHECK_CMD+0x20>
 8000206:	2301      	movs	r3, #1
 8000208:	60fb      	str	r3, [r7, #12]
 800020a:	e012      	b.n	8000232 <CHECK_CMD+0x46>
    else if (strcmp(buf, "SW_R") == 0) cmd = 2;
 800020c:	494d      	ldr	r1, [pc, #308]	@ (8000344 <CHECK_CMD+0x158>)
 800020e:	6878      	ldr	r0, [r7, #4]
 8000210:	f7ff ff9c 	bl	800014c <strcmp>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d102      	bne.n	8000220 <CHECK_CMD+0x34>
 800021a:	2302      	movs	r3, #2
 800021c:	60fb      	str	r3, [r7, #12]
 800021e:	e008      	b.n	8000232 <CHECK_CMD+0x46>
    else if (strcmp(buf, "ACT") == 0) cmd = 3;
 8000220:	4949      	ldr	r1, [pc, #292]	@ (8000348 <CHECK_CMD+0x15c>)
 8000222:	6878      	ldr	r0, [r7, #4]
 8000224:	f7ff ff92 	bl	800014c <strcmp>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d101      	bne.n	8000232 <CHECK_CMD+0x46>
 800022e:	2303      	movs	r3, #3
 8000230:	60fb      	str	r3, [r7, #12]

    switch(cmd) {
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	2b03      	cmp	r3, #3
 8000236:	d036      	beq.n	80002a6 <CHECK_CMD+0xba>
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	2b03      	cmp	r3, #3
 800023c:	dc7b      	bgt.n	8000336 <CHECK_CMD+0x14a>
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	2b01      	cmp	r3, #1
 8000242:	d01a      	beq.n	800027a <CHECK_CMD+0x8e>
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	2b02      	cmp	r3, #2
 8000248:	d175      	bne.n	8000336 <CHECK_CMD+0x14a>
    case 2: {
    	if(cur_pos >= max_pos) break;
 800024a:	4b40      	ldr	r3, [pc, #256]	@ (800034c <CHECK_CMD+0x160>)
 800024c:	681a      	ldr	r2, [r3, #0]
 800024e:	4b40      	ldr	r3, [pc, #256]	@ (8000350 <CHECK_CMD+0x164>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	429a      	cmp	r2, r3
 8000254:	da6a      	bge.n	800032c <CHECK_CMD+0x140>
    	GPIOA->BRR = 1 << cur_pos;
 8000256:	4b3d      	ldr	r3, [pc, #244]	@ (800034c <CHECK_CMD+0x160>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	2201      	movs	r2, #1
 800025c:	409a      	lsls	r2, r3
 800025e:	4b3d      	ldr	r3, [pc, #244]	@ (8000354 <CHECK_CMD+0x168>)
 8000260:	615a      	str	r2, [r3, #20]
    	cur_pos++;
 8000262:	4b3a      	ldr	r3, [pc, #232]	@ (800034c <CHECK_CMD+0x160>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	3301      	adds	r3, #1
 8000268:	4a38      	ldr	r2, [pc, #224]	@ (800034c <CHECK_CMD+0x160>)
 800026a:	6013      	str	r3, [r2, #0]
    	GPIOA->BSRR = 1 << cur_pos;
 800026c:	4b37      	ldr	r3, [pc, #220]	@ (800034c <CHECK_CMD+0x160>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	2201      	movs	r2, #1
 8000272:	409a      	lsls	r2, r3
 8000274:	4b37      	ldr	r3, [pc, #220]	@ (8000354 <CHECK_CMD+0x168>)
 8000276:	611a      	str	r2, [r3, #16]
    	break;
 8000278:	e05d      	b.n	8000336 <CHECK_CMD+0x14a>
    }
    case 1: {
    	if(cur_pos <= 1) break;
 800027a:	4b34      	ldr	r3, [pc, #208]	@ (800034c <CHECK_CMD+0x160>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	2b01      	cmp	r3, #1
 8000280:	dd56      	ble.n	8000330 <CHECK_CMD+0x144>
    	GPIOA->BRR = 1 << cur_pos;
 8000282:	4b32      	ldr	r3, [pc, #200]	@ (800034c <CHECK_CMD+0x160>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	2201      	movs	r2, #1
 8000288:	409a      	lsls	r2, r3
 800028a:	4b32      	ldr	r3, [pc, #200]	@ (8000354 <CHECK_CMD+0x168>)
 800028c:	615a      	str	r2, [r3, #20]
    	cur_pos--;
 800028e:	4b2f      	ldr	r3, [pc, #188]	@ (800034c <CHECK_CMD+0x160>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	3b01      	subs	r3, #1
 8000294:	4a2d      	ldr	r2, [pc, #180]	@ (800034c <CHECK_CMD+0x160>)
 8000296:	6013      	str	r3, [r2, #0]
    	GPIOA->BSRR = 1 << cur_pos;
 8000298:	4b2c      	ldr	r3, [pc, #176]	@ (800034c <CHECK_CMD+0x160>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	2201      	movs	r2, #1
 800029e:	409a      	lsls	r2, r3
 80002a0:	4b2c      	ldr	r3, [pc, #176]	@ (8000354 <CHECK_CMD+0x168>)
 80002a2:	611a      	str	r2, [r3, #16]
    	break;
 80002a4:	e047      	b.n	8000336 <CHECK_CMD+0x14a>
    }
    case 3: {
    	buf_pos = (buf_pos + 1)%10;
 80002a6:	4b2c      	ldr	r3, [pc, #176]	@ (8000358 <CHECK_CMD+0x16c>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	1c59      	adds	r1, r3, #1
 80002ac:	4b2b      	ldr	r3, [pc, #172]	@ (800035c <CHECK_CMD+0x170>)
 80002ae:	fb83 2301 	smull	r2, r3, r3, r1
 80002b2:	109a      	asrs	r2, r3, #2
 80002b4:	17cb      	asrs	r3, r1, #31
 80002b6:	1ad2      	subs	r2, r2, r3
 80002b8:	4613      	mov	r3, r2
 80002ba:	009b      	lsls	r3, r3, #2
 80002bc:	4413      	add	r3, r2
 80002be:	005b      	lsls	r3, r3, #1
 80002c0:	1aca      	subs	r2, r1, r3
 80002c2:	4b25      	ldr	r3, [pc, #148]	@ (8000358 <CHECK_CMD+0x16c>)
 80002c4:	601a      	str	r2, [r3, #0]
    	led_buf_l[buf_pos] = cur_pos - 1;
 80002c6:	4b21      	ldr	r3, [pc, #132]	@ (800034c <CHECK_CMD+0x160>)
 80002c8:	681a      	ldr	r2, [r3, #0]
 80002ca:	4b23      	ldr	r3, [pc, #140]	@ (8000358 <CHECK_CMD+0x16c>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	3a01      	subs	r2, #1
 80002d0:	4923      	ldr	r1, [pc, #140]	@ (8000360 <CHECK_CMD+0x174>)
 80002d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    	led_buf_r[buf_pos] = cur_pos + 1;
 80002d6:	4b1d      	ldr	r3, [pc, #116]	@ (800034c <CHECK_CMD+0x160>)
 80002d8:	681a      	ldr	r2, [r3, #0]
 80002da:	4b1f      	ldr	r3, [pc, #124]	@ (8000358 <CHECK_CMD+0x16c>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	3201      	adds	r2, #1
 80002e0:	4920      	ldr	r1, [pc, #128]	@ (8000364 <CHECK_CMD+0x178>)
 80002e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    	if(led_buf_l[buf_pos] > 0) GPIOA->BSRR = 1 << led_buf_l[buf_pos];
 80002e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000358 <CHECK_CMD+0x16c>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	4a1d      	ldr	r2, [pc, #116]	@ (8000360 <CHECK_CMD+0x174>)
 80002ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	dd08      	ble.n	8000306 <CHECK_CMD+0x11a>
 80002f4:	4b18      	ldr	r3, [pc, #96]	@ (8000358 <CHECK_CMD+0x16c>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a19      	ldr	r2, [pc, #100]	@ (8000360 <CHECK_CMD+0x174>)
 80002fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002fe:	2201      	movs	r2, #1
 8000300:	409a      	lsls	r2, r3
 8000302:	4b14      	ldr	r3, [pc, #80]	@ (8000354 <CHECK_CMD+0x168>)
 8000304:	611a      	str	r2, [r3, #16]
    	if(led_buf_r[buf_pos] <= max_pos) GPIOA->BSRR = 1 << led_buf_r[buf_pos];
 8000306:	4b14      	ldr	r3, [pc, #80]	@ (8000358 <CHECK_CMD+0x16c>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	4a16      	ldr	r2, [pc, #88]	@ (8000364 <CHECK_CMD+0x178>)
 800030c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000310:	4b0f      	ldr	r3, [pc, #60]	@ (8000350 <CHECK_CMD+0x164>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	429a      	cmp	r2, r3
 8000316:	dc0d      	bgt.n	8000334 <CHECK_CMD+0x148>
 8000318:	4b0f      	ldr	r3, [pc, #60]	@ (8000358 <CHECK_CMD+0x16c>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a11      	ldr	r2, [pc, #68]	@ (8000364 <CHECK_CMD+0x178>)
 800031e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000322:	2201      	movs	r2, #1
 8000324:	409a      	lsls	r2, r3
 8000326:	4b0b      	ldr	r3, [pc, #44]	@ (8000354 <CHECK_CMD+0x168>)
 8000328:	611a      	str	r2, [r3, #16]
    	break;
 800032a:	e003      	b.n	8000334 <CHECK_CMD+0x148>
    	if(cur_pos >= max_pos) break;
 800032c:	bf00      	nop
 800032e:	e002      	b.n	8000336 <CHECK_CMD+0x14a>
    	if(cur_pos <= 1) break;
 8000330:	bf00      	nop
 8000332:	e000      	b.n	8000336 <CHECK_CMD+0x14a>
    	break;
 8000334:	bf00      	nop
    }
    }
}
 8000336:	bf00      	nop
 8000338:	3710      	adds	r7, #16
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	08006aac 	.word	0x08006aac
 8000344:	08006ab4 	.word	0x08006ab4
 8000348:	08006abc 	.word	0x08006abc
 800034c:	20000000 	.word	0x20000000
 8000350:	20000004 	.word	0x20000004
 8000354:	40010800 	.word	0x40010800
 8000358:	2000022c 	.word	0x2000022c
 800035c:	66666667 	.word	0x66666667
 8000360:	20000204 	.word	0x20000204
 8000364:	20000008 	.word	0x20000008

08000368 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF)
 800036e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000372:	691b      	ldr	r3, [r3, #16]
 8000374:	f003 0301 	and.w	r3, r3, #1
 8000378:	2b00      	cmp	r3, #0
 800037a:	d056      	beq.n	800042a <TIM2_IRQHandler+0xc2>
    {
        TIM2->SR &= ~TIM_SR_UIF;
 800037c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000380:	691b      	ldr	r3, [r3, #16]
 8000382:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000386:	f023 0301 	bic.w	r3, r3, #1
 800038a:	6113      	str	r3, [r2, #16]
        for(int i = 0 ; i < 10; i++) {
 800038c:	2300      	movs	r3, #0
 800038e:	607b      	str	r3, [r7, #4]
 8000390:	e042      	b.n	8000418 <TIM2_IRQHandler+0xb0>
        	if(led_buf_l[i] > 0) {
 8000392:	4a28      	ldr	r2, [pc, #160]	@ (8000434 <TIM2_IRQHandler+0xcc>)
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800039a:	2b00      	cmp	r3, #0
 800039c:	dd18      	ble.n	80003d0 <TIM2_IRQHandler+0x68>
        		GPIOA->BRR = 1 << led_buf_l[i];
 800039e:	4a25      	ldr	r2, [pc, #148]	@ (8000434 <TIM2_IRQHandler+0xcc>)
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003a6:	2201      	movs	r2, #1
 80003a8:	409a      	lsls	r2, r3
 80003aa:	4b23      	ldr	r3, [pc, #140]	@ (8000438 <TIM2_IRQHandler+0xd0>)
 80003ac:	615a      	str	r2, [r3, #20]
        		led_buf_l[i]--;
 80003ae:	4a21      	ldr	r2, [pc, #132]	@ (8000434 <TIM2_IRQHandler+0xcc>)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003b6:	1e5a      	subs	r2, r3, #1
 80003b8:	491e      	ldr	r1, [pc, #120]	@ (8000434 <TIM2_IRQHandler+0xcc>)
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        		GPIOA->BSRR = 1 << led_buf_l[i];
 80003c0:	4a1c      	ldr	r2, [pc, #112]	@ (8000434 <TIM2_IRQHandler+0xcc>)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003c8:	2201      	movs	r2, #1
 80003ca:	409a      	lsls	r2, r3
 80003cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000438 <TIM2_IRQHandler+0xd0>)
 80003ce:	611a      	str	r2, [r3, #16]
        	}

        	if(led_buf_r[i] <= max_pos) {
 80003d0:	4a1a      	ldr	r2, [pc, #104]	@ (800043c <TIM2_IRQHandler+0xd4>)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003d8:	4b19      	ldr	r3, [pc, #100]	@ (8000440 <TIM2_IRQHandler+0xd8>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	429a      	cmp	r2, r3
 80003de:	dc18      	bgt.n	8000412 <TIM2_IRQHandler+0xaa>
				GPIOA->BRR = 1 << led_buf_r[i];
 80003e0:	4a16      	ldr	r2, [pc, #88]	@ (800043c <TIM2_IRQHandler+0xd4>)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003e8:	2201      	movs	r2, #1
 80003ea:	409a      	lsls	r2, r3
 80003ec:	4b12      	ldr	r3, [pc, #72]	@ (8000438 <TIM2_IRQHandler+0xd0>)
 80003ee:	615a      	str	r2, [r3, #20]
				led_buf_r[i]++;
 80003f0:	4a12      	ldr	r2, [pc, #72]	@ (800043c <TIM2_IRQHandler+0xd4>)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003f8:	1c5a      	adds	r2, r3, #1
 80003fa:	4910      	ldr	r1, [pc, #64]	@ (800043c <TIM2_IRQHandler+0xd4>)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				GPIOA->BSRR = 1 << led_buf_r[i];
 8000402:	4a0e      	ldr	r2, [pc, #56]	@ (800043c <TIM2_IRQHandler+0xd4>)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800040a:	2201      	movs	r2, #1
 800040c:	409a      	lsls	r2, r3
 800040e:	4b0a      	ldr	r3, [pc, #40]	@ (8000438 <TIM2_IRQHandler+0xd0>)
 8000410:	611a      	str	r2, [r3, #16]
        for(int i = 0 ; i < 10; i++) {
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	3301      	adds	r3, #1
 8000416:	607b      	str	r3, [r7, #4]
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	2b09      	cmp	r3, #9
 800041c:	ddb9      	ble.n	8000392 <TIM2_IRQHandler+0x2a>
			}
        }
        GPIOA->BSRR = 1 << cur_pos;
 800041e:	4b09      	ldr	r3, [pc, #36]	@ (8000444 <TIM2_IRQHandler+0xdc>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	2201      	movs	r2, #1
 8000424:	409a      	lsls	r2, r3
 8000426:	4b04      	ldr	r3, [pc, #16]	@ (8000438 <TIM2_IRQHandler+0xd0>)
 8000428:	611a      	str	r2, [r3, #16]
    }
}
 800042a:	bf00      	nop
 800042c:	370c      	adds	r7, #12
 800042e:	46bd      	mov	sp, r7
 8000430:	bc80      	pop	{r7}
 8000432:	4770      	bx	lr
 8000434:	20000204 	.word	0x20000204
 8000438:	40010800 	.word	0x40010800
 800043c:	20000008 	.word	0x20000008
 8000440:	20000004 	.word	0x20000004
 8000444:	20000000 	.word	0x20000000

08000448 <main>:

int main(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
	SystemClock_Config();
 800044c:	f000 f820 	bl	8000490 <SystemClock_Config>
	MX_USB_DEVICE_Init();
 8000450:	f005 fe56 	bl	8006100 <MX_USB_DEVICE_Init>
	GPIO_Init();
 8000454:	f000 f892 	bl	800057c <GPIO_Init>
	TIM2_Init();
 8000458:	f000 f8c6 	bl	80005e8 <TIM2_Init>

	GPIOA->BSRR = 1 << cur_pos;
 800045c:	4b08      	ldr	r3, [pc, #32]	@ (8000480 <main+0x38>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	2201      	movs	r2, #1
 8000462:	409a      	lsls	r2, r3
 8000464:	4b07      	ldr	r3, [pc, #28]	@ (8000484 <main+0x3c>)
 8000466:	611a      	str	r2, [r3, #16]
  while (1)
  {
	  if(uart_line_ready) {
 8000468:	4b07      	ldr	r3, [pc, #28]	@ (8000488 <main+0x40>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	2b00      	cmp	r3, #0
 800046e:	d0fb      	beq.n	8000468 <main+0x20>
		  uart_line_ready = 0;
 8000470:	4b05      	ldr	r3, [pc, #20]	@ (8000488 <main+0x40>)
 8000472:	2200      	movs	r2, #0
 8000474:	701a      	strb	r2, [r3, #0]
		  CHECK_CMD(usb_rx_buffer);
 8000476:	4805      	ldr	r0, [pc, #20]	@ (800048c <main+0x44>)
 8000478:	f7ff feb8 	bl	80001ec <CHECK_CMD>
	  if(uart_line_ready) {
 800047c:	e7f4      	b.n	8000468 <main+0x20>
 800047e:	bf00      	nop
 8000480:	20000000 	.word	0x20000000
 8000484:	40010800 	.word	0x40010800
 8000488:	20000200 	.word	0x20000200
 800048c:	200001c0 	.word	0x200001c0

08000490 <SystemClock_Config>:
  }
}


void SystemClock_Config(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
    // 1. Bật HSE
    RCC->CR |= RCC_CR_HSEON;
 8000494:	4b37      	ldr	r3, [pc, #220]	@ (8000574 <SystemClock_Config+0xe4>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a36      	ldr	r2, [pc, #216]	@ (8000574 <SystemClock_Config+0xe4>)
 800049a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800049e:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_HSERDY));  // Chờ HSE ổn định
 80004a0:	bf00      	nop
 80004a2:	4b34      	ldr	r3, [pc, #208]	@ (8000574 <SystemClock_Config+0xe4>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d0f9      	beq.n	80004a2 <SystemClock_Config+0x12>

    // 2. Cấu hình Flash: Prefetch + 2 wait states (72 MHz)
    FLASH->ACR |= FLASH_ACR_PRFTBE;     // Prefetch buffer enable
 80004ae:	4b32      	ldr	r3, [pc, #200]	@ (8000578 <SystemClock_Config+0xe8>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4a31      	ldr	r2, [pc, #196]	@ (8000578 <SystemClock_Config+0xe8>)
 80004b4:	f043 0310 	orr.w	r3, r3, #16
 80004b8:	6013      	str	r3, [r2, #0]
    FLASH->ACR &= ~FLASH_ACR_LATENCY;
 80004ba:	4b2f      	ldr	r3, [pc, #188]	@ (8000578 <SystemClock_Config+0xe8>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	4a2e      	ldr	r2, [pc, #184]	@ (8000578 <SystemClock_Config+0xe8>)
 80004c0:	f023 0307 	bic.w	r3, r3, #7
 80004c4:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= FLASH_ACR_LATENCY_2;  // 2 wait states
 80004c6:	4b2c      	ldr	r3, [pc, #176]	@ (8000578 <SystemClock_Config+0xe8>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4a2b      	ldr	r2, [pc, #172]	@ (8000578 <SystemClock_Config+0xe8>)
 80004cc:	f043 0304 	orr.w	r3, r3, #4
 80004d0:	6013      	str	r3, [r2, #0]

    // 3. Cấu hình Prescaler
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;    // AHB = SYSCLK / 1 = 72 MHz
 80004d2:	4b28      	ldr	r3, [pc, #160]	@ (8000574 <SystemClock_Config+0xe4>)
 80004d4:	4a27      	ldr	r2, [pc, #156]	@ (8000574 <SystemClock_Config+0xe4>)
 80004d6:	685b      	ldr	r3, [r3, #4]
 80004d8:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;   // APB1 = SYSCLK / 2 = 36 MHz (max 36 MHz)
 80004da:	4b26      	ldr	r3, [pc, #152]	@ (8000574 <SystemClock_Config+0xe4>)
 80004dc:	685b      	ldr	r3, [r3, #4]
 80004de:	4a25      	ldr	r2, [pc, #148]	@ (8000574 <SystemClock_Config+0xe4>)
 80004e0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80004e4:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;   // APB2 = SYSCLK / 1 = 72 MHz
 80004e6:	4b23      	ldr	r3, [pc, #140]	@ (8000574 <SystemClock_Config+0xe4>)
 80004e8:	4a22      	ldr	r2, [pc, #136]	@ (8000574 <SystemClock_Config+0xe4>)
 80004ea:	685b      	ldr	r3, [r3, #4]
 80004ec:	6053      	str	r3, [r2, #4]

    // 4. Cấu hình PLL: nguồn = HSE, hệ số nhân x9 → 8*9=72 MHz
    RCC->CFGR &= ~RCC_CFGR_PLLSRC;      // Clear
 80004ee:	4b21      	ldr	r3, [pc, #132]	@ (8000574 <SystemClock_Config+0xe4>)
 80004f0:	685b      	ldr	r3, [r3, #4]
 80004f2:	4a20      	ldr	r2, [pc, #128]	@ (8000574 <SystemClock_Config+0xe4>)
 80004f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80004f8:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_PLLSRC;       // PLL source = HSE
 80004fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000574 <SystemClock_Config+0xe4>)
 80004fc:	685b      	ldr	r3, [r3, #4]
 80004fe:	4a1d      	ldr	r2, [pc, #116]	@ (8000574 <SystemClock_Config+0xe4>)
 8000500:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000504:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= ~RCC_CFGR_PLLMULL;     // Clear multiplier
 8000506:	4b1b      	ldr	r3, [pc, #108]	@ (8000574 <SystemClock_Config+0xe4>)
 8000508:	685b      	ldr	r3, [r3, #4]
 800050a:	4a1a      	ldr	r2, [pc, #104]	@ (8000574 <SystemClock_Config+0xe4>)
 800050c:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 8000510:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_PLLMULL9;     // PLL = HSE * 9
 8000512:	4b18      	ldr	r3, [pc, #96]	@ (8000574 <SystemClock_Config+0xe4>)
 8000514:	685b      	ldr	r3, [r3, #4]
 8000516:	4a17      	ldr	r2, [pc, #92]	@ (8000574 <SystemClock_Config+0xe4>)
 8000518:	f443 13e0 	orr.w	r3, r3, #1835008	@ 0x1c0000
 800051c:	6053      	str	r3, [r2, #4]

    // 5. USB clock = PLL / 1.5 = 48 MHz
    RCC->CFGR &= ~RCC_CFGR_USBPRE;      // USBPRE = 0 → divide by 1.5
 800051e:	4b15      	ldr	r3, [pc, #84]	@ (8000574 <SystemClock_Config+0xe4>)
 8000520:	685b      	ldr	r3, [r3, #4]
 8000522:	4a14      	ldr	r2, [pc, #80]	@ (8000574 <SystemClock_Config+0xe4>)
 8000524:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000528:	6053      	str	r3, [r2, #4]

    // 6. Bật PLL
    RCC->CR |= RCC_CR_PLLON;
 800052a:	4b12      	ldr	r3, [pc, #72]	@ (8000574 <SystemClock_Config+0xe4>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4a11      	ldr	r2, [pc, #68]	@ (8000574 <SystemClock_Config+0xe4>)
 8000530:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000534:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_PLLRDY)); // Chờ PLL ổn định
 8000536:	bf00      	nop
 8000538:	4b0e      	ldr	r3, [pc, #56]	@ (8000574 <SystemClock_Config+0xe4>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000540:	2b00      	cmp	r3, #0
 8000542:	d0f9      	beq.n	8000538 <SystemClock_Config+0xa8>

    // 7. Chọn PLL làm SYSCLK
    RCC->CFGR &= ~RCC_CFGR_SW;
 8000544:	4b0b      	ldr	r3, [pc, #44]	@ (8000574 <SystemClock_Config+0xe4>)
 8000546:	685b      	ldr	r3, [r3, #4]
 8000548:	4a0a      	ldr	r2, [pc, #40]	@ (8000574 <SystemClock_Config+0xe4>)
 800054a:	f023 0303 	bic.w	r3, r3, #3
 800054e:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000550:	4b08      	ldr	r3, [pc, #32]	@ (8000574 <SystemClock_Config+0xe4>)
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	4a07      	ldr	r2, [pc, #28]	@ (8000574 <SystemClock_Config+0xe4>)
 8000556:	f043 0302 	orr.w	r3, r3, #2
 800055a:	6053      	str	r3, [r2, #4]
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL); // Chờ PLL được chọn
 800055c:	bf00      	nop
 800055e:	4b05      	ldr	r3, [pc, #20]	@ (8000574 <SystemClock_Config+0xe4>)
 8000560:	685b      	ldr	r3, [r3, #4]
 8000562:	f003 030c 	and.w	r3, r3, #12
 8000566:	2b08      	cmp	r3, #8
 8000568:	d1f9      	bne.n	800055e <SystemClock_Config+0xce>

    // Bây giờ: SYSCLK = 72 MHz, USBCLK = 48 MHz
}
 800056a:	bf00      	nop
 800056c:	bf00      	nop
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr
 8000574:	40021000 	.word	0x40021000
 8000578:	40022000 	.word	0x40022000

0800057c <GPIO_Init>:

void GPIO_Init(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
    // 1. Bật clock cho PORTA
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8000580:	4b16      	ldr	r3, [pc, #88]	@ (80005dc <GPIO_Init+0x60>)
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	4a15      	ldr	r2, [pc, #84]	@ (80005dc <GPIO_Init+0x60>)
 8000586:	f043 0304 	orr.w	r3, r3, #4
 800058a:	6193      	str	r3, [r2, #24]

    // 2. Clear cấu hình cũ cho PA1 -> PA10
    GPIOA->CRL &= ~((0xF << (1 * 4)) |   // PA1
 800058c:	4b14      	ldr	r3, [pc, #80]	@ (80005e0 <GPIO_Init+0x64>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a13      	ldr	r2, [pc, #76]	@ (80005e0 <GPIO_Init+0x64>)
 8000592:	f003 030f 	and.w	r3, r3, #15
 8000596:	6013      	str	r3, [r2, #0]
                    (0xF << (4 * 4)) |   // PA4
                    (0xF << (5 * 4)) |   // PA5
                    (0xF << (6 * 4)) |   // PA6
                    (0xF << (7 * 4)));   // PA7

    GPIOA->CRH &= ~((0xF << ((8 - 8) * 4)) |   // PA8
 8000598:	4b11      	ldr	r3, [pc, #68]	@ (80005e0 <GPIO_Init+0x64>)
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	4a10      	ldr	r2, [pc, #64]	@ (80005e0 <GPIO_Init+0x64>)
 800059e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80005a2:	f023 030f 	bic.w	r3, r3, #15
 80005a6:	6053      	str	r3, [r2, #4]
                    (0xF << ((9 - 8) * 4)) |   // PA9
                    (0xF << ((10 - 8) * 4)));  // PA10

    // 3. Set MODE=10, CNF=00 -> 0x2 cho PA1 -> PA10
    GPIOA->CRL |=  ((0x2 << (1 * 4)) |
 80005a8:	4b0d      	ldr	r3, [pc, #52]	@ (80005e0 <GPIO_Init+0x64>)
 80005aa:	681a      	ldr	r2, [r3, #0]
 80005ac:	490c      	ldr	r1, [pc, #48]	@ (80005e0 <GPIO_Init+0x64>)
 80005ae:	4b0d      	ldr	r3, [pc, #52]	@ (80005e4 <GPIO_Init+0x68>)
 80005b0:	4313      	orrs	r3, r2
 80005b2:	600b      	str	r3, [r1, #0]
                    (0x2 << (4 * 4)) |
                    (0x2 << (5 * 4)) |
                    (0x2 << (6 * 4)) |
                    (0x2 << (7 * 4)));

    GPIOA->CRH |=  ((0x2 << ((8 - 8) * 4)) |
 80005b4:	4b0a      	ldr	r3, [pc, #40]	@ (80005e0 <GPIO_Init+0x64>)
 80005b6:	685b      	ldr	r3, [r3, #4]
 80005b8:	4a09      	ldr	r2, [pc, #36]	@ (80005e0 <GPIO_Init+0x64>)
 80005ba:	f443 7308 	orr.w	r3, r3, #544	@ 0x220
 80005be:	f043 0302 	orr.w	r3, r3, #2
 80005c2:	6053      	str	r3, [r2, #4]
                    (0x2 << ((9 - 8) * 4)) |
                    (0x2 << ((10 - 8) * 4)));

    // 4. Reset output về mức 0 ban đầu
    GPIOA->ODR &= ~((0x7FE));   // clear PA1..PA10 (bits 1->10)
 80005c4:	4b06      	ldr	r3, [pc, #24]	@ (80005e0 <GPIO_Init+0x64>)
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	4a05      	ldr	r2, [pc, #20]	@ (80005e0 <GPIO_Init+0x64>)
 80005ca:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80005ce:	f023 0306 	bic.w	r3, r3, #6
 80005d2:	60d3      	str	r3, [r2, #12]
}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr
 80005dc:	40021000 	.word	0x40021000
 80005e0:	40010800 	.word	0x40010800
 80005e4:	22222220 	.word	0x22222220

080005e8 <TIM2_Init>:


void TIM2_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
    // 1. Bật clock cho TIM2
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80005ec:	4b16      	ldr	r3, [pc, #88]	@ (8000648 <TIM2_Init+0x60>)
 80005ee:	69db      	ldr	r3, [r3, #28]
 80005f0:	4a15      	ldr	r2, [pc, #84]	@ (8000648 <TIM2_Init+0x60>)
 80005f2:	f043 0301 	orr.w	r3, r3, #1
 80005f6:	61d3      	str	r3, [r2, #28]

    // 2. Reset TIM2
    TIM2->CR1 = 0;
 80005f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
    TIM2->PSC = 7199;    // prescaler -> 72MHz / 7200 = 10kHz
 8000600:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000604:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8000608:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 999;     // auto-reload -> 10kHz / 1000 = 10Hz = 100ms
 800060a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800060e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000612:	62da      	str	r2, [r3, #44]	@ 0x2c

    // 3. Enable update interrupt
    TIM2->DIER |= TIM_DIER_UIE;
 8000614:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000618:	68db      	ldr	r3, [r3, #12]
 800061a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	60d3      	str	r3, [r2, #12]

    // 4. Enable TIM2
    TIM2->CR1 |= TIM_CR1_CEN;
 8000624:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800062e:	f043 0301 	orr.w	r3, r3, #1
 8000632:	6013      	str	r3, [r2, #0]

    // 5. Enable TIM2_IRQn trong NVIC
    NVIC_SetPriority(TIM2_IRQn, 2);
 8000634:	2102      	movs	r1, #2
 8000636:	201c      	movs	r0, #28
 8000638:	f7ff fdae 	bl	8000198 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM2_IRQn);
 800063c:	201c      	movs	r0, #28
 800063e:	f7ff fd8f 	bl	8000160 <__NVIC_EnableIRQ>
}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40021000 	.word	0x40021000

0800064c <Error_Handler>:

void Error_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000650:	b672      	cpsid	i
}
 8000652:	bf00      	nop
  __disable_irq();
  while (1)
 8000654:	bf00      	nop
 8000656:	e7fd      	b.n	8000654 <Error_Handler+0x8>

08000658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800065c:	bf00      	nop
 800065e:	e7fd      	b.n	800065c <NMI_Handler+0x4>

08000660 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000664:	bf00      	nop
 8000666:	e7fd      	b.n	8000664 <HardFault_Handler+0x4>

08000668 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800066c:	bf00      	nop
 800066e:	e7fd      	b.n	800066c <MemManage_Handler+0x4>

08000670 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000674:	bf00      	nop
 8000676:	e7fd      	b.n	8000674 <BusFault_Handler+0x4>

08000678 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800067c:	bf00      	nop
 800067e:	e7fd      	b.n	800067c <UsageFault_Handler+0x4>

08000680 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	bc80      	pop	{r7}
 800068a:	4770      	bx	lr

0800068c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr

08000698 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr

080006a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006a8:	f000 f838 	bl	800071c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80006b4:	4802      	ldr	r0, [pc, #8]	@ (80006c0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80006b6:	f000 fa0f 	bl	8000ad8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000efc 	.word	0x20000efc

080006c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bc80      	pop	{r7}
 80006ce:	4770      	bx	lr

080006d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006d0:	f7ff fff8 	bl	80006c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006d4:	480b      	ldr	r0, [pc, #44]	@ (8000704 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006d6:	490c      	ldr	r1, [pc, #48]	@ (8000708 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006d8:	4a0c      	ldr	r2, [pc, #48]	@ (800070c <LoopFillZerobss+0x16>)
  movs r3, #0
 80006da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006dc:	e002      	b.n	80006e4 <LoopCopyDataInit>

080006de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006e2:	3304      	adds	r3, #4

080006e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e8:	d3f9      	bcc.n	80006de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ea:	4a09      	ldr	r2, [pc, #36]	@ (8000710 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006ec:	4c09      	ldr	r4, [pc, #36]	@ (8000714 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006f0:	e001      	b.n	80006f6 <LoopFillZerobss>

080006f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f4:	3204      	adds	r2, #4

080006f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f8:	d3fb      	bcc.n	80006f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006fa:	f006 f999 	bl	8006a30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006fe:	f7ff fea3 	bl	8000448 <main>
  bx lr
 8000702:	4770      	bx	lr
  ldr r0, =_sdata
 8000704:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000708:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 800070c:	08006b18 	.word	0x08006b18
  ldr r2, =_sbss
 8000710:	200001a4 	.word	0x200001a4
  ldr r4, =_ebss
 8000714:	200013f4 	.word	0x200013f4

08000718 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000718:	e7fe      	b.n	8000718 <ADC1_2_IRQHandler>
	...

0800071c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000720:	4b05      	ldr	r3, [pc, #20]	@ (8000738 <HAL_IncTick+0x1c>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	461a      	mov	r2, r3
 8000726:	4b05      	ldr	r3, [pc, #20]	@ (800073c <HAL_IncTick+0x20>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4413      	add	r3, r2
 800072c:	4a03      	ldr	r2, [pc, #12]	@ (800073c <HAL_IncTick+0x20>)
 800072e:	6013      	str	r3, [r2, #0]
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr
 8000738:	20000030 	.word	0x20000030
 800073c:	20000230 	.word	0x20000230

08000740 <__NVIC_GetPriorityGrouping>:
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000744:	4b04      	ldr	r3, [pc, #16]	@ (8000758 <__NVIC_GetPriorityGrouping+0x18>)
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	0a1b      	lsrs	r3, r3, #8
 800074a:	f003 0307 	and.w	r3, r3, #7
}
 800074e:	4618      	mov	r0, r3
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <__NVIC_EnableIRQ>:
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076a:	2b00      	cmp	r3, #0
 800076c:	db0b      	blt.n	8000786 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	f003 021f 	and.w	r2, r3, #31
 8000774:	4906      	ldr	r1, [pc, #24]	@ (8000790 <__NVIC_EnableIRQ+0x34>)
 8000776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077a:	095b      	lsrs	r3, r3, #5
 800077c:	2001      	movs	r0, #1
 800077e:	fa00 f202 	lsl.w	r2, r0, r2
 8000782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000786:	bf00      	nop
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr
 8000790:	e000e100 	.word	0xe000e100

08000794 <__NVIC_SetPriority>:
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	6039      	str	r1, [r7, #0]
 800079e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	db0a      	blt.n	80007be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	b2da      	uxtb	r2, r3
 80007ac:	490c      	ldr	r1, [pc, #48]	@ (80007e0 <__NVIC_SetPriority+0x4c>)
 80007ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b2:	0112      	lsls	r2, r2, #4
 80007b4:	b2d2      	uxtb	r2, r2
 80007b6:	440b      	add	r3, r1
 80007b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80007bc:	e00a      	b.n	80007d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	b2da      	uxtb	r2, r3
 80007c2:	4908      	ldr	r1, [pc, #32]	@ (80007e4 <__NVIC_SetPriority+0x50>)
 80007c4:	79fb      	ldrb	r3, [r7, #7]
 80007c6:	f003 030f 	and.w	r3, r3, #15
 80007ca:	3b04      	subs	r3, #4
 80007cc:	0112      	lsls	r2, r2, #4
 80007ce:	b2d2      	uxtb	r2, r2
 80007d0:	440b      	add	r3, r1
 80007d2:	761a      	strb	r2, [r3, #24]
}
 80007d4:	bf00      	nop
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	e000e100 	.word	0xe000e100
 80007e4:	e000ed00 	.word	0xe000ed00

080007e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b089      	sub	sp, #36	@ 0x24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	f003 0307 	and.w	r3, r3, #7
 80007fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007fc:	69fb      	ldr	r3, [r7, #28]
 80007fe:	f1c3 0307 	rsb	r3, r3, #7
 8000802:	2b04      	cmp	r3, #4
 8000804:	bf28      	it	cs
 8000806:	2304      	movcs	r3, #4
 8000808:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800080a:	69fb      	ldr	r3, [r7, #28]
 800080c:	3304      	adds	r3, #4
 800080e:	2b06      	cmp	r3, #6
 8000810:	d902      	bls.n	8000818 <NVIC_EncodePriority+0x30>
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	3b03      	subs	r3, #3
 8000816:	e000      	b.n	800081a <NVIC_EncodePriority+0x32>
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800081c:	f04f 32ff 	mov.w	r2, #4294967295
 8000820:	69bb      	ldr	r3, [r7, #24]
 8000822:	fa02 f303 	lsl.w	r3, r2, r3
 8000826:	43da      	mvns	r2, r3
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	401a      	ands	r2, r3
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000830:	f04f 31ff 	mov.w	r1, #4294967295
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	fa01 f303 	lsl.w	r3, r1, r3
 800083a:	43d9      	mvns	r1, r3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000840:	4313      	orrs	r3, r2
         );
}
 8000842:	4618      	mov	r0, r3
 8000844:	3724      	adds	r7, #36	@ 0x24
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr

0800084c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800084c:	b580      	push	{r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	60b9      	str	r1, [r7, #8]
 8000856:	607a      	str	r2, [r7, #4]
 8000858:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800085e:	f7ff ff6f 	bl	8000740 <__NVIC_GetPriorityGrouping>
 8000862:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000864:	687a      	ldr	r2, [r7, #4]
 8000866:	68b9      	ldr	r1, [r7, #8]
 8000868:	6978      	ldr	r0, [r7, #20]
 800086a:	f7ff ffbd 	bl	80007e8 <NVIC_EncodePriority>
 800086e:	4602      	mov	r2, r0
 8000870:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000874:	4611      	mov	r1, r2
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff ff8c 	bl	8000794 <__NVIC_SetPriority>
}
 800087c:	bf00      	nop
 800087e:	3718      	adds	r7, #24
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800088e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff ff62 	bl	800075c <__NVIC_EnableIRQ>
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d101      	bne.n	80008b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
 80008b0:	e0e8      	b.n	8000a84 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d106      	bne.n	80008cc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2200      	movs	r2, #0
 80008c2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f005 fe00 	bl	80064cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2203      	movs	r2, #3
 80008d0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2200      	movs	r2, #0
 80008d8:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4618      	mov	r0, r3
 80008e0:	f001 fd61 	bl	80023a6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	6818      	ldr	r0, [r3, #0]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	3304      	adds	r3, #4
 80008ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80008ee:	f001 fd37 	bl	8002360 <USB_CoreInit>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d005      	beq.n	8000904 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2202      	movs	r2, #2
 80008fc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8000900:	2301      	movs	r3, #1
 8000902:	e0bf      	b.n	8000a84 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f001 fd65 	bl	80023da <USB_SetCurrentMode>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d005      	beq.n	8000922 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2202      	movs	r2, #2
 800091a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800091e:	2301      	movs	r3, #1
 8000920:	e0b0      	b.n	8000a84 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000922:	2300      	movs	r3, #0
 8000924:	73fb      	strb	r3, [r7, #15]
 8000926:	e03e      	b.n	80009a6 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000928:	7bfa      	ldrb	r2, [r7, #15]
 800092a:	6879      	ldr	r1, [r7, #4]
 800092c:	4613      	mov	r3, r2
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	4413      	add	r3, r2
 8000932:	00db      	lsls	r3, r3, #3
 8000934:	440b      	add	r3, r1
 8000936:	3311      	adds	r3, #17
 8000938:	2201      	movs	r2, #1
 800093a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800093c:	7bfa      	ldrb	r2, [r7, #15]
 800093e:	6879      	ldr	r1, [r7, #4]
 8000940:	4613      	mov	r3, r2
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	4413      	add	r3, r2
 8000946:	00db      	lsls	r3, r3, #3
 8000948:	440b      	add	r3, r1
 800094a:	3310      	adds	r3, #16
 800094c:	7bfa      	ldrb	r2, [r7, #15]
 800094e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000950:	7bfa      	ldrb	r2, [r7, #15]
 8000952:	6879      	ldr	r1, [r7, #4]
 8000954:	4613      	mov	r3, r2
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	4413      	add	r3, r2
 800095a:	00db      	lsls	r3, r3, #3
 800095c:	440b      	add	r3, r1
 800095e:	3313      	adds	r3, #19
 8000960:	2200      	movs	r2, #0
 8000962:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000964:	7bfa      	ldrb	r2, [r7, #15]
 8000966:	6879      	ldr	r1, [r7, #4]
 8000968:	4613      	mov	r3, r2
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	4413      	add	r3, r2
 800096e:	00db      	lsls	r3, r3, #3
 8000970:	440b      	add	r3, r1
 8000972:	3320      	adds	r3, #32
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000978:	7bfa      	ldrb	r2, [r7, #15]
 800097a:	6879      	ldr	r1, [r7, #4]
 800097c:	4613      	mov	r3, r2
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	4413      	add	r3, r2
 8000982:	00db      	lsls	r3, r3, #3
 8000984:	440b      	add	r3, r1
 8000986:	3324      	adds	r3, #36	@ 0x24
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800098c:	7bfb      	ldrb	r3, [r7, #15]
 800098e:	6879      	ldr	r1, [r7, #4]
 8000990:	1c5a      	adds	r2, r3, #1
 8000992:	4613      	mov	r3, r2
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	4413      	add	r3, r2
 8000998:	00db      	lsls	r3, r3, #3
 800099a:	440b      	add	r3, r1
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80009a0:	7bfb      	ldrb	r3, [r7, #15]
 80009a2:	3301      	adds	r3, #1
 80009a4:	73fb      	strb	r3, [r7, #15]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	791b      	ldrb	r3, [r3, #4]
 80009aa:	7bfa      	ldrb	r2, [r7, #15]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d3bb      	bcc.n	8000928 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80009b0:	2300      	movs	r3, #0
 80009b2:	73fb      	strb	r3, [r7, #15]
 80009b4:	e044      	b.n	8000a40 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80009b6:	7bfa      	ldrb	r2, [r7, #15]
 80009b8:	6879      	ldr	r1, [r7, #4]
 80009ba:	4613      	mov	r3, r2
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	4413      	add	r3, r2
 80009c0:	00db      	lsls	r3, r3, #3
 80009c2:	440b      	add	r3, r1
 80009c4:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80009c8:	2200      	movs	r2, #0
 80009ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80009cc:	7bfa      	ldrb	r2, [r7, #15]
 80009ce:	6879      	ldr	r1, [r7, #4]
 80009d0:	4613      	mov	r3, r2
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	4413      	add	r3, r2
 80009d6:	00db      	lsls	r3, r3, #3
 80009d8:	440b      	add	r3, r1
 80009da:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80009de:	7bfa      	ldrb	r2, [r7, #15]
 80009e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80009e2:	7bfa      	ldrb	r2, [r7, #15]
 80009e4:	6879      	ldr	r1, [r7, #4]
 80009e6:	4613      	mov	r3, r2
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	4413      	add	r3, r2
 80009ec:	00db      	lsls	r3, r3, #3
 80009ee:	440b      	add	r3, r1
 80009f0:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80009f4:	2200      	movs	r2, #0
 80009f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80009f8:	7bfa      	ldrb	r2, [r7, #15]
 80009fa:	6879      	ldr	r1, [r7, #4]
 80009fc:	4613      	mov	r3, r2
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	4413      	add	r3, r2
 8000a02:	00db      	lsls	r3, r3, #3
 8000a04:	440b      	add	r3, r1
 8000a06:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000a0e:	7bfa      	ldrb	r2, [r7, #15]
 8000a10:	6879      	ldr	r1, [r7, #4]
 8000a12:	4613      	mov	r3, r2
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	4413      	add	r3, r2
 8000a18:	00db      	lsls	r3, r3, #3
 8000a1a:	440b      	add	r3, r1
 8000a1c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000a24:	7bfa      	ldrb	r2, [r7, #15]
 8000a26:	6879      	ldr	r1, [r7, #4]
 8000a28:	4613      	mov	r3, r2
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	4413      	add	r3, r2
 8000a2e:	00db      	lsls	r3, r3, #3
 8000a30:	440b      	add	r3, r1
 8000a32:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000a3a:	7bfb      	ldrb	r3, [r7, #15]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	73fb      	strb	r3, [r7, #15]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	791b      	ldrb	r3, [r3, #4]
 8000a44:	7bfa      	ldrb	r2, [r7, #15]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	d3b5      	bcc.n	80009b6 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6818      	ldr	r0, [r3, #0]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	3304      	adds	r3, #4
 8000a52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a54:	f001 fccd 	bl	80023f2 <USB_DevInit>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d005      	beq.n	8000a6a <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2202      	movs	r2, #2
 8000a62:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	e00c      	b.n	8000a84 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2201      	movs	r2, #1
 8000a74:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f003 ff4c 	bl	800491a <USB_DevDisconnect>

  return HAL_OK;
 8000a82:	2300      	movs	r3, #0
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3710      	adds	r7, #16
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d101      	bne.n	8000aa2 <HAL_PCD_Start+0x16>
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	e016      	b.n	8000ad0 <HAL_PCD_Start+0x44>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f001 fc63 	bl	800237a <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f005 ff7b 	bl	80069b2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f003 ff20 	bl	8004906 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8000ace:	2300      	movs	r3, #0
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b088      	sub	sp, #32
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f003 ff22 	bl	800492e <USB_ReadInterrupts>
 8000aea:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000aec:	69bb      	ldr	r3, [r7, #24]
 8000aee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d003      	beq.n	8000afe <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f000 fb1a 	bl	8001130 <PCD_EP_ISR_Handler>

    return;
 8000afc:	e119      	b.n	8000d32 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000afe:	69bb      	ldr	r3, [r7, #24]
 8000b00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d013      	beq.n	8000b30 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000b10:	b29a      	uxth	r2, r3
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000b1a:	b292      	uxth	r2, r2
 8000b1c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f005 fd4e 	bl	80065c2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000b26:	2100      	movs	r1, #0
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f000 f905 	bl	8000d38 <HAL_PCD_SetAddress>

    return;
 8000b2e:	e100      	b.n	8000d32 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d00c      	beq.n	8000b54 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000b42:	b29a      	uxth	r2, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8000b4c:	b292      	uxth	r2, r2
 8000b4e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8000b52:	e0ee      	b.n	8000d32 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d00c      	beq.n	8000b78 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000b66:	b29a      	uxth	r2, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8000b70:	b292      	uxth	r2, r2
 8000b72:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8000b76:	e0dc      	b.n	8000d32 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8000b78:	69bb      	ldr	r3, [r7, #24]
 8000b7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d027      	beq.n	8000bd2 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000b8a:	b29a      	uxth	r2, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f022 0204 	bic.w	r2, r2, #4
 8000b94:	b292      	uxth	r2, r2
 8000b96:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000ba2:	b29a      	uxth	r2, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f022 0208 	bic.w	r2, r2, #8
 8000bac:	b292      	uxth	r2, r2
 8000bae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f005 fd3e 	bl	8006634 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000bc0:	b29a      	uxth	r2, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000bca:	b292      	uxth	r2, r2
 8000bcc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8000bd0:	e0af      	b.n	8000d32 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8000bd2:	69bb      	ldr	r3, [r7, #24]
 8000bd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	f000 8083 	beq.w	8000ce4 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8000bde:	2300      	movs	r3, #0
 8000be0:	77fb      	strb	r3, [r7, #31]
 8000be2:	e010      	b.n	8000c06 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	461a      	mov	r2, r3
 8000bea:	7ffb      	ldrb	r3, [r7, #31]
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	441a      	add	r2, r3
 8000bf0:	7ffb      	ldrb	r3, [r7, #31]
 8000bf2:	8812      	ldrh	r2, [r2, #0]
 8000bf4:	b292      	uxth	r2, r2
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	3320      	adds	r3, #32
 8000bfa:	443b      	add	r3, r7
 8000bfc:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8000c00:	7ffb      	ldrb	r3, [r7, #31]
 8000c02:	3301      	adds	r3, #1
 8000c04:	77fb      	strb	r3, [r7, #31]
 8000c06:	7ffb      	ldrb	r3, [r7, #31]
 8000c08:	2b07      	cmp	r3, #7
 8000c0a:	d9eb      	bls.n	8000be4 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000c14:	b29a      	uxth	r2, r3
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f042 0201 	orr.w	r2, r2, #1
 8000c1e:	b292      	uxth	r2, r2
 8000c20:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000c2c:	b29a      	uxth	r2, r3
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f022 0201 	bic.w	r2, r2, #1
 8000c36:	b292      	uxth	r2, r2
 8000c38:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000c3c:	bf00      	nop
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d0f6      	beq.n	8000c3e <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000c58:	b29a      	uxth	r2, r3
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000c62:	b292      	uxth	r2, r2
 8000c64:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8000c68:	2300      	movs	r3, #0
 8000c6a:	77fb      	strb	r3, [r7, #31]
 8000c6c:	e00f      	b.n	8000c8e <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8000c6e:	7ffb      	ldrb	r3, [r7, #31]
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	6812      	ldr	r2, [r2, #0]
 8000c74:	4611      	mov	r1, r2
 8000c76:	7ffa      	ldrb	r2, [r7, #31]
 8000c78:	0092      	lsls	r2, r2, #2
 8000c7a:	440a      	add	r2, r1
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	3320      	adds	r3, #32
 8000c80:	443b      	add	r3, r7
 8000c82:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8000c86:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8000c88:	7ffb      	ldrb	r3, [r7, #31]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	77fb      	strb	r3, [r7, #31]
 8000c8e:	7ffb      	ldrb	r3, [r7, #31]
 8000c90:	2b07      	cmp	r3, #7
 8000c92:	d9ec      	bls.n	8000c6e <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000c9c:	b29a      	uxth	r2, r3
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f042 0208 	orr.w	r2, r2, #8
 8000ca6:	b292      	uxth	r2, r2
 8000ca8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000cb4:	b29a      	uxth	r2, r3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000cbe:	b292      	uxth	r2, r2
 8000cc0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000ccc:	b29a      	uxth	r2, r3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f042 0204 	orr.w	r2, r2, #4
 8000cd6:	b292      	uxth	r2, r2
 8000cd8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f005 fc8f 	bl	8006600 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000ce2:	e026      	b.n	8000d32 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d00f      	beq.n	8000d0e <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000cf6:	b29a      	uxth	r2, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000d00:	b292      	uxth	r2, r2
 8000d02:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f005 fc4d 	bl	80065a6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000d0c:	e011      	b.n	8000d32 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8000d0e:	69bb      	ldr	r3, [r7, #24]
 8000d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d00c      	beq.n	8000d32 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000d20:	b29a      	uxth	r2, r3
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000d2a:	b292      	uxth	r2, r2
 8000d2c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8000d30:	bf00      	nop
  }
}
 8000d32:	3720      	adds	r7, #32
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	460b      	mov	r3, r1
 8000d42:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d101      	bne.n	8000d52 <HAL_PCD_SetAddress+0x1a>
 8000d4e:	2302      	movs	r3, #2
 8000d50:	e012      	b.n	8000d78 <HAL_PCD_SetAddress+0x40>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2201      	movs	r2, #1
 8000d56:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	78fa      	ldrb	r2, [r7, #3]
 8000d5e:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	78fa      	ldrb	r2, [r7, #3]
 8000d66:	4611      	mov	r1, r2
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f003 fdb9 	bl	80048e0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2200      	movs	r2, #0
 8000d72:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8000d76:	2300      	movs	r3, #0
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	4608      	mov	r0, r1
 8000d8a:	4611      	mov	r1, r2
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4603      	mov	r3, r0
 8000d90:	70fb      	strb	r3, [r7, #3]
 8000d92:	460b      	mov	r3, r1
 8000d94:	803b      	strh	r3, [r7, #0]
 8000d96:	4613      	mov	r3, r2
 8000d98:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000d9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	da0e      	bge.n	8000dc4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000da6:	78fb      	ldrb	r3, [r7, #3]
 8000da8:	f003 0207 	and.w	r2, r3, #7
 8000dac:	4613      	mov	r3, r2
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	4413      	add	r3, r2
 8000db2:	00db      	lsls	r3, r3, #3
 8000db4:	3310      	adds	r3, #16
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	4413      	add	r3, r2
 8000dba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	705a      	strb	r2, [r3, #1]
 8000dc2:	e00e      	b.n	8000de2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000dc4:	78fb      	ldrb	r3, [r7, #3]
 8000dc6:	f003 0207 	and.w	r2, r3, #7
 8000dca:	4613      	mov	r3, r2
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	4413      	add	r3, r2
 8000dd0:	00db      	lsls	r3, r3, #3
 8000dd2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	4413      	add	r3, r2
 8000dda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	2200      	movs	r2, #0
 8000de0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000de2:	78fb      	ldrb	r3, [r7, #3]
 8000de4:	f003 0307 	and.w	r3, r3, #7
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000dee:	883a      	ldrh	r2, [r7, #0]
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	78ba      	ldrb	r2, [r7, #2]
 8000df8:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000dfa:	78bb      	ldrb	r3, [r7, #2]
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d102      	bne.n	8000e06 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	2200      	movs	r2, #0
 8000e04:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d101      	bne.n	8000e14 <HAL_PCD_EP_Open+0x94>
 8000e10:	2302      	movs	r3, #2
 8000e12:	e00e      	b.n	8000e32 <HAL_PCD_EP_Open+0xb2>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2201      	movs	r2, #1
 8000e18:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	68f9      	ldr	r1, [r7, #12]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f001 fb02 	bl	800242c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8000e30:	7afb      	ldrb	r3, [r7, #11]
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b084      	sub	sp, #16
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
 8000e42:	460b      	mov	r3, r1
 8000e44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000e46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	da0e      	bge.n	8000e6c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000e4e:	78fb      	ldrb	r3, [r7, #3]
 8000e50:	f003 0207 	and.w	r2, r3, #7
 8000e54:	4613      	mov	r3, r2
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	4413      	add	r3, r2
 8000e5a:	00db      	lsls	r3, r3, #3
 8000e5c:	3310      	adds	r3, #16
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	4413      	add	r3, r2
 8000e62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	2201      	movs	r2, #1
 8000e68:	705a      	strb	r2, [r3, #1]
 8000e6a:	e00e      	b.n	8000e8a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000e6c:	78fb      	ldrb	r3, [r7, #3]
 8000e6e:	f003 0207 	and.w	r2, r3, #7
 8000e72:	4613      	mov	r3, r2
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	4413      	add	r3, r2
 8000e78:	00db      	lsls	r3, r3, #3
 8000e7a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	4413      	add	r3, r2
 8000e82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	2200      	movs	r2, #0
 8000e88:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8000e8a:	78fb      	ldrb	r3, [r7, #3]
 8000e8c:	f003 0307 	and.w	r3, r3, #7
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d101      	bne.n	8000ea4 <HAL_PCD_EP_Close+0x6a>
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	e00e      	b.n	8000ec2 <HAL_PCD_EP_Close+0x88>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	68f9      	ldr	r1, [r7, #12]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f001 fe7a 	bl	8002bac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b086      	sub	sp, #24
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	60f8      	str	r0, [r7, #12]
 8000ed2:	607a      	str	r2, [r7, #4]
 8000ed4:	603b      	str	r3, [r7, #0]
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000eda:	7afb      	ldrb	r3, [r7, #11]
 8000edc:	f003 0207 	and.w	r2, r3, #7
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	4413      	add	r3, r2
 8000ee6:	00db      	lsls	r3, r3, #3
 8000ee8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000eec:	68fa      	ldr	r2, [r7, #12]
 8000eee:	4413      	add	r3, r2
 8000ef0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	683a      	ldr	r2, [r7, #0]
 8000efc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	2200      	movs	r2, #0
 8000f02:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	2200      	movs	r2, #0
 8000f08:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000f0a:	7afb      	ldrb	r3, [r7, #11]
 8000f0c:	f003 0307 	and.w	r3, r3, #7
 8000f10:	b2da      	uxtb	r2, r3
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	6979      	ldr	r1, [r7, #20]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f002 f831 	bl	8002f84 <USB_EPStartXfer>

  return HAL_OK;
 8000f22:	2300      	movs	r3, #0
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	460b      	mov	r3, r1
 8000f36:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8000f38:	78fb      	ldrb	r3, [r7, #3]
 8000f3a:	f003 0207 	and.w	r2, r3, #7
 8000f3e:	6879      	ldr	r1, [r7, #4]
 8000f40:	4613      	mov	r3, r2
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	4413      	add	r3, r2
 8000f46:	00db      	lsls	r3, r3, #3
 8000f48:	440b      	add	r3, r1
 8000f4a:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8000f4e:	681b      	ldr	r3, [r3, #0]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bc80      	pop	{r7}
 8000f58:	4770      	bx	lr

08000f5a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b086      	sub	sp, #24
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	60f8      	str	r0, [r7, #12]
 8000f62:	607a      	str	r2, [r7, #4]
 8000f64:	603b      	str	r3, [r7, #0]
 8000f66:	460b      	mov	r3, r1
 8000f68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000f6a:	7afb      	ldrb	r3, [r7, #11]
 8000f6c:	f003 0207 	and.w	r2, r3, #7
 8000f70:	4613      	mov	r3, r2
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	4413      	add	r3, r2
 8000f76:	00db      	lsls	r3, r3, #3
 8000f78:	3310      	adds	r3, #16
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	683a      	ldr	r2, [r7, #0]
 8000f8a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	683a      	ldr	r2, [r7, #0]
 8000f98:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000fa6:	7afb      	ldrb	r3, [r7, #11]
 8000fa8:	f003 0307 	and.w	r3, r3, #7
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	6979      	ldr	r1, [r7, #20]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f001 ffe3 	bl	8002f84 <USB_EPStartXfer>

  return HAL_OK;
 8000fbe:	2300      	movs	r3, #0
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3718      	adds	r7, #24
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000fd4:	78fb      	ldrb	r3, [r7, #3]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	7912      	ldrb	r2, [r2, #4]
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d901      	bls.n	8000fe6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e04c      	b.n	8001080 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000fe6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	da0e      	bge.n	800100c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000fee:	78fb      	ldrb	r3, [r7, #3]
 8000ff0:	f003 0207 	and.w	r2, r3, #7
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	4413      	add	r3, r2
 8000ffa:	00db      	lsls	r3, r3, #3
 8000ffc:	3310      	adds	r3, #16
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2201      	movs	r2, #1
 8001008:	705a      	strb	r2, [r3, #1]
 800100a:	e00c      	b.n	8001026 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800100c:	78fa      	ldrb	r2, [r7, #3]
 800100e:	4613      	mov	r3, r2
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	4413      	add	r3, r2
 8001014:	00db      	lsls	r3, r3, #3
 8001016:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	4413      	add	r3, r2
 800101e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	2200      	movs	r2, #0
 8001024:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	2201      	movs	r2, #1
 800102a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800102c:	78fb      	ldrb	r3, [r7, #3]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	b2da      	uxtb	r2, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800103e:	2b01      	cmp	r3, #1
 8001040:	d101      	bne.n	8001046 <HAL_PCD_EP_SetStall+0x7e>
 8001042:	2302      	movs	r3, #2
 8001044:	e01c      	b.n	8001080 <HAL_PCD_EP_SetStall+0xb8>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2201      	movs	r2, #1
 800104a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	68f9      	ldr	r1, [r7, #12]
 8001054:	4618      	mov	r0, r3
 8001056:	f003 fb46 	bl	80046e6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800105a:	78fb      	ldrb	r3, [r7, #3]
 800105c:	f003 0307 	and.w	r3, r3, #7
 8001060:	2b00      	cmp	r3, #0
 8001062:	d108      	bne.n	8001076 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800106e:	4619      	mov	r1, r3
 8001070:	4610      	mov	r0, r2
 8001072:	f003 fc6b 	bl	800494c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800107e:	2300      	movs	r3, #0
}
 8001080:	4618      	mov	r0, r3
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001094:	78fb      	ldrb	r3, [r7, #3]
 8001096:	f003 030f 	and.w	r3, r3, #15
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	7912      	ldrb	r2, [r2, #4]
 800109e:	4293      	cmp	r3, r2
 80010a0:	d901      	bls.n	80010a6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e040      	b.n	8001128 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80010a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	da0e      	bge.n	80010cc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80010ae:	78fb      	ldrb	r3, [r7, #3]
 80010b0:	f003 0207 	and.w	r2, r3, #7
 80010b4:	4613      	mov	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	4413      	add	r3, r2
 80010ba:	00db      	lsls	r3, r3, #3
 80010bc:	3310      	adds	r3, #16
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	4413      	add	r3, r2
 80010c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	2201      	movs	r2, #1
 80010c8:	705a      	strb	r2, [r3, #1]
 80010ca:	e00e      	b.n	80010ea <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80010cc:	78fb      	ldrb	r3, [r7, #3]
 80010ce:	f003 0207 	and.w	r2, r3, #7
 80010d2:	4613      	mov	r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	4413      	add	r3, r2
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	4413      	add	r3, r2
 80010e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	2200      	movs	r2, #0
 80010e8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	2200      	movs	r2, #0
 80010ee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80010f0:	78fb      	ldrb	r3, [r7, #3]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001102:	2b01      	cmp	r3, #1
 8001104:	d101      	bne.n	800110a <HAL_PCD_EP_ClrStall+0x82>
 8001106:	2302      	movs	r3, #2
 8001108:	e00e      	b.n	8001128 <HAL_PCD_EP_ClrStall+0xa0>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2201      	movs	r2, #1
 800110e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	68f9      	ldr	r1, [r7, #12]
 8001118:	4618      	mov	r0, r3
 800111a:	f003 fb34 	bl	8004786 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001126:	2300      	movs	r3, #0
}
 8001128:	4618      	mov	r0, r3
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b096      	sub	sp, #88	@ 0x58
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001138:	e3bb      	b.n	80018b2 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001142:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001146:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800114a:	b2db      	uxtb	r3, r3
 800114c:	f003 030f 	and.w	r3, r3, #15
 8001150:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8001154:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001158:	2b00      	cmp	r3, #0
 800115a:	f040 8175 	bne.w	8001448 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800115e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001162:	f003 0310 	and.w	r3, r3, #16
 8001166:	2b00      	cmp	r3, #0
 8001168:	d14e      	bne.n	8001208 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	881b      	ldrh	r3, [r3, #0]
 8001170:	b29b      	uxth	r3, r3
 8001172:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001176:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800117a:	81fb      	strh	r3, [r7, #14]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	89fb      	ldrh	r3, [r7, #14]
 8001182:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001186:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800118a:	b29b      	uxth	r3, r3
 800118c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3310      	adds	r3, #16
 8001192:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800119c:	b29b      	uxth	r3, r3
 800119e:	461a      	mov	r2, r3
 80011a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	00db      	lsls	r3, r3, #3
 80011a6:	4413      	add	r3, r2
 80011a8:	3302      	adds	r3, #2
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	6812      	ldr	r2, [r2, #0]
 80011b0:	4413      	add	r3, r2
 80011b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80011b6:	881b      	ldrh	r3, [r3, #0]
 80011b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80011bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011be:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80011c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011c2:	695a      	ldr	r2, [r3, #20]
 80011c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011c6:	69db      	ldr	r3, [r3, #28]
 80011c8:	441a      	add	r2, r3
 80011ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011cc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80011ce:	2100      	movs	r1, #0
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f005 f9ce 	bl	8006572 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	7b5b      	ldrb	r3, [r3, #13]
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	2b00      	cmp	r3, #0
 80011de:	f000 8368 	beq.w	80018b2 <PCD_EP_ISR_Handler+0x782>
 80011e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	f040 8363 	bne.w	80018b2 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	7b5b      	ldrb	r3, [r3, #13]
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	735a      	strb	r2, [r3, #13]
 8001206:	e354      	b.n	80018b2 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800120e:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800121a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800121e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001222:	2b00      	cmp	r3, #0
 8001224:	d034      	beq.n	8001290 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800122e:	b29b      	uxth	r3, r3
 8001230:	461a      	mov	r2, r3
 8001232:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	00db      	lsls	r3, r3, #3
 8001238:	4413      	add	r3, r2
 800123a:	3306      	adds	r3, #6
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	6812      	ldr	r2, [r2, #0]
 8001242:	4413      	add	r3, r2
 8001244:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001248:	881b      	ldrh	r3, [r3, #0]
 800124a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800124e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001250:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6818      	ldr	r0, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800125c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800125e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001260:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001262:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001264:	b29b      	uxth	r3, r3
 8001266:	f003 fbc1 	bl	80049ec <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	881b      	ldrh	r3, [r3, #0]
 8001270:	b29a      	uxth	r2, r3
 8001272:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001276:	4013      	ands	r3, r2
 8001278:	823b      	strh	r3, [r7, #16]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	8a3a      	ldrh	r2, [r7, #16]
 8001280:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001284:	b292      	uxth	r2, r2
 8001286:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f005 f945 	bl	8006518 <HAL_PCD_SetupStageCallback>
 800128e:	e310      	b.n	80018b2 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001290:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001294:	2b00      	cmp	r3, #0
 8001296:	f280 830c 	bge.w	80018b2 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	881b      	ldrh	r3, [r3, #0]
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80012a6:	4013      	ands	r3, r2
 80012a8:	83fb      	strh	r3, [r7, #30]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	8bfa      	ldrh	r2, [r7, #30]
 80012b0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80012b4:	b292      	uxth	r2, r2
 80012b6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	461a      	mov	r2, r3
 80012c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	4413      	add	r3, r2
 80012cc:	3306      	adds	r3, #6
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	6812      	ldr	r2, [r2, #0]
 80012d4:	4413      	add	r3, r2
 80012d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80012da:	881b      	ldrh	r3, [r3, #0]
 80012dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80012e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80012e2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80012e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80012e6:	69db      	ldr	r3, [r3, #28]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d019      	beq.n	8001320 <PCD_EP_ISR_Handler+0x1f0>
 80012ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80012ee:	695b      	ldr	r3, [r3, #20]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d015      	beq.n	8001320 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6818      	ldr	r0, [r3, #0]
 80012f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80012fa:	6959      	ldr	r1, [r3, #20]
 80012fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80012fe:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001300:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001302:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001304:	b29b      	uxth	r3, r3
 8001306:	f003 fb71 	bl	80049ec <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800130a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800130c:	695a      	ldr	r2, [r3, #20]
 800130e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	441a      	add	r2, r3
 8001314:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001316:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001318:	2100      	movs	r1, #0
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f005 f90e 	bl	800653c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	881b      	ldrh	r3, [r3, #0]
 8001326:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800132a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800132e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001332:	2b00      	cmp	r3, #0
 8001334:	f040 82bd 	bne.w	80018b2 <PCD_EP_ISR_Handler+0x782>
 8001338:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800133c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001340:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001344:	f000 82b5 	beq.w	80018b2 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	61bb      	str	r3, [r7, #24]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001356:	b29b      	uxth	r3, r3
 8001358:	461a      	mov	r2, r3
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	4413      	add	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	881b      	ldrh	r3, [r3, #0]
 800136c:	b29b      	uxth	r3, r3
 800136e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001372:	b29a      	uxth	r2, r3
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	801a      	strh	r2, [r3, #0]
 8001378:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800137a:	691b      	ldr	r3, [r3, #16]
 800137c:	2b3e      	cmp	r3, #62	@ 0x3e
 800137e:	d91d      	bls.n	80013bc <PCD_EP_ISR_Handler+0x28c>
 8001380:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001382:	691b      	ldr	r3, [r3, #16]
 8001384:	095b      	lsrs	r3, r3, #5
 8001386:	647b      	str	r3, [r7, #68]	@ 0x44
 8001388:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	f003 031f 	and.w	r3, r3, #31
 8001390:	2b00      	cmp	r3, #0
 8001392:	d102      	bne.n	800139a <PCD_EP_ISR_Handler+0x26a>
 8001394:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001396:	3b01      	subs	r3, #1
 8001398:	647b      	str	r3, [r7, #68]	@ 0x44
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	881b      	ldrh	r3, [r3, #0]
 800139e:	b29a      	uxth	r2, r3
 80013a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	029b      	lsls	r3, r3, #10
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	4313      	orrs	r3, r2
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80013b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	801a      	strh	r2, [r3, #0]
 80013ba:	e026      	b.n	800140a <PCD_EP_ISR_Handler+0x2da>
 80013bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013be:	691b      	ldr	r3, [r3, #16]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d10a      	bne.n	80013da <PCD_EP_ISR_Handler+0x2aa>
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	881b      	ldrh	r3, [r3, #0]
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80013ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80013d2:	b29a      	uxth	r2, r3
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	801a      	strh	r2, [r3, #0]
 80013d8:	e017      	b.n	800140a <PCD_EP_ISR_Handler+0x2da>
 80013da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013dc:	691b      	ldr	r3, [r3, #16]
 80013de:	085b      	lsrs	r3, r3, #1
 80013e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80013e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013e4:	691b      	ldr	r3, [r3, #16]
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d002      	beq.n	80013f4 <PCD_EP_ISR_Handler+0x2c4>
 80013ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80013f0:	3301      	adds	r3, #1
 80013f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	881b      	ldrh	r3, [r3, #0]
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	029b      	lsls	r3, r3, #10
 8001400:	b29b      	uxth	r3, r3
 8001402:	4313      	orrs	r3, r2
 8001404:	b29a      	uxth	r2, r3
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	881b      	ldrh	r3, [r3, #0]
 8001410:	b29b      	uxth	r3, r3
 8001412:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001416:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800141a:	827b      	strh	r3, [r7, #18]
 800141c:	8a7b      	ldrh	r3, [r7, #18]
 800141e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001422:	827b      	strh	r3, [r7, #18]
 8001424:	8a7b      	ldrh	r3, [r7, #18]
 8001426:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800142a:	827b      	strh	r3, [r7, #18]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	8a7b      	ldrh	r3, [r7, #18]
 8001432:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001436:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800143a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800143e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001442:	b29b      	uxth	r3, r3
 8001444:	8013      	strh	r3, [r2, #0]
 8001446:	e234      	b.n	80018b2 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	461a      	mov	r2, r3
 800144e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4413      	add	r3, r2
 8001456:	881b      	ldrh	r3, [r3, #0]
 8001458:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800145c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001460:	2b00      	cmp	r3, #0
 8001462:	f280 80fc 	bge.w	800165e <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	461a      	mov	r2, r3
 800146c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	881b      	ldrh	r3, [r3, #0]
 8001476:	b29a      	uxth	r2, r3
 8001478:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800147c:	4013      	ands	r3, r2
 800147e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	461a      	mov	r2, r3
 8001488:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4413      	add	r3, r2
 8001490:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8001494:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001498:	b292      	uxth	r2, r2
 800149a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800149c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80014a0:	4613      	mov	r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	4413      	add	r3, r2
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	4413      	add	r3, r2
 80014b0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80014b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014b4:	7b1b      	ldrb	r3, [r3, #12]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d125      	bne.n	8001506 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	461a      	mov	r2, r3
 80014c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	4413      	add	r3, r2
 80014ce:	3306      	adds	r3, #6
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	6812      	ldr	r2, [r2, #0]
 80014d6:	4413      	add	r3, r2
 80014d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80014dc:	881b      	ldrh	r3, [r3, #0]
 80014de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014e2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80014e6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f000 8092 	beq.w	8001614 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6818      	ldr	r0, [r3, #0]
 80014f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014f6:	6959      	ldr	r1, [r3, #20]
 80014f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014fa:	88da      	ldrh	r2, [r3, #6]
 80014fc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001500:	f003 fa74 	bl	80049ec <USB_ReadPMA>
 8001504:	e086      	b.n	8001614 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001506:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001508:	78db      	ldrb	r3, [r3, #3]
 800150a:	2b02      	cmp	r3, #2
 800150c:	d10a      	bne.n	8001524 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800150e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001512:	461a      	mov	r2, r3
 8001514:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f000 f9d9 	bl	80018ce <HAL_PCD_EP_DB_Receive>
 800151c:	4603      	mov	r3, r0
 800151e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8001522:	e077      	b.n	8001614 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	461a      	mov	r2, r3
 800152a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	b29b      	uxth	r3, r3
 8001536:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800153a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800153e:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	461a      	mov	r2, r3
 8001548:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	441a      	add	r2, r3
 8001550:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001554:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001558:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800155c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001560:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001564:	b29b      	uxth	r3, r3
 8001566:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	461a      	mov	r2, r3
 800156e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	b29b      	uxth	r3, r3
 800157a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d024      	beq.n	80015cc <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800158a:	b29b      	uxth	r3, r3
 800158c:	461a      	mov	r2, r3
 800158e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	4413      	add	r3, r2
 8001596:	3302      	adds	r3, #2
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	6812      	ldr	r2, [r2, #0]
 800159e:	4413      	add	r3, r2
 80015a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80015a4:	881b      	ldrh	r3, [r3, #0]
 80015a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015aa:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80015ae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d02e      	beq.n	8001614 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6818      	ldr	r0, [r3, #0]
 80015ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015bc:	6959      	ldr	r1, [r3, #20]
 80015be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015c0:	891a      	ldrh	r2, [r3, #8]
 80015c2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80015c6:	f003 fa11 	bl	80049ec <USB_ReadPMA>
 80015ca:	e023      	b.n	8001614 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	461a      	mov	r2, r3
 80015d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	4413      	add	r3, r2
 80015e0:	3306      	adds	r3, #6
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	6812      	ldr	r2, [r2, #0]
 80015e8:	4413      	add	r3, r2
 80015ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015f4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80015f8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d009      	beq.n	8001614 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6818      	ldr	r0, [r3, #0]
 8001604:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001606:	6959      	ldr	r1, [r3, #20]
 8001608:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800160a:	895a      	ldrh	r2, [r3, #10]
 800160c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001610:	f003 f9ec 	bl	80049ec <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001614:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001616:	69da      	ldr	r2, [r3, #28]
 8001618:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800161c:	441a      	add	r2, r3
 800161e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001620:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001622:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001624:	695a      	ldr	r2, [r3, #20]
 8001626:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800162a:	441a      	add	r2, r3
 800162c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800162e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001630:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d005      	beq.n	8001644 <PCD_EP_ISR_Handler+0x514>
 8001638:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800163c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800163e:	691b      	ldr	r3, [r3, #16]
 8001640:	429a      	cmp	r2, r3
 8001642:	d206      	bcs.n	8001652 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001644:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	4619      	mov	r1, r3
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f004 ff76 	bl	800653c <HAL_PCD_DataOutStageCallback>
 8001650:	e005      	b.n	800165e <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001658:	4618      	mov	r0, r3
 800165a:	f001 fc93 	bl	8002f84 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800165e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001666:	2b00      	cmp	r3, #0
 8001668:	f000 8123 	beq.w	80018b2 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 800166c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001670:	4613      	mov	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4413      	add	r3, r2
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	3310      	adds	r3, #16
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	4413      	add	r3, r2
 800167e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	461a      	mov	r2, r3
 8001686:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	881b      	ldrh	r3, [r3, #0]
 8001690:	b29b      	uxth	r3, r3
 8001692:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001696:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800169a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	461a      	mov	r2, r3
 80016a4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	441a      	add	r2, r3
 80016ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80016b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80016b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80016bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016be:	78db      	ldrb	r3, [r3, #3]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	f040 80a2 	bne.w	800180a <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 80016c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016c8:	2200      	movs	r2, #0
 80016ca:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80016cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016ce:	7b1b      	ldrb	r3, [r3, #12]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 8093 	beq.w	80017fc <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80016d6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80016da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d046      	beq.n	8001770 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80016e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016e4:	785b      	ldrb	r3, [r3, #1]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d126      	bne.n	8001738 <PCD_EP_ISR_Handler+0x608>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	461a      	mov	r2, r3
 80016fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016fe:	4413      	add	r3, r2
 8001700:	627b      	str	r3, [r7, #36]	@ 0x24
 8001702:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	011a      	lsls	r2, r3, #4
 8001708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170a:	4413      	add	r3, r2
 800170c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001710:	623b      	str	r3, [r7, #32]
 8001712:	6a3b      	ldr	r3, [r7, #32]
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	b29b      	uxth	r3, r3
 8001718:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800171c:	b29a      	uxth	r2, r3
 800171e:	6a3b      	ldr	r3, [r7, #32]
 8001720:	801a      	strh	r2, [r3, #0]
 8001722:	6a3b      	ldr	r3, [r7, #32]
 8001724:	881b      	ldrh	r3, [r3, #0]
 8001726:	b29b      	uxth	r3, r3
 8001728:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800172c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001730:	b29a      	uxth	r2, r3
 8001732:	6a3b      	ldr	r3, [r7, #32]
 8001734:	801a      	strh	r2, [r3, #0]
 8001736:	e061      	b.n	80017fc <PCD_EP_ISR_Handler+0x6cc>
 8001738:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800173a:	785b      	ldrb	r3, [r3, #1]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d15d      	bne.n	80017fc <PCD_EP_ISR_Handler+0x6cc>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800174e:	b29b      	uxth	r3, r3
 8001750:	461a      	mov	r2, r3
 8001752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001754:	4413      	add	r3, r2
 8001756:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001758:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	011a      	lsls	r2, r3, #4
 800175e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001760:	4413      	add	r3, r2
 8001762:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001766:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800176a:	2200      	movs	r2, #0
 800176c:	801a      	strh	r2, [r3, #0]
 800176e:	e045      	b.n	80017fc <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001776:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001778:	785b      	ldrb	r3, [r3, #1]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d126      	bne.n	80017cc <PCD_EP_ISR_Handler+0x69c>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	637b      	str	r3, [r7, #52]	@ 0x34
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800178c:	b29b      	uxth	r3, r3
 800178e:	461a      	mov	r2, r3
 8001790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001792:	4413      	add	r3, r2
 8001794:	637b      	str	r3, [r7, #52]	@ 0x34
 8001796:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	011a      	lsls	r2, r3, #4
 800179c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800179e:	4413      	add	r3, r2
 80017a0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80017a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80017a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017b4:	801a      	strh	r2, [r3, #0]
 80017b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017b8:	881b      	ldrh	r3, [r3, #0]
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80017c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017c8:	801a      	strh	r2, [r3, #0]
 80017ca:	e017      	b.n	80017fc <PCD_EP_ISR_Handler+0x6cc>
 80017cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017ce:	785b      	ldrb	r3, [r3, #1]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d113      	bne.n	80017fc <PCD_EP_ISR_Handler+0x6cc>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80017dc:	b29b      	uxth	r3, r3
 80017de:	461a      	mov	r2, r3
 80017e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80017e2:	4413      	add	r3, r2
 80017e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80017e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	011a      	lsls	r2, r3, #4
 80017ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80017ee:	4413      	add	r3, r2
 80017f0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80017f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80017f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017f8:	2200      	movs	r2, #0
 80017fa:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80017fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	4619      	mov	r1, r3
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f004 feb5 	bl	8006572 <HAL_PCD_DataInStageCallback>
 8001808:	e053      	b.n	80018b2 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800180a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800180e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001812:	2b00      	cmp	r3, #0
 8001814:	d146      	bne.n	80018a4 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800181e:	b29b      	uxth	r3, r3
 8001820:	461a      	mov	r2, r3
 8001822:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	4413      	add	r3, r2
 800182a:	3302      	adds	r3, #2
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	6812      	ldr	r2, [r2, #0]
 8001832:	4413      	add	r3, r2
 8001834:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001838:	881b      	ldrh	r3, [r3, #0]
 800183a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800183e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8001842:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001844:	699a      	ldr	r2, [r3, #24]
 8001846:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800184a:	429a      	cmp	r2, r3
 800184c:	d907      	bls.n	800185e <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 800184e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001850:	699a      	ldr	r2, [r3, #24]
 8001852:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001856:	1ad2      	subs	r2, r2, r3
 8001858:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800185a:	619a      	str	r2, [r3, #24]
 800185c:	e002      	b.n	8001864 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 800185e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001860:	2200      	movs	r2, #0
 8001862:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001864:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d106      	bne.n	800187a <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800186c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	4619      	mov	r1, r3
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f004 fe7d 	bl	8006572 <HAL_PCD_DataInStageCallback>
 8001878:	e01b      	b.n	80018b2 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800187a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800187c:	695a      	ldr	r2, [r3, #20]
 800187e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001882:	441a      	add	r2, r3
 8001884:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001886:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001888:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800188a:	69da      	ldr	r2, [r3, #28]
 800188c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001890:	441a      	add	r2, r3
 8001892:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001894:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800189c:	4618      	mov	r0, r3
 800189e:	f001 fb71 	bl	8002f84 <USB_EPStartXfer>
 80018a2:	e006      	b.n	80018b2 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80018a4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80018a8:	461a      	mov	r2, r3
 80018aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f000 f91b 	bl	8001ae8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	b21b      	sxth	r3, r3
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f6ff ac3b 	blt.w	800113a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3758      	adds	r7, #88	@ 0x58
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b088      	sub	sp, #32
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	60f8      	str	r0, [r7, #12]
 80018d6:	60b9      	str	r1, [r7, #8]
 80018d8:	4613      	mov	r3, r2
 80018da:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80018dc:	88fb      	ldrh	r3, [r7, #6]
 80018de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d07e      	beq.n	80019e4 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	461a      	mov	r2, r3
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	4413      	add	r3, r2
 80018fa:	3302      	adds	r3, #2
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	6812      	ldr	r2, [r2, #0]
 8001902:	4413      	add	r3, r2
 8001904:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001908:	881b      	ldrh	r3, [r3, #0]
 800190a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800190e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	699a      	ldr	r2, [r3, #24]
 8001914:	8b7b      	ldrh	r3, [r7, #26]
 8001916:	429a      	cmp	r2, r3
 8001918:	d306      	bcc.n	8001928 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	699a      	ldr	r2, [r3, #24]
 800191e:	8b7b      	ldrh	r3, [r7, #26]
 8001920:	1ad2      	subs	r2, r2, r3
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	619a      	str	r2, [r3, #24]
 8001926:	e002      	b.n	800192e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	2200      	movs	r2, #0
 800192c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d123      	bne.n	800197e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	461a      	mov	r2, r3
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4413      	add	r3, r2
 8001944:	881b      	ldrh	r3, [r3, #0]
 8001946:	b29b      	uxth	r3, r3
 8001948:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800194c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001950:	833b      	strh	r3, [r7, #24]
 8001952:	8b3b      	ldrh	r3, [r7, #24]
 8001954:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001958:	833b      	strh	r3, [r7, #24]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	461a      	mov	r2, r3
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	441a      	add	r2, r3
 8001968:	8b3b      	ldrh	r3, [r7, #24]
 800196a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800196e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001972:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001976:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800197a:	b29b      	uxth	r3, r3
 800197c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800197e:	88fb      	ldrh	r3, [r7, #6]
 8001980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001984:	2b00      	cmp	r3, #0
 8001986:	d01f      	beq.n	80019c8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	461a      	mov	r2, r3
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	881b      	ldrh	r3, [r3, #0]
 8001998:	b29b      	uxth	r3, r3
 800199a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800199e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80019a2:	82fb      	strh	r3, [r7, #22]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	461a      	mov	r2, r3
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	441a      	add	r2, r3
 80019b2:	8afb      	ldrh	r3, [r7, #22]
 80019b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80019b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80019bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019c0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80019c8:	8b7b      	ldrh	r3, [r7, #26]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f000 8087 	beq.w	8001ade <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6818      	ldr	r0, [r3, #0]
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	6959      	ldr	r1, [r3, #20]
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	891a      	ldrh	r2, [r3, #8]
 80019dc:	8b7b      	ldrh	r3, [r7, #26]
 80019de:	f003 f805 	bl	80049ec <USB_ReadPMA>
 80019e2:	e07c      	b.n	8001ade <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	461a      	mov	r2, r3
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	4413      	add	r3, r2
 80019f8:	3306      	adds	r3, #6
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	68fa      	ldr	r2, [r7, #12]
 80019fe:	6812      	ldr	r2, [r2, #0]
 8001a00:	4413      	add	r3, r2
 8001a02:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001a06:	881b      	ldrh	r3, [r3, #0]
 8001a08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a0c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	699a      	ldr	r2, [r3, #24]
 8001a12:	8b7b      	ldrh	r3, [r7, #26]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d306      	bcc.n	8001a26 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	699a      	ldr	r2, [r3, #24]
 8001a1c:	8b7b      	ldrh	r3, [r7, #26]
 8001a1e:	1ad2      	subs	r2, r2, r3
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	619a      	str	r2, [r3, #24]
 8001a24:	e002      	b.n	8001a2c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d123      	bne.n	8001a7c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4413      	add	r3, r2
 8001a42:	881b      	ldrh	r3, [r3, #0]
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001a4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001a4e:	83fb      	strh	r3, [r7, #30]
 8001a50:	8bfb      	ldrh	r3, [r7, #30]
 8001a52:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001a56:	83fb      	strh	r3, [r7, #30]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	441a      	add	r2, r3
 8001a66:	8bfb      	ldrh	r3, [r7, #30]
 8001a68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001a6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001a70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001a7c:	88fb      	ldrh	r3, [r7, #6]
 8001a7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d11f      	bne.n	8001ac6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4413      	add	r3, r2
 8001a94:	881b      	ldrh	r3, [r3, #0]
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001a9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001aa0:	83bb      	strh	r3, [r7, #28]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	441a      	add	r2, r3
 8001ab0:	8bbb      	ldrh	r3, [r7, #28]
 8001ab2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001ab6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001aba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001abe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001ac6:	8b7b      	ldrh	r3, [r7, #26]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d008      	beq.n	8001ade <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6818      	ldr	r0, [r3, #0]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	6959      	ldr	r1, [r3, #20]
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	895a      	ldrh	r2, [r3, #10]
 8001ad8:	8b7b      	ldrh	r3, [r7, #26]
 8001ada:	f002 ff87 	bl	80049ec <USB_ReadPMA>
    }
  }

  return count;
 8001ade:	8b7b      	ldrh	r3, [r7, #26]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3720      	adds	r7, #32
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b0a4      	sub	sp, #144	@ 0x90
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	4613      	mov	r3, r2
 8001af4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001af6:	88fb      	ldrh	r3, [r7, #6]
 8001af8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f000 81dd 	beq.w	8001ebc <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	4413      	add	r3, r2
 8001b16:	3302      	adds	r3, #2
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	6812      	ldr	r2, [r2, #0]
 8001b1e:	4413      	add	r3, r2
 8001b20:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001b24:	881b      	ldrh	r3, [r3, #0]
 8001b26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b2a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	699a      	ldr	r2, [r3, #24]
 8001b32:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d907      	bls.n	8001b4a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	699a      	ldr	r2, [r3, #24]
 8001b3e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001b42:	1ad2      	subs	r2, r2, r3
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	619a      	str	r2, [r3, #24]
 8001b48:	e002      	b.n	8001b50 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f040 80b9 	bne.w	8001ccc <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	785b      	ldrb	r3, [r3, #1]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d126      	bne.n	8001bb0 <HAL_PCD_EP_DB_Transmit+0xc8>
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	461a      	mov	r2, r3
 8001b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b76:	4413      	add	r3, r2
 8001b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	011a      	lsls	r2, r3, #4
 8001b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b82:	4413      	add	r3, r2
 8001b84:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001b88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b8c:	881b      	ldrh	r3, [r3, #0]
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b98:	801a      	strh	r2, [r3, #0]
 8001b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b9c:	881b      	ldrh	r3, [r3, #0]
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ba4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bac:	801a      	strh	r2, [r3, #0]
 8001bae:	e01a      	b.n	8001be6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	785b      	ldrb	r3, [r3, #1]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d116      	bne.n	8001be6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	461a      	mov	r2, r3
 8001bca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bcc:	4413      	add	r3, r2
 8001bce:	637b      	str	r3, [r7, #52]	@ 0x34
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	011a      	lsls	r2, r3, #4
 8001bd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bd8:	4413      	add	r3, r2
 8001bda:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001bde:	633b      	str	r3, [r7, #48]	@ 0x30
 8001be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001be2:	2200      	movs	r2, #0
 8001be4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	785b      	ldrb	r3, [r3, #1]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d126      	bne.n	8001c42 <HAL_PCD_EP_DB_Transmit+0x15a>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	61fb      	str	r3, [r7, #28]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	461a      	mov	r2, r3
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	4413      	add	r3, r2
 8001c0a:	61fb      	str	r3, [r7, #28]
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	011a      	lsls	r2, r3, #4
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	4413      	add	r3, r2
 8001c16:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001c1a:	61bb      	str	r3, [r7, #24]
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	881b      	ldrh	r3, [r3, #0]
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	801a      	strh	r2, [r3, #0]
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	881b      	ldrh	r3, [r3, #0]
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	801a      	strh	r2, [r3, #0]
 8001c40:	e017      	b.n	8001c72 <HAL_PCD_EP_DB_Transmit+0x18a>
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	785b      	ldrb	r3, [r3, #1]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d113      	bne.n	8001c72 <HAL_PCD_EP_DB_Transmit+0x18a>
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	461a      	mov	r2, r3
 8001c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c58:	4413      	add	r3, r2
 8001c5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	011a      	lsls	r2, r3, #4
 8001c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c64:	4413      	add	r3, r2
 8001c66:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001c6a:	623b      	str	r3, [r7, #32]
 8001c6c:	6a3b      	ldr	r3, [r7, #32]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	4619      	mov	r1, r3
 8001c78:	68f8      	ldr	r0, [r7, #12]
 8001c7a:	f004 fc7a 	bl	8006572 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001c7e:	88fb      	ldrh	r3, [r7, #6]
 8001c80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f000 82fc 	beq.w	8002282 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4413      	add	r3, r2
 8001c98:	881b      	ldrh	r3, [r3, #0]
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001ca0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ca4:	82fb      	strh	r3, [r7, #22]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	461a      	mov	r2, r3
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	441a      	add	r2, r3
 8001cb4:	8afb      	ldrh	r3, [r7, #22]
 8001cb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001cba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001cbe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001cc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	8013      	strh	r3, [r2, #0]
 8001cca:	e2da      	b.n	8002282 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ccc:	88fb      	ldrh	r3, [r7, #6]
 8001cce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d021      	beq.n	8001d1a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	461a      	mov	r2, r3
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	881b      	ldrh	r3, [r3, #0]
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001cec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001cf0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	441a      	add	r2, r3
 8001d02:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8001d06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001d0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001d0e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	f040 82ae 	bne.w	8002282 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	695a      	ldr	r2, [r3, #20]
 8001d2a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001d2e:	441a      	add	r2, r3
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	69da      	ldr	r2, [r3, #28]
 8001d38:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001d3c:	441a      	add	r2, r3
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	6a1a      	ldr	r2, [r3, #32]
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d30b      	bcc.n	8001d66 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	6a1a      	ldr	r2, [r3, #32]
 8001d5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d5e:	1ad2      	subs	r2, r2, r3
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	621a      	str	r2, [r3, #32]
 8001d64:	e017      	b.n	8001d96 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	6a1b      	ldr	r3, [r3, #32]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d108      	bne.n	8001d80 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8001d6e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001d72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001d7e:	e00a      	b.n	8001d96 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	2200      	movs	r2, #0
 8001d94:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	785b      	ldrb	r3, [r3, #1]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d165      	bne.n	8001e6a <HAL_PCD_EP_DB_Transmit+0x382>
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	461a      	mov	r2, r3
 8001db0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001db2:	4413      	add	r3, r2
 8001db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	011a      	lsls	r2, r3, #4
 8001dbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001dbe:	4413      	add	r3, r2
 8001dc0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001dc4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dc8:	881b      	ldrh	r3, [r3, #0]
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dd4:	801a      	strh	r2, [r3, #0]
 8001dd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001dda:	2b3e      	cmp	r3, #62	@ 0x3e
 8001ddc:	d91d      	bls.n	8001e1a <HAL_PCD_EP_DB_Transmit+0x332>
 8001dde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001de2:	095b      	lsrs	r3, r3, #5
 8001de4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001de6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001dea:	f003 031f 	and.w	r3, r3, #31
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d102      	bne.n	8001df8 <HAL_PCD_EP_DB_Transmit+0x310>
 8001df2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001df4:	3b01      	subs	r3, #1
 8001df6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dfa:	881b      	ldrh	r3, [r3, #0]
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	029b      	lsls	r3, r3, #10
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	4313      	orrs	r3, r2
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e16:	801a      	strh	r2, [r3, #0]
 8001e18:	e044      	b.n	8001ea4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8001e1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d10a      	bne.n	8001e38 <HAL_PCD_EP_DB_Transmit+0x350>
 8001e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e24:	881b      	ldrh	r3, [r3, #0]
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e34:	801a      	strh	r2, [r3, #0]
 8001e36:	e035      	b.n	8001ea4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8001e38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e3c:	085b      	lsrs	r3, r3, #1
 8001e3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001e40:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d002      	beq.n	8001e52 <HAL_PCD_EP_DB_Transmit+0x36a>
 8001e4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e4e:	3301      	adds	r3, #1
 8001e50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e54:	881b      	ldrh	r3, [r3, #0]
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	029b      	lsls	r3, r3, #10
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	4313      	orrs	r3, r2
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e66:	801a      	strh	r2, [r3, #0]
 8001e68:	e01c      	b.n	8001ea4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	785b      	ldrb	r3, [r3, #1]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d118      	bne.n	8001ea4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	461a      	mov	r2, r3
 8001e84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e86:	4413      	add	r3, r2
 8001e88:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	011a      	lsls	r2, r3, #4
 8001e90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e92:	4413      	add	r3, r2
 8001e94:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001e98:	643b      	str	r3, [r7, #64]	@ 0x40
 8001e9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ea2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6818      	ldr	r0, [r3, #0]
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	6959      	ldr	r1, [r3, #20]
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	891a      	ldrh	r2, [r3, #8]
 8001eb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	f002 fd54 	bl	8004962 <USB_WritePMA>
 8001eba:	e1e2      	b.n	8002282 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	4413      	add	r3, r2
 8001ed0:	3306      	adds	r3, #6
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	6812      	ldr	r2, [r2, #0]
 8001ed8:	4413      	add	r3, r2
 8001eda:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001ede:	881b      	ldrh	r3, [r3, #0]
 8001ee0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ee4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	699a      	ldr	r2, [r3, #24]
 8001eec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d307      	bcc.n	8001f04 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	699a      	ldr	r2, [r3, #24]
 8001ef8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001efc:	1ad2      	subs	r2, r2, r3
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	619a      	str	r2, [r3, #24]
 8001f02:	e002      	b.n	8001f0a <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	2200      	movs	r2, #0
 8001f08:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f040 80c0 	bne.w	8002094 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	785b      	ldrb	r3, [r3, #1]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d126      	bne.n	8001f6a <HAL_PCD_EP_DB_Transmit+0x482>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001f30:	4413      	add	r3, r2
 8001f32:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	011a      	lsls	r2, r3, #4
 8001f3a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001f3c:	4413      	add	r3, r2
 8001f3e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001f42:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001f44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f46:	881b      	ldrh	r3, [r3, #0]
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f52:	801a      	strh	r2, [r3, #0]
 8001f54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f66:	801a      	strh	r2, [r3, #0]
 8001f68:	e01a      	b.n	8001fa0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	785b      	ldrb	r3, [r3, #1]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d116      	bne.n	8001fa0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	667b      	str	r3, [r7, #100]	@ 0x64
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	461a      	mov	r2, r3
 8001f84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f86:	4413      	add	r3, r2
 8001f88:	667b      	str	r3, [r7, #100]	@ 0x64
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	011a      	lsls	r2, r3, #4
 8001f90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f92:	4413      	add	r3, r2
 8001f94:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001f98:	663b      	str	r3, [r7, #96]	@ 0x60
 8001f9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	677b      	str	r3, [r7, #116]	@ 0x74
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	785b      	ldrb	r3, [r3, #1]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d12b      	bne.n	8002006 <HAL_PCD_EP_DB_Transmit+0x51e>
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001fc2:	4413      	add	r3, r2
 8001fc4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	011a      	lsls	r2, r3, #4
 8001fcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001fce:	4413      	add	r3, r2
 8001fd0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001fd4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001fd8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001fdc:	881b      	ldrh	r3, [r3, #0]
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001fea:	801a      	strh	r2, [r3, #0]
 8001fec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001ff0:	881b      	ldrh	r3, [r3, #0]
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ff8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002002:	801a      	strh	r2, [r3, #0]
 8002004:	e017      	b.n	8002036 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	785b      	ldrb	r3, [r3, #1]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d113      	bne.n	8002036 <HAL_PCD_EP_DB_Transmit+0x54e>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002016:	b29b      	uxth	r3, r3
 8002018:	461a      	mov	r2, r3
 800201a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800201c:	4413      	add	r3, r2
 800201e:	677b      	str	r3, [r7, #116]	@ 0x74
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	011a      	lsls	r2, r3, #4
 8002026:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002028:	4413      	add	r3, r2
 800202a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800202e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002030:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002032:	2200      	movs	r2, #0
 8002034:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	4619      	mov	r1, r3
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	f004 fa98 	bl	8006572 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002042:	88fb      	ldrh	r3, [r7, #6]
 8002044:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002048:	2b00      	cmp	r3, #0
 800204a:	f040 811a 	bne.w	8002282 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	461a      	mov	r2, r3
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	881b      	ldrh	r3, [r3, #0]
 800205e:	b29b      	uxth	r3, r3
 8002060:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002064:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002068:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	461a      	mov	r2, r3
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	441a      	add	r2, r3
 800207a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800207e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002082:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002086:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800208a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800208e:	b29b      	uxth	r3, r3
 8002090:	8013      	strh	r3, [r2, #0]
 8002092:	e0f6      	b.n	8002282 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002094:	88fb      	ldrh	r3, [r7, #6]
 8002096:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d121      	bne.n	80020e2 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	461a      	mov	r2, r3
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	4413      	add	r3, r2
 80020ac:	881b      	ldrh	r3, [r3, #0]
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80020b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020b8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	461a      	mov	r2, r3
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	441a      	add	r2, r3
 80020ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80020ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80020d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80020d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80020da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020de:	b29b      	uxth	r3, r3
 80020e0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	f040 80ca 	bne.w	8002282 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	695a      	ldr	r2, [r3, #20]
 80020f2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80020f6:	441a      	add	r2, r3
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	69da      	ldr	r2, [r3, #28]
 8002100:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002104:	441a      	add	r2, r3
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	6a1a      	ldr	r2, [r3, #32]
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	429a      	cmp	r2, r3
 8002114:	d30b      	bcc.n	800212e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	6a1a      	ldr	r2, [r3, #32]
 8002122:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002126:	1ad2      	subs	r2, r2, r3
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	621a      	str	r2, [r3, #32]
 800212c:	e017      	b.n	800215e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d108      	bne.n	8002148 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002136:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800213a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002146:	e00a      	b.n	800215e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	2200      	movs	r2, #0
 8002154:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	657b      	str	r3, [r7, #84]	@ 0x54
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	785b      	ldrb	r3, [r3, #1]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d165      	bne.n	8002238 <HAL_PCD_EP_DB_Transmit+0x750>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800217a:	b29b      	uxth	r3, r3
 800217c:	461a      	mov	r2, r3
 800217e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002180:	4413      	add	r3, r2
 8002182:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	011a      	lsls	r2, r3, #4
 800218a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800218c:	4413      	add	r3, r2
 800218e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002192:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002194:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002196:	881b      	ldrh	r3, [r3, #0]
 8002198:	b29b      	uxth	r3, r3
 800219a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800219e:	b29a      	uxth	r2, r3
 80021a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80021a2:	801a      	strh	r2, [r3, #0]
 80021a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80021aa:	d91d      	bls.n	80021e8 <HAL_PCD_EP_DB_Transmit+0x700>
 80021ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021b0:	095b      	lsrs	r3, r3, #5
 80021b2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80021b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021b8:	f003 031f 	and.w	r3, r3, #31
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d102      	bne.n	80021c6 <HAL_PCD_EP_DB_Transmit+0x6de>
 80021c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80021c2:	3b01      	subs	r3, #1
 80021c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80021c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	029b      	lsls	r3, r3, #10
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	4313      	orrs	r3, r2
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80021e4:	801a      	strh	r2, [r3, #0]
 80021e6:	e041      	b.n	800226c <HAL_PCD_EP_DB_Transmit+0x784>
 80021e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10a      	bne.n	8002206 <HAL_PCD_EP_DB_Transmit+0x71e>
 80021f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80021f2:	881b      	ldrh	r3, [r3, #0]
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021fe:	b29a      	uxth	r2, r3
 8002200:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002202:	801a      	strh	r2, [r3, #0]
 8002204:	e032      	b.n	800226c <HAL_PCD_EP_DB_Transmit+0x784>
 8002206:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800220a:	085b      	lsrs	r3, r3, #1
 800220c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800220e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	d002      	beq.n	8002220 <HAL_PCD_EP_DB_Transmit+0x738>
 800221a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800221c:	3301      	adds	r3, #1
 800221e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002220:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002222:	881b      	ldrh	r3, [r3, #0]
 8002224:	b29a      	uxth	r2, r3
 8002226:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002228:	b29b      	uxth	r3, r3
 800222a:	029b      	lsls	r3, r3, #10
 800222c:	b29b      	uxth	r3, r3
 800222e:	4313      	orrs	r3, r2
 8002230:	b29a      	uxth	r2, r3
 8002232:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002234:	801a      	strh	r2, [r3, #0]
 8002236:	e019      	b.n	800226c <HAL_PCD_EP_DB_Transmit+0x784>
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	785b      	ldrb	r3, [r3, #1]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d115      	bne.n	800226c <HAL_PCD_EP_DB_Transmit+0x784>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002248:	b29b      	uxth	r3, r3
 800224a:	461a      	mov	r2, r3
 800224c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800224e:	4413      	add	r3, r2
 8002250:	657b      	str	r3, [r7, #84]	@ 0x54
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	011a      	lsls	r2, r3, #4
 8002258:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800225a:	4413      	add	r3, r2
 800225c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002260:	653b      	str	r3, [r7, #80]	@ 0x50
 8002262:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002266:	b29a      	uxth	r2, r3
 8002268:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800226a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6818      	ldr	r0, [r3, #0]
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	6959      	ldr	r1, [r3, #20]
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	895a      	ldrh	r2, [r3, #10]
 8002278:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800227c:	b29b      	uxth	r3, r3
 800227e:	f002 fb70 	bl	8004962 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	461a      	mov	r2, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4413      	add	r3, r2
 8002290:	881b      	ldrh	r3, [r3, #0]
 8002292:	b29b      	uxth	r3, r3
 8002294:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002298:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800229c:	82bb      	strh	r3, [r7, #20]
 800229e:	8abb      	ldrh	r3, [r7, #20]
 80022a0:	f083 0310 	eor.w	r3, r3, #16
 80022a4:	82bb      	strh	r3, [r7, #20]
 80022a6:	8abb      	ldrh	r3, [r7, #20]
 80022a8:	f083 0320 	eor.w	r3, r3, #32
 80022ac:	82bb      	strh	r3, [r7, #20]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	461a      	mov	r2, r3
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	441a      	add	r2, r3
 80022bc:	8abb      	ldrh	r3, [r7, #20]
 80022be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80022c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80022c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3790      	adds	r7, #144	@ 0x90
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80022dc:	b480      	push	{r7}
 80022de:	b087      	sub	sp, #28
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	607b      	str	r3, [r7, #4]
 80022e6:	460b      	mov	r3, r1
 80022e8:	817b      	strh	r3, [r7, #10]
 80022ea:	4613      	mov	r3, r2
 80022ec:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80022ee:	897b      	ldrh	r3, [r7, #10]
 80022f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00b      	beq.n	8002312 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022fa:	897b      	ldrh	r3, [r7, #10]
 80022fc:	f003 0207 	and.w	r2, r3, #7
 8002300:	4613      	mov	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4413      	add	r3, r2
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	3310      	adds	r3, #16
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	4413      	add	r3, r2
 800230e:	617b      	str	r3, [r7, #20]
 8002310:	e009      	b.n	8002326 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002312:	897a      	ldrh	r2, [r7, #10]
 8002314:	4613      	mov	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4413      	add	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	4413      	add	r3, r2
 8002324:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002326:	893b      	ldrh	r3, [r7, #8]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d107      	bne.n	800233c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	2200      	movs	r2, #0
 8002330:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	b29a      	uxth	r2, r3
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	80da      	strh	r2, [r3, #6]
 800233a:	e00b      	b.n	8002354 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	2201      	movs	r2, #1
 8002340:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	b29a      	uxth	r2, r3
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	0c1b      	lsrs	r3, r3, #16
 800234e:	b29a      	uxth	r2, r3
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	371c      	adds	r7, #28
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr

08002360 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	4638      	mov	r0, r7
 800236a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	bc80      	pop	{r7}
 8002378:	4770      	bx	lr

0800237a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800237a:	b480      	push	{r7}
 800237c:	b085      	sub	sp, #20
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800238a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800238e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	b29a      	uxth	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bc80      	pop	{r7}
 80023a4:	4770      	bx	lr

080023a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b085      	sub	sp, #20
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80023ae:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80023b2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	b29b      	uxth	r3, r3
 80023c0:	43db      	mvns	r3, r3
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	4013      	ands	r3, r2
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3714      	adds	r7, #20
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr

080023da <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80023da:	b480      	push	{r7}
 80023dc:	b083      	sub	sp, #12
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
 80023e2:	460b      	mov	r3, r1
 80023e4:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bc80      	pop	{r7}
 80023f0:	4770      	bx	lr

080023f2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b085      	sub	sp, #20
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	60f8      	str	r0, [r7, #12]
 80023fa:	4638      	mov	r0, r7
 80023fc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2201      	movs	r2, #1
 8002404:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr

0800242c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800242c:	b480      	push	{r7}
 800242e:	b09d      	sub	sp, #116	@ 0x74
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002436:	2300      	movs	r3, #0
 8002438:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	b29b      	uxth	r3, r3
 800244a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800244e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002452:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	78db      	ldrb	r3, [r3, #3]
 800245a:	2b03      	cmp	r3, #3
 800245c:	d81f      	bhi.n	800249e <USB_ActivateEndpoint+0x72>
 800245e:	a201      	add	r2, pc, #4	@ (adr r2, 8002464 <USB_ActivateEndpoint+0x38>)
 8002460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002464:	08002475 	.word	0x08002475
 8002468:	08002491 	.word	0x08002491
 800246c:	080024a7 	.word	0x080024a7
 8002470:	08002483 	.word	0x08002483
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002474:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8002478:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800247c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8002480:	e012      	b.n	80024a8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002482:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8002486:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800248a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800248e:	e00b      	b.n	80024a8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002490:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8002494:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002498:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800249c:	e004      	b.n	80024a8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80024a4:	e000      	b.n	80024a8 <USB_ActivateEndpoint+0x7c>
      break;
 80024a6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	441a      	add	r2, r3
 80024b2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80024b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80024ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80024be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4413      	add	r3, r2
 80024d4:	881b      	ldrh	r3, [r3, #0]
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80024dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	7812      	ldrb	r2, [r2, #0]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	441a      	add	r2, r3
 80024f6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80024fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80024fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002502:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002506:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800250a:	b29b      	uxth	r3, r3
 800250c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	7b1b      	ldrb	r3, [r3, #12]
 8002512:	2b00      	cmp	r3, #0
 8002514:	f040 8178 	bne.w	8002808 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	785b      	ldrb	r3, [r3, #1]
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 8084 	beq.w	800262a <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	61bb      	str	r3, [r7, #24]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800252c:	b29b      	uxth	r3, r3
 800252e:	461a      	mov	r2, r3
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	4413      	add	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	011a      	lsls	r2, r3, #4
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	4413      	add	r3, r2
 8002540:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002544:	617b      	str	r3, [r7, #20]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	88db      	ldrh	r3, [r3, #6]
 800254a:	085b      	lsrs	r3, r3, #1
 800254c:	b29b      	uxth	r3, r3
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	b29a      	uxth	r2, r3
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	4413      	add	r3, r2
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	827b      	strh	r3, [r7, #18]
 8002564:	8a7b      	ldrh	r3, [r7, #18]
 8002566:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800256a:	2b00      	cmp	r3, #0
 800256c:	d01b      	beq.n	80025a6 <USB_ActivateEndpoint+0x17a>
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4413      	add	r3, r2
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	b29b      	uxth	r3, r3
 800257c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002580:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002584:	823b      	strh	r3, [r7, #16]
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	441a      	add	r2, r3
 8002590:	8a3b      	ldrh	r3, [r7, #16]
 8002592:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002596:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800259a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800259e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	78db      	ldrb	r3, [r3, #3]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d020      	beq.n	80025f0 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	881b      	ldrh	r3, [r3, #0]
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80025c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80025c4:	81bb      	strh	r3, [r7, #12]
 80025c6:	89bb      	ldrh	r3, [r7, #12]
 80025c8:	f083 0320 	eor.w	r3, r3, #32
 80025cc:	81bb      	strh	r3, [r7, #12]
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	441a      	add	r2, r3
 80025d8:	89bb      	ldrh	r3, [r7, #12]
 80025da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80025de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80025e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	8013      	strh	r3, [r2, #0]
 80025ee:	e2d5      	b.n	8002b9c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	881b      	ldrh	r3, [r3, #0]
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002602:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002606:	81fb      	strh	r3, [r7, #14]
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	441a      	add	r2, r3
 8002612:	89fb      	ldrh	r3, [r7, #14]
 8002614:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002618:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800261c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002620:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002624:	b29b      	uxth	r3, r3
 8002626:	8013      	strh	r3, [r2, #0]
 8002628:	e2b8      	b.n	8002b9c <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	633b      	str	r3, [r7, #48]	@ 0x30
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002634:	b29b      	uxth	r3, r3
 8002636:	461a      	mov	r2, r3
 8002638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800263a:	4413      	add	r3, r2
 800263c:	633b      	str	r3, [r7, #48]	@ 0x30
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	011a      	lsls	r2, r3, #4
 8002644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002646:	4413      	add	r3, r2
 8002648:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800264c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	88db      	ldrh	r3, [r3, #6]
 8002652:	085b      	lsrs	r3, r3, #1
 8002654:	b29b      	uxth	r3, r3
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	b29a      	uxth	r2, r3
 800265a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800265c:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002668:	b29b      	uxth	r3, r3
 800266a:	461a      	mov	r2, r3
 800266c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800266e:	4413      	add	r3, r2
 8002670:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	011a      	lsls	r2, r3, #4
 8002678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800267a:	4413      	add	r3, r2
 800267c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002680:	627b      	str	r3, [r7, #36]	@ 0x24
 8002682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002684:	881b      	ldrh	r3, [r3, #0]
 8002686:	b29b      	uxth	r3, r3
 8002688:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800268c:	b29a      	uxth	r2, r3
 800268e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002690:	801a      	strh	r2, [r3, #0]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	2b3e      	cmp	r3, #62	@ 0x3e
 8002698:	d91d      	bls.n	80026d6 <USB_ActivateEndpoint+0x2aa>
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	095b      	lsrs	r3, r3, #5
 80026a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	f003 031f 	and.w	r3, r3, #31
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d102      	bne.n	80026b4 <USB_ActivateEndpoint+0x288>
 80026ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026b0:	3b01      	subs	r3, #1
 80026b2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80026b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b6:	881b      	ldrh	r3, [r3, #0]
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026bc:	b29b      	uxth	r3, r3
 80026be:	029b      	lsls	r3, r3, #10
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	4313      	orrs	r3, r2
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d2:	801a      	strh	r2, [r3, #0]
 80026d4:	e026      	b.n	8002724 <USB_ActivateEndpoint+0x2f8>
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10a      	bne.n	80026f4 <USB_ActivateEndpoint+0x2c8>
 80026de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e0:	881b      	ldrh	r3, [r3, #0]
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f0:	801a      	strh	r2, [r3, #0]
 80026f2:	e017      	b.n	8002724 <USB_ActivateEndpoint+0x2f8>
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	085b      	lsrs	r3, r3, #1
 80026fa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	2b00      	cmp	r3, #0
 8002706:	d002      	beq.n	800270e <USB_ActivateEndpoint+0x2e2>
 8002708:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800270a:	3301      	adds	r3, #1
 800270c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800270e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002710:	881b      	ldrh	r3, [r3, #0]
 8002712:	b29a      	uxth	r2, r3
 8002714:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002716:	b29b      	uxth	r3, r3
 8002718:	029b      	lsls	r3, r3, #10
 800271a:	b29b      	uxth	r3, r3
 800271c:	4313      	orrs	r3, r2
 800271e:	b29a      	uxth	r2, r3
 8002720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002722:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	881b      	ldrh	r3, [r3, #0]
 8002730:	847b      	strh	r3, [r7, #34]	@ 0x22
 8002732:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002734:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d01b      	beq.n	8002774 <USB_ActivateEndpoint+0x348>
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
 8002746:	881b      	ldrh	r3, [r3, #0]
 8002748:	b29b      	uxth	r3, r3
 800274a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800274e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002752:	843b      	strh	r3, [r7, #32]
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	441a      	add	r2, r3
 800275e:	8c3b      	ldrh	r3, [r7, #32]
 8002760:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002764:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002768:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800276c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002770:	b29b      	uxth	r3, r3
 8002772:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d124      	bne.n	80027c6 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	881b      	ldrh	r3, [r3, #0]
 8002788:	b29b      	uxth	r3, r3
 800278a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800278e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002792:	83bb      	strh	r3, [r7, #28]
 8002794:	8bbb      	ldrh	r3, [r7, #28]
 8002796:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800279a:	83bb      	strh	r3, [r7, #28]
 800279c:	8bbb      	ldrh	r3, [r7, #28]
 800279e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80027a2:	83bb      	strh	r3, [r7, #28]
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	441a      	add	r2, r3
 80027ae:	8bbb      	ldrh	r3, [r7, #28]
 80027b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80027b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80027b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	8013      	strh	r3, [r2, #0]
 80027c4:	e1ea      	b.n	8002b9c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	4413      	add	r3, r2
 80027d0:	881b      	ldrh	r3, [r3, #0]
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80027d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027dc:	83fb      	strh	r3, [r7, #30]
 80027de:	8bfb      	ldrh	r3, [r7, #30]
 80027e0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80027e4:	83fb      	strh	r3, [r7, #30]
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	441a      	add	r2, r3
 80027f0:	8bfb      	ldrh	r3, [r7, #30]
 80027f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80027f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80027fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002802:	b29b      	uxth	r3, r3
 8002804:	8013      	strh	r3, [r2, #0]
 8002806:	e1c9      	b.n	8002b9c <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	78db      	ldrb	r3, [r3, #3]
 800280c:	2b02      	cmp	r3, #2
 800280e:	d11e      	bne.n	800284e <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	881b      	ldrh	r3, [r3, #0]
 800281c:	b29b      	uxth	r3, r3
 800281e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002822:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002826:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	441a      	add	r2, r3
 8002834:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8002838:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800283c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002840:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8002844:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002848:	b29b      	uxth	r3, r3
 800284a:	8013      	strh	r3, [r2, #0]
 800284c:	e01d      	b.n	800288a <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	881b      	ldrh	r3, [r3, #0]
 800285a:	b29b      	uxth	r3, r3
 800285c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8002860:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002864:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	441a      	add	r2, r3
 8002872:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8002876:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800287a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800287e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002882:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002886:	b29b      	uxth	r3, r3
 8002888:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002894:	b29b      	uxth	r3, r3
 8002896:	461a      	mov	r2, r3
 8002898:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800289a:	4413      	add	r3, r2
 800289c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	011a      	lsls	r2, r3, #4
 80028a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028a6:	4413      	add	r3, r2
 80028a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80028ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	891b      	ldrh	r3, [r3, #8]
 80028b2:	085b      	lsrs	r3, r3, #1
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028bc:	801a      	strh	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	657b      	str	r3, [r7, #84]	@ 0x54
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	461a      	mov	r2, r3
 80028cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028ce:	4413      	add	r3, r2
 80028d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	011a      	lsls	r2, r3, #4
 80028d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028da:	4413      	add	r3, r2
 80028dc:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80028e0:	653b      	str	r3, [r7, #80]	@ 0x50
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	895b      	ldrh	r3, [r3, #10]
 80028e6:	085b      	lsrs	r3, r3, #1
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028f0:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	785b      	ldrb	r3, [r3, #1]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f040 8093 	bne.w	8002a22 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4413      	add	r3, r2
 8002906:	881b      	ldrh	r3, [r3, #0]
 8002908:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800290c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002910:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d01b      	beq.n	8002950 <USB_ActivateEndpoint+0x524>
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4413      	add	r3, r2
 8002922:	881b      	ldrh	r3, [r3, #0]
 8002924:	b29b      	uxth	r3, r3
 8002926:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800292a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800292e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	441a      	add	r2, r3
 800293a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800293c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002940:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002944:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002948:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800294c:	b29b      	uxth	r3, r3
 800294e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4413      	add	r3, r2
 800295a:	881b      	ldrh	r3, [r3, #0]
 800295c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800295e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002964:	2b00      	cmp	r3, #0
 8002966:	d01b      	beq.n	80029a0 <USB_ActivateEndpoint+0x574>
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	881b      	ldrh	r3, [r3, #0]
 8002974:	b29b      	uxth	r3, r3
 8002976:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800297a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800297e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	441a      	add	r2, r3
 800298a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800298c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002990:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002994:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002998:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800299c:	b29b      	uxth	r3, r3
 800299e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	881b      	ldrh	r3, [r3, #0]
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80029b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029b6:	873b      	strh	r3, [r7, #56]	@ 0x38
 80029b8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80029ba:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80029be:	873b      	strh	r3, [r7, #56]	@ 0x38
 80029c0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80029c2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80029c6:	873b      	strh	r3, [r7, #56]	@ 0x38
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	441a      	add	r2, r3
 80029d2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80029d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80029d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80029dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	881b      	ldrh	r3, [r3, #0]
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80029fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80029fe:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	441a      	add	r2, r3
 8002a0a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002a0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	8013      	strh	r3, [r2, #0]
 8002a20:	e0bc      	b.n	8002b9c <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4413      	add	r3, r2
 8002a2c:	881b      	ldrh	r3, [r3, #0]
 8002a2e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002a32:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002a36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d01d      	beq.n	8002a7a <USB_ActivateEndpoint+0x64e>
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	4413      	add	r3, r2
 8002a48:	881b      	ldrh	r3, [r3, #0]
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a54:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	441a      	add	r2, r3
 8002a62:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002a66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a6e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	881b      	ldrh	r3, [r3, #0]
 8002a86:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8002a8a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d01d      	beq.n	8002ad2 <USB_ActivateEndpoint+0x6a6>
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4413      	add	r3, r2
 8002aa0:	881b      	ldrh	r3, [r3, #0]
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002aa8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002aac:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	441a      	add	r2, r3
 8002aba:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8002abe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002ac2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002ac6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002aca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	78db      	ldrb	r3, [r3, #3]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d024      	beq.n	8002b24 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	881b      	ldrh	r3, [r3, #0]
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002aec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002af0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8002af4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8002af8:	f083 0320 	eor.w	r3, r3, #32
 8002afc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	441a      	add	r2, r3
 8002b0a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8002b0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002b12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002b16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	8013      	strh	r3, [r2, #0]
 8002b22:	e01d      	b.n	8002b60 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	881b      	ldrh	r3, [r3, #0]
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b3a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	441a      	add	r2, r3
 8002b48:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002b4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002b50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002b54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	4413      	add	r3, r2
 8002b6a:	881b      	ldrh	r3, [r3, #0]
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002b72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b76:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	441a      	add	r2, r3
 8002b84:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002b88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002b8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002b90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8002b9c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3774      	adds	r7, #116	@ 0x74
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bc80      	pop	{r7}
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop

08002bac <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b08d      	sub	sp, #52	@ 0x34
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	7b1b      	ldrb	r3, [r3, #12]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f040 808e 	bne.w	8002cdc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	785b      	ldrb	r3, [r3, #1]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d044      	beq.n	8002c52 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4413      	add	r3, r2
 8002bd2:	881b      	ldrh	r3, [r3, #0]
 8002bd4:	81bb      	strh	r3, [r7, #12]
 8002bd6:	89bb      	ldrh	r3, [r7, #12]
 8002bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d01b      	beq.n	8002c18 <USB_DeactivateEndpoint+0x6c>
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	881b      	ldrh	r3, [r3, #0]
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002bf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bf6:	817b      	strh	r3, [r7, #10]
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	441a      	add	r2, r3
 8002c02:	897b      	ldrh	r3, [r7, #10]
 8002c04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002c08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002c0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c10:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4413      	add	r3, r2
 8002c22:	881b      	ldrh	r3, [r3, #0]
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c2e:	813b      	strh	r3, [r7, #8]
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	441a      	add	r2, r3
 8002c3a:	893b      	ldrh	r3, [r7, #8]
 8002c3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002c40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002c44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	8013      	strh	r3, [r2, #0]
 8002c50:	e192      	b.n	8002f78 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4413      	add	r3, r2
 8002c5c:	881b      	ldrh	r3, [r3, #0]
 8002c5e:	827b      	strh	r3, [r7, #18]
 8002c60:	8a7b      	ldrh	r3, [r7, #18]
 8002c62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d01b      	beq.n	8002ca2 <USB_DeactivateEndpoint+0xf6>
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	881b      	ldrh	r3, [r3, #0]
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c80:	823b      	strh	r3, [r7, #16]
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	441a      	add	r2, r3
 8002c8c:	8a3b      	ldrh	r3, [r7, #16]
 8002c8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002c92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002c96:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4413      	add	r3, r2
 8002cac:	881b      	ldrh	r3, [r3, #0]
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002cb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cb8:	81fb      	strh	r3, [r7, #14]
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	441a      	add	r2, r3
 8002cc4:	89fb      	ldrh	r3, [r7, #14]
 8002cc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002cca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002cce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002cd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	8013      	strh	r3, [r2, #0]
 8002cda:	e14d      	b.n	8002f78 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	785b      	ldrb	r3, [r3, #1]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f040 80a5 	bne.w	8002e30 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4413      	add	r3, r2
 8002cf0:	881b      	ldrh	r3, [r3, #0]
 8002cf2:	843b      	strh	r3, [r7, #32]
 8002cf4:	8c3b      	ldrh	r3, [r7, #32]
 8002cf6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d01b      	beq.n	8002d36 <USB_DeactivateEndpoint+0x18a>
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4413      	add	r3, r2
 8002d08:	881b      	ldrh	r3, [r3, #0]
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d14:	83fb      	strh	r3, [r7, #30]
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	441a      	add	r2, r3
 8002d20:	8bfb      	ldrh	r3, [r7, #30]
 8002d22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002d26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002d2a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4413      	add	r3, r2
 8002d40:	881b      	ldrh	r3, [r3, #0]
 8002d42:	83bb      	strh	r3, [r7, #28]
 8002d44:	8bbb      	ldrh	r3, [r7, #28]
 8002d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d01b      	beq.n	8002d86 <USB_DeactivateEndpoint+0x1da>
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	881b      	ldrh	r3, [r3, #0]
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d64:	837b      	strh	r3, [r7, #26]
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	441a      	add	r2, r3
 8002d70:	8b7b      	ldrh	r3, [r7, #26]
 8002d72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002d76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002d7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d7e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4413      	add	r3, r2
 8002d90:	881b      	ldrh	r3, [r3, #0]
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d9c:	833b      	strh	r3, [r7, #24]
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	441a      	add	r2, r3
 8002da8:	8b3b      	ldrh	r3, [r7, #24]
 8002daa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002dae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002db2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002db6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4413      	add	r3, r2
 8002dc8:	881b      	ldrh	r3, [r3, #0]
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002dd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dd4:	82fb      	strh	r3, [r7, #22]
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	441a      	add	r2, r3
 8002de0:	8afb      	ldrh	r3, [r7, #22]
 8002de2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002de6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002dea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002dee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	881b      	ldrh	r3, [r3, #0]
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e0c:	82bb      	strh	r3, [r7, #20]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	441a      	add	r2, r3
 8002e18:	8abb      	ldrh	r3, [r7, #20]
 8002e1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	8013      	strh	r3, [r2, #0]
 8002e2e:	e0a3      	b.n	8002f78 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	881b      	ldrh	r3, [r3, #0]
 8002e3c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8002e3e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002e40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d01b      	beq.n	8002e80 <USB_DeactivateEndpoint+0x2d4>
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4413      	add	r3, r2
 8002e52:	881b      	ldrh	r3, [r3, #0]
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e5e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	441a      	add	r2, r3
 8002e6a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002e6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e74:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	881b      	ldrh	r3, [r3, #0]
 8002e8c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8002e8e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002e90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d01b      	beq.n	8002ed0 <USB_DeactivateEndpoint+0x324>
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4413      	add	r3, r2
 8002ea2:	881b      	ldrh	r3, [r3, #0]
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002eaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002eae:	853b      	strh	r3, [r7, #40]	@ 0x28
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	441a      	add	r2, r3
 8002eba:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002ebc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002ec0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002ec4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ec8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	4413      	add	r3, r2
 8002eda:	881b      	ldrh	r3, [r3, #0]
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002ee2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ee6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	441a      	add	r2, r3
 8002ef2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002ef4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002ef8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002efc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4413      	add	r3, r2
 8002f12:	881b      	ldrh	r3, [r3, #0]
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f1e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	441a      	add	r2, r3
 8002f2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002f2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	881b      	ldrh	r3, [r3, #0]
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f56:	847b      	strh	r3, [r7, #34]	@ 0x22
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	441a      	add	r2, r3
 8002f62:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002f64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3734      	adds	r7, #52	@ 0x34
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bc80      	pop	{r7}
 8002f82:	4770      	bx	lr

08002f84 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b0c2      	sub	sp, #264	@ 0x108
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002f8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002f92:	6018      	str	r0, [r3, #0]
 8002f94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002f98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002f9c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8002f9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002fa2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	785b      	ldrb	r3, [r3, #1]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	f040 86b7 	bne.w	8003d1e <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8002fb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002fb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	699a      	ldr	r2, [r3, #24]
 8002fbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002fc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d908      	bls.n	8002fde <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8002fcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002fd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002fdc:	e007      	b.n	8002fee <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8002fde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002fe2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8002fee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002ff2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	7b1b      	ldrb	r3, [r3, #12]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d13a      	bne.n	8003074 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002ffe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003002:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6959      	ldr	r1, [r3, #20]
 800300a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800300e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	88da      	ldrh	r2, [r3, #6]
 8003016:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800301a:	b29b      	uxth	r3, r3
 800301c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8003020:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8003024:	6800      	ldr	r0, [r0, #0]
 8003026:	f001 fc9c 	bl	8004962 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800302a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800302e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	613b      	str	r3, [r7, #16]
 8003036:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800303a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003044:	b29b      	uxth	r3, r3
 8003046:	461a      	mov	r2, r3
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	4413      	add	r3, r2
 800304c:	613b      	str	r3, [r7, #16]
 800304e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003052:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	011a      	lsls	r2, r3, #4
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	4413      	add	r3, r2
 8003060:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003064:	60fb      	str	r3, [r7, #12]
 8003066:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800306a:	b29a      	uxth	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	801a      	strh	r2, [r3, #0]
 8003070:	f000 be1f 	b.w	8003cb2 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003074:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003078:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	78db      	ldrb	r3, [r3, #3]
 8003080:	2b02      	cmp	r3, #2
 8003082:	f040 8462 	bne.w	800394a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003086:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800308a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6a1a      	ldr	r2, [r3, #32]
 8003092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003096:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	429a      	cmp	r2, r3
 80030a0:	f240 83df 	bls.w	8003862 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80030a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80030a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80030b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	881b      	ldrh	r3, [r3, #0]
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80030c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030ca:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80030ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80030d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80030dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	441a      	add	r2, r3
 80030e8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80030ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80030f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80030f4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80030f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003100:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003104:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	6a1a      	ldr	r2, [r3, #32]
 800310c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003110:	1ad2      	subs	r2, r2, r3
 8003112:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003116:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800311e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003122:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800312c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	881b      	ldrh	r3, [r3, #0]
 800313a:	b29b      	uxth	r3, r3
 800313c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 81c7 	beq.w	80034d4 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003146:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800314a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	633b      	str	r3, [r7, #48]	@ 0x30
 8003152:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003156:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	785b      	ldrb	r3, [r3, #1]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d177      	bne.n	8003252 <USB_EPStartXfer+0x2ce>
 8003162:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003166:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800316e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003172:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800317c:	b29b      	uxth	r3, r3
 800317e:	461a      	mov	r2, r3
 8003180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003182:	4413      	add	r3, r2
 8003184:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003186:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800318a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	011a      	lsls	r2, r3, #4
 8003194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003196:	4413      	add	r3, r2
 8003198:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800319c:	627b      	str	r3, [r7, #36]	@ 0x24
 800319e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a0:	881b      	ldrh	r3, [r3, #0]
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ac:	801a      	strh	r2, [r3, #0]
 80031ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031b2:	2b3e      	cmp	r3, #62	@ 0x3e
 80031b4:	d921      	bls.n	80031fa <USB_EPStartXfer+0x276>
 80031b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031ba:	095b      	lsrs	r3, r3, #5
 80031bc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80031c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031c4:	f003 031f 	and.w	r3, r3, #31
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d104      	bne.n	80031d6 <USB_EPStartXfer+0x252>
 80031cc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80031d0:	3b01      	subs	r3, #1
 80031d2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80031d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d8:	881b      	ldrh	r3, [r3, #0]
 80031da:	b29a      	uxth	r2, r3
 80031dc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	029b      	lsls	r3, r3, #10
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	4313      	orrs	r3, r2
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f6:	801a      	strh	r2, [r3, #0]
 80031f8:	e050      	b.n	800329c <USB_EPStartXfer+0x318>
 80031fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10a      	bne.n	8003218 <USB_EPStartXfer+0x294>
 8003202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003204:	881b      	ldrh	r3, [r3, #0]
 8003206:	b29b      	uxth	r3, r3
 8003208:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800320c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003210:	b29a      	uxth	r2, r3
 8003212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003214:	801a      	strh	r2, [r3, #0]
 8003216:	e041      	b.n	800329c <USB_EPStartXfer+0x318>
 8003218:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800321c:	085b      	lsrs	r3, r3, #1
 800321e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003222:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d004      	beq.n	8003238 <USB_EPStartXfer+0x2b4>
 800322e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8003232:	3301      	adds	r3, #1
 8003234:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800323a:	881b      	ldrh	r3, [r3, #0]
 800323c:	b29a      	uxth	r2, r3
 800323e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8003242:	b29b      	uxth	r3, r3
 8003244:	029b      	lsls	r3, r3, #10
 8003246:	b29b      	uxth	r3, r3
 8003248:	4313      	orrs	r3, r2
 800324a:	b29a      	uxth	r2, r3
 800324c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324e:	801a      	strh	r2, [r3, #0]
 8003250:	e024      	b.n	800329c <USB_EPStartXfer+0x318>
 8003252:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003256:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	785b      	ldrb	r3, [r3, #1]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d11c      	bne.n	800329c <USB_EPStartXfer+0x318>
 8003262:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003266:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003270:	b29b      	uxth	r3, r3
 8003272:	461a      	mov	r2, r3
 8003274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003276:	4413      	add	r3, r2
 8003278:	633b      	str	r3, [r7, #48]	@ 0x30
 800327a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800327e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	011a      	lsls	r2, r3, #4
 8003288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800328a:	4413      	add	r3, r2
 800328c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003290:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003292:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003296:	b29a      	uxth	r2, r3
 8003298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800329a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800329c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80032a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	895b      	ldrh	r3, [r3, #10]
 80032a8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80032ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80032b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6959      	ldr	r1, [r3, #20]
 80032b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032bc:	b29b      	uxth	r3, r3
 80032be:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80032c2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80032c6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80032ca:	6800      	ldr	r0, [r0, #0]
 80032cc:	f001 fb49 	bl	8004962 <USB_WritePMA>
            ep->xfer_buff += len;
 80032d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80032d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	695a      	ldr	r2, [r3, #20]
 80032dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032e0:	441a      	add	r2, r3
 80032e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80032e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80032ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80032f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6a1a      	ldr	r2, [r3, #32]
 80032fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80032fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	429a      	cmp	r2, r3
 8003308:	d90f      	bls.n	800332a <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800330a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800330e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6a1a      	ldr	r2, [r3, #32]
 8003316:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800331a:	1ad2      	subs	r2, r2, r3
 800331c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003320:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	621a      	str	r2, [r3, #32]
 8003328:	e00e      	b.n	8003348 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800332a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800332e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800333a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800333e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2200      	movs	r2, #0
 8003346:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003348:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800334c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	785b      	ldrb	r3, [r3, #1]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d177      	bne.n	8003448 <USB_EPStartXfer+0x4c4>
 8003358:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800335c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	61bb      	str	r3, [r7, #24]
 8003364:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003368:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003372:	b29b      	uxth	r3, r3
 8003374:	461a      	mov	r2, r3
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	4413      	add	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
 800337c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003380:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	011a      	lsls	r2, r3, #4
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	4413      	add	r3, r2
 800338e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003392:	617b      	str	r3, [r7, #20]
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	881b      	ldrh	r3, [r3, #0]
 8003398:	b29b      	uxth	r3, r3
 800339a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800339e:	b29a      	uxth	r2, r3
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	801a      	strh	r2, [r3, #0]
 80033a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80033aa:	d921      	bls.n	80033f0 <USB_EPStartXfer+0x46c>
 80033ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033b0:	095b      	lsrs	r3, r3, #5
 80033b2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80033b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033ba:	f003 031f 	and.w	r3, r3, #31
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d104      	bne.n	80033cc <USB_EPStartXfer+0x448>
 80033c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033c6:	3b01      	subs	r3, #1
 80033c8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	881b      	ldrh	r3, [r3, #0]
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	029b      	lsls	r3, r3, #10
 80033da:	b29b      	uxth	r3, r3
 80033dc:	4313      	orrs	r3, r2
 80033de:	b29b      	uxth	r3, r3
 80033e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	801a      	strh	r2, [r3, #0]
 80033ee:	e056      	b.n	800349e <USB_EPStartXfer+0x51a>
 80033f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d10a      	bne.n	800340e <USB_EPStartXfer+0x48a>
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	881b      	ldrh	r3, [r3, #0]
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003402:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003406:	b29a      	uxth	r2, r3
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	801a      	strh	r2, [r3, #0]
 800340c:	e047      	b.n	800349e <USB_EPStartXfer+0x51a>
 800340e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003412:	085b      	lsrs	r3, r3, #1
 8003414:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003418:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	2b00      	cmp	r3, #0
 8003422:	d004      	beq.n	800342e <USB_EPStartXfer+0x4aa>
 8003424:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003428:	3301      	adds	r3, #1
 800342a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	881b      	ldrh	r3, [r3, #0]
 8003432:	b29a      	uxth	r2, r3
 8003434:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003438:	b29b      	uxth	r3, r3
 800343a:	029b      	lsls	r3, r3, #10
 800343c:	b29b      	uxth	r3, r3
 800343e:	4313      	orrs	r3, r2
 8003440:	b29a      	uxth	r2, r3
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	801a      	strh	r2, [r3, #0]
 8003446:	e02a      	b.n	800349e <USB_EPStartXfer+0x51a>
 8003448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800344c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	785b      	ldrb	r3, [r3, #1]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d122      	bne.n	800349e <USB_EPStartXfer+0x51a>
 8003458:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800345c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	623b      	str	r3, [r7, #32]
 8003464:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003468:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003472:	b29b      	uxth	r3, r3
 8003474:	461a      	mov	r2, r3
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	4413      	add	r3, r2
 800347a:	623b      	str	r3, [r7, #32]
 800347c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003480:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	011a      	lsls	r2, r3, #4
 800348a:	6a3b      	ldr	r3, [r7, #32]
 800348c:	4413      	add	r3, r2
 800348e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003492:	61fb      	str	r3, [r7, #28]
 8003494:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003498:	b29a      	uxth	r2, r3
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800349e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80034a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	891b      	ldrh	r3, [r3, #8]
 80034aa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80034ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80034b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6959      	ldr	r1, [r3, #20]
 80034ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034be:	b29b      	uxth	r3, r3
 80034c0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80034c4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80034c8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80034cc:	6800      	ldr	r0, [r0, #0]
 80034ce:	f001 fa48 	bl	8004962 <USB_WritePMA>
 80034d2:	e3ee      	b.n	8003cb2 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80034d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80034d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	785b      	ldrb	r3, [r3, #1]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d177      	bne.n	80035d4 <USB_EPStartXfer+0x650>
 80034e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80034e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80034f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034fe:	b29b      	uxth	r3, r3
 8003500:	461a      	mov	r2, r3
 8003502:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003504:	4413      	add	r3, r2
 8003506:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003508:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800350c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	011a      	lsls	r2, r3, #4
 8003516:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003518:	4413      	add	r3, r2
 800351a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800351e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003520:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003522:	881b      	ldrh	r3, [r3, #0]
 8003524:	b29b      	uxth	r3, r3
 8003526:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800352a:	b29a      	uxth	r2, r3
 800352c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800352e:	801a      	strh	r2, [r3, #0]
 8003530:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003534:	2b3e      	cmp	r3, #62	@ 0x3e
 8003536:	d921      	bls.n	800357c <USB_EPStartXfer+0x5f8>
 8003538:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800353c:	095b      	lsrs	r3, r3, #5
 800353e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003542:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003546:	f003 031f 	and.w	r3, r3, #31
 800354a:	2b00      	cmp	r3, #0
 800354c:	d104      	bne.n	8003558 <USB_EPStartXfer+0x5d4>
 800354e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003552:	3b01      	subs	r3, #1
 8003554:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003558:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800355a:	881b      	ldrh	r3, [r3, #0]
 800355c:	b29a      	uxth	r2, r3
 800355e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003562:	b29b      	uxth	r3, r3
 8003564:	029b      	lsls	r3, r3, #10
 8003566:	b29b      	uxth	r3, r3
 8003568:	4313      	orrs	r3, r2
 800356a:	b29b      	uxth	r3, r3
 800356c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003570:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003574:	b29a      	uxth	r2, r3
 8003576:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003578:	801a      	strh	r2, [r3, #0]
 800357a:	e056      	b.n	800362a <USB_EPStartXfer+0x6a6>
 800357c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003580:	2b00      	cmp	r3, #0
 8003582:	d10a      	bne.n	800359a <USB_EPStartXfer+0x616>
 8003584:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003586:	881b      	ldrh	r3, [r3, #0]
 8003588:	b29b      	uxth	r3, r3
 800358a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800358e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003592:	b29a      	uxth	r2, r3
 8003594:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003596:	801a      	strh	r2, [r3, #0]
 8003598:	e047      	b.n	800362a <USB_EPStartXfer+0x6a6>
 800359a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800359e:	085b      	lsrs	r3, r3, #1
 80035a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80035a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d004      	beq.n	80035ba <USB_EPStartXfer+0x636>
 80035b0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80035b4:	3301      	adds	r3, #1
 80035b6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80035ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035bc:	881b      	ldrh	r3, [r3, #0]
 80035be:	b29a      	uxth	r2, r3
 80035c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	029b      	lsls	r3, r3, #10
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	4313      	orrs	r3, r2
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035d0:	801a      	strh	r2, [r3, #0]
 80035d2:	e02a      	b.n	800362a <USB_EPStartXfer+0x6a6>
 80035d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80035d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	785b      	ldrb	r3, [r3, #1]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d122      	bne.n	800362a <USB_EPStartXfer+0x6a6>
 80035e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80035e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80035f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80035f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035fe:	b29b      	uxth	r3, r3
 8003600:	461a      	mov	r2, r3
 8003602:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003604:	4413      	add	r3, r2
 8003606:	653b      	str	r3, [r7, #80]	@ 0x50
 8003608:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800360c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	011a      	lsls	r2, r3, #4
 8003616:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003618:	4413      	add	r3, r2
 800361a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800361e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003620:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003624:	b29a      	uxth	r2, r3
 8003626:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003628:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800362a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800362e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	891b      	ldrh	r3, [r3, #8]
 8003636:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800363a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800363e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6959      	ldr	r1, [r3, #20]
 8003646:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800364a:	b29b      	uxth	r3, r3
 800364c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8003650:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8003654:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8003658:	6800      	ldr	r0, [r0, #0]
 800365a:	f001 f982 	bl	8004962 <USB_WritePMA>
            ep->xfer_buff += len;
 800365e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003662:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	695a      	ldr	r2, [r3, #20]
 800366a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800366e:	441a      	add	r2, r3
 8003670:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003674:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800367c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003680:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	6a1a      	ldr	r2, [r3, #32]
 8003688:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800368c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	429a      	cmp	r2, r3
 8003696:	d90f      	bls.n	80036b8 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8003698:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800369c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	6a1a      	ldr	r2, [r3, #32]
 80036a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036a8:	1ad2      	subs	r2, r2, r3
 80036aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80036ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	621a      	str	r2, [r3, #32]
 80036b6:	e00e      	b.n	80036d6 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80036b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80036bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80036c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80036cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2200      	movs	r2, #0
 80036d4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80036d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80036da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80036e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80036e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	785b      	ldrb	r3, [r3, #1]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d177      	bne.n	80037e2 <USB_EPStartXfer+0x85e>
 80036f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80036f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80036fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003702:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800370c:	b29b      	uxth	r3, r3
 800370e:	461a      	mov	r2, r3
 8003710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003712:	4413      	add	r3, r2
 8003714:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003716:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800371a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	011a      	lsls	r2, r3, #4
 8003724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003726:	4413      	add	r3, r2
 8003728:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800372c:	637b      	str	r3, [r7, #52]	@ 0x34
 800372e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	b29b      	uxth	r3, r3
 8003734:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003738:	b29a      	uxth	r2, r3
 800373a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800373c:	801a      	strh	r2, [r3, #0]
 800373e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003742:	2b3e      	cmp	r3, #62	@ 0x3e
 8003744:	d921      	bls.n	800378a <USB_EPStartXfer+0x806>
 8003746:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800374a:	095b      	lsrs	r3, r3, #5
 800374c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003750:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003754:	f003 031f 	and.w	r3, r3, #31
 8003758:	2b00      	cmp	r3, #0
 800375a:	d104      	bne.n	8003766 <USB_EPStartXfer+0x7e2>
 800375c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003760:	3b01      	subs	r3, #1
 8003762:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003768:	881b      	ldrh	r3, [r3, #0]
 800376a:	b29a      	uxth	r2, r3
 800376c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003770:	b29b      	uxth	r3, r3
 8003772:	029b      	lsls	r3, r3, #10
 8003774:	b29b      	uxth	r3, r3
 8003776:	4313      	orrs	r3, r2
 8003778:	b29b      	uxth	r3, r3
 800377a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800377e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003782:	b29a      	uxth	r2, r3
 8003784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003786:	801a      	strh	r2, [r3, #0]
 8003788:	e050      	b.n	800382c <USB_EPStartXfer+0x8a8>
 800378a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10a      	bne.n	80037a8 <USB_EPStartXfer+0x824>
 8003792:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003794:	881b      	ldrh	r3, [r3, #0]
 8003796:	b29b      	uxth	r3, r3
 8003798:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800379c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037a4:	801a      	strh	r2, [r3, #0]
 80037a6:	e041      	b.n	800382c <USB_EPStartXfer+0x8a8>
 80037a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037ac:	085b      	lsrs	r3, r3, #1
 80037ae:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80037b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d004      	beq.n	80037c8 <USB_EPStartXfer+0x844>
 80037be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037c2:	3301      	adds	r3, #1
 80037c4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80037c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037ca:	881b      	ldrh	r3, [r3, #0]
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	029b      	lsls	r3, r3, #10
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	4313      	orrs	r3, r2
 80037da:	b29a      	uxth	r2, r3
 80037dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037de:	801a      	strh	r2, [r3, #0]
 80037e0:	e024      	b.n	800382c <USB_EPStartXfer+0x8a8>
 80037e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80037e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	785b      	ldrb	r3, [r3, #1]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d11c      	bne.n	800382c <USB_EPStartXfer+0x8a8>
 80037f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80037f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003800:	b29b      	uxth	r3, r3
 8003802:	461a      	mov	r2, r3
 8003804:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003806:	4413      	add	r3, r2
 8003808:	643b      	str	r3, [r7, #64]	@ 0x40
 800380a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800380e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	011a      	lsls	r2, r3, #4
 8003818:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800381a:	4413      	add	r3, r2
 800381c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003820:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003822:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003826:	b29a      	uxth	r2, r3
 8003828:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800382a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800382c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003830:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	895b      	ldrh	r3, [r3, #10]
 8003838:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800383c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003840:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6959      	ldr	r1, [r3, #20]
 8003848:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800384c:	b29b      	uxth	r3, r3
 800384e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8003852:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8003856:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800385a:	6800      	ldr	r0, [r0, #0]
 800385c:	f001 f881 	bl	8004962 <USB_WritePMA>
 8003860:	e227      	b.n	8003cb2 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8003862:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003866:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8003872:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003876:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003880:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	4413      	add	r3, r2
 800388c:	881b      	ldrh	r3, [r3, #0]
 800388e:	b29b      	uxth	r3, r3
 8003890:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8003894:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003898:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800389c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80038a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80038aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	441a      	add	r2, r3
 80038b6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80038ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80038be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80038c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80038ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80038d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80038da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80038de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	461a      	mov	r2, r3
 80038ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038ee:	4413      	add	r3, r2
 80038f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80038f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80038f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	011a      	lsls	r2, r3, #4
 8003900:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003902:	4413      	add	r3, r2
 8003904:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003908:	65bb      	str	r3, [r7, #88]	@ 0x58
 800390a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800390e:	b29a      	uxth	r2, r3
 8003910:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003912:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003914:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003918:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	891b      	ldrh	r3, [r3, #8]
 8003920:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003924:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003928:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	6959      	ldr	r1, [r3, #20]
 8003930:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003934:	b29b      	uxth	r3, r3
 8003936:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800393a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800393e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8003942:	6800      	ldr	r0, [r0, #0]
 8003944:	f001 f80d 	bl	8004962 <USB_WritePMA>
 8003948:	e1b3      	b.n	8003cb2 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800394a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800394e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6a1a      	ldr	r2, [r3, #32]
 8003956:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800395a:	1ad2      	subs	r2, r2, r3
 800395c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003960:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800396c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003976:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4413      	add	r3, r2
 8003982:	881b      	ldrh	r3, [r3, #0]
 8003984:	b29b      	uxth	r3, r3
 8003986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800398a:	2b00      	cmp	r3, #0
 800398c:	f000 80c6 	beq.w	8003b1c <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003990:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003994:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	673b      	str	r3, [r7, #112]	@ 0x70
 800399c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80039a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	785b      	ldrb	r3, [r3, #1]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d177      	bne.n	8003a9c <USB_EPStartXfer+0xb18>
 80039ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80039b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80039b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80039bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	461a      	mov	r2, r3
 80039ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80039cc:	4413      	add	r3, r2
 80039ce:	66bb      	str	r3, [r7, #104]	@ 0x68
 80039d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80039d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	011a      	lsls	r2, r3, #4
 80039de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80039e0:	4413      	add	r3, r2
 80039e2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80039e6:	667b      	str	r3, [r7, #100]	@ 0x64
 80039e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80039ea:	881b      	ldrh	r3, [r3, #0]
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80039f6:	801a      	strh	r2, [r3, #0]
 80039f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039fc:	2b3e      	cmp	r3, #62	@ 0x3e
 80039fe:	d921      	bls.n	8003a44 <USB_EPStartXfer+0xac0>
 8003a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a04:	095b      	lsrs	r3, r3, #5
 8003a06:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003a0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a0e:	f003 031f 	and.w	r3, r3, #31
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d104      	bne.n	8003a20 <USB_EPStartXfer+0xa9c>
 8003a16:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003a20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a22:	881b      	ldrh	r3, [r3, #0]
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	029b      	lsls	r3, r3, #10
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	4313      	orrs	r3, r2
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a40:	801a      	strh	r2, [r3, #0]
 8003a42:	e050      	b.n	8003ae6 <USB_EPStartXfer+0xb62>
 8003a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d10a      	bne.n	8003a62 <USB_EPStartXfer+0xade>
 8003a4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a4e:	881b      	ldrh	r3, [r3, #0]
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a5e:	801a      	strh	r2, [r3, #0]
 8003a60:	e041      	b.n	8003ae6 <USB_EPStartXfer+0xb62>
 8003a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a66:	085b      	lsrs	r3, r3, #1
 8003a68:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d004      	beq.n	8003a82 <USB_EPStartXfer+0xafe>
 8003a78:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003a82:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a84:	881b      	ldrh	r3, [r3, #0]
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	029b      	lsls	r3, r3, #10
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	4313      	orrs	r3, r2
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a98:	801a      	strh	r2, [r3, #0]
 8003a9a:	e024      	b.n	8003ae6 <USB_EPStartXfer+0xb62>
 8003a9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003aa0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	785b      	ldrb	r3, [r3, #1]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d11c      	bne.n	8003ae6 <USB_EPStartXfer+0xb62>
 8003aac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ab0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	461a      	mov	r2, r3
 8003abe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ac0:	4413      	add	r3, r2
 8003ac2:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ac4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ac8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	011a      	lsls	r2, r3, #4
 8003ad2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003ada:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ae4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8003ae6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003aea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	895b      	ldrh	r3, [r3, #10]
 8003af2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003af6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003afa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6959      	ldr	r1, [r3, #20]
 8003b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8003b0c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8003b10:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8003b14:	6800      	ldr	r0, [r0, #0]
 8003b16:	f000 ff24 	bl	8004962 <USB_WritePMA>
 8003b1a:	e0ca      	b.n	8003cb2 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003b1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003b20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	785b      	ldrb	r3, [r3, #1]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d177      	bne.n	8003c1c <USB_EPStartXfer+0xc98>
 8003b2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003b30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003b38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003b3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	461a      	mov	r2, r3
 8003b4a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b4c:	4413      	add	r3, r2
 8003b4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003b50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003b54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	011a      	lsls	r2, r3, #4
 8003b5e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b60:	4413      	add	r3, r2
 8003b62:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003b66:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b6a:	881b      	ldrh	r3, [r3, #0]
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b76:	801a      	strh	r2, [r3, #0]
 8003b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b7c:	2b3e      	cmp	r3, #62	@ 0x3e
 8003b7e:	d921      	bls.n	8003bc4 <USB_EPStartXfer+0xc40>
 8003b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b84:	095b      	lsrs	r3, r3, #5
 8003b86:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b8e:	f003 031f 	and.w	r3, r3, #31
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d104      	bne.n	8003ba0 <USB_EPStartXfer+0xc1c>
 8003b96:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003ba0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ba2:	881b      	ldrh	r3, [r3, #0]
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	029b      	lsls	r3, r3, #10
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003bc0:	801a      	strh	r2, [r3, #0]
 8003bc2:	e05c      	b.n	8003c7e <USB_EPStartXfer+0xcfa>
 8003bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d10a      	bne.n	8003be2 <USB_EPStartXfer+0xc5e>
 8003bcc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003bce:	881b      	ldrh	r3, [r3, #0]
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003bde:	801a      	strh	r2, [r3, #0]
 8003be0:	e04d      	b.n	8003c7e <USB_EPStartXfer+0xcfa>
 8003be2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003be6:	085b      	lsrs	r3, r3, #1
 8003be8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d004      	beq.n	8003c02 <USB_EPStartXfer+0xc7e>
 8003bf8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003c02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c04:	881b      	ldrh	r3, [r3, #0]
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	029b      	lsls	r3, r3, #10
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	4313      	orrs	r3, r2
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c18:	801a      	strh	r2, [r3, #0]
 8003c1a:	e030      	b.n	8003c7e <USB_EPStartXfer+0xcfa>
 8003c1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	785b      	ldrb	r3, [r3, #1]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d128      	bne.n	8003c7e <USB_EPStartXfer+0xcfa>
 8003c2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003c3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003c50:	4413      	add	r3, r2
 8003c52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003c56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	011a      	lsls	r2, r3, #4
 8003c64:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003c68:	4413      	add	r3, r2
 8003c6a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003c6e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003c7c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003c7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	891b      	ldrh	r3, [r3, #8]
 8003c8a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003c8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6959      	ldr	r1, [r3, #20]
 8003c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8003ca4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8003ca8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8003cac:	6800      	ldr	r0, [r0, #0]
 8003cae:	f000 fe58 	bl	8004962 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003cb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003cb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003cc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	4413      	add	r3, r2
 8003ccc:	881b      	ldrh	r3, [r3, #0]
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cd8:	817b      	strh	r3, [r7, #10]
 8003cda:	897b      	ldrh	r3, [r7, #10]
 8003cdc:	f083 0310 	eor.w	r3, r3, #16
 8003ce0:	817b      	strh	r3, [r7, #10]
 8003ce2:	897b      	ldrh	r3, [r7, #10]
 8003ce4:	f083 0320 	eor.w	r3, r3, #32
 8003ce8:	817b      	strh	r3, [r7, #10]
 8003cea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003cee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003cf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	441a      	add	r2, r3
 8003d04:	897b      	ldrh	r3, [r7, #10]
 8003d06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	8013      	strh	r3, [r2, #0]
 8003d1a:	f000 bcde 	b.w	80046da <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8003d1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	7b1b      	ldrb	r3, [r3, #12]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f040 80bb 	bne.w	8003ea6 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8003d30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	699a      	ldr	r2, [r3, #24]
 8003d3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d917      	bls.n	8003d7c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8003d4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8003d5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	699a      	ldr	r2, [r3, #24]
 8003d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d6c:	1ad2      	subs	r2, r2, r3
 8003d6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	619a      	str	r2, [r3, #24]
 8003d7a:	e00e      	b.n	8003d9a <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8003d7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8003d8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2200      	movs	r2, #0
 8003d98:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003d9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003da8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003dac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	461a      	mov	r2, r3
 8003dba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003dbe:	4413      	add	r3, r2
 8003dc0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003dc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003dc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	011a      	lsls	r2, r3, #4
 8003dd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003dd6:	4413      	add	r3, r2
 8003dd8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003ddc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003de0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003de4:	881b      	ldrh	r3, [r3, #0]
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003df2:	801a      	strh	r2, [r3, #0]
 8003df4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003df8:	2b3e      	cmp	r3, #62	@ 0x3e
 8003dfa:	d924      	bls.n	8003e46 <USB_EPStartXfer+0xec2>
 8003dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e00:	095b      	lsrs	r3, r3, #5
 8003e02:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e0a:	f003 031f 	and.w	r3, r3, #31
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d104      	bne.n	8003e1c <USB_EPStartXfer+0xe98>
 8003e12:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003e16:	3b01      	subs	r3, #1
 8003e18:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e20:	881b      	ldrh	r3, [r3, #0]
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	029b      	lsls	r3, r3, #10
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e40:	801a      	strh	r2, [r3, #0]
 8003e42:	f000 bc10 	b.w	8004666 <USB_EPStartXfer+0x16e2>
 8003e46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10c      	bne.n	8003e68 <USB_EPStartXfer+0xee4>
 8003e4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e52:	881b      	ldrh	r3, [r3, #0]
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e64:	801a      	strh	r2, [r3, #0]
 8003e66:	e3fe      	b.n	8004666 <USB_EPStartXfer+0x16e2>
 8003e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e6c:	085b      	lsrs	r3, r3, #1
 8003e6e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d004      	beq.n	8003e88 <USB_EPStartXfer+0xf04>
 8003e7e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003e82:	3301      	adds	r3, #1
 8003e84:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e8c:	881b      	ldrh	r3, [r3, #0]
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	029b      	lsls	r3, r3, #10
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ea2:	801a      	strh	r2, [r3, #0]
 8003ea4:	e3df      	b.n	8004666 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8003ea6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003eaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	78db      	ldrb	r3, [r3, #3]
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	f040 8218 	bne.w	80042e8 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8003eb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ebc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	785b      	ldrb	r3, [r3, #1]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f040 809d 	bne.w	8004004 <USB_EPStartXfer+0x1080>
 8003eca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ece:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ed8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003edc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	461a      	mov	r2, r3
 8003eea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003eee:	4413      	add	r3, r2
 8003ef0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ef4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ef8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	011a      	lsls	r2, r3, #4
 8003f02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f06:	4413      	add	r3, r2
 8003f08:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003f0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003f14:	881b      	ldrh	r3, [r3, #0]
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003f22:	801a      	strh	r2, [r3, #0]
 8003f24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	2b3e      	cmp	r3, #62	@ 0x3e
 8003f32:	d92b      	bls.n	8003f8c <USB_EPStartXfer+0x1008>
 8003f34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	095b      	lsrs	r3, r3, #5
 8003f42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003f46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	f003 031f 	and.w	r3, r3, #31
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d104      	bne.n	8003f64 <USB_EPStartXfer+0xfe0>
 8003f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003f64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003f68:	881b      	ldrh	r3, [r3, #0]
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	029b      	lsls	r3, r3, #10
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	4313      	orrs	r3, r2
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003f88:	801a      	strh	r2, [r3, #0]
 8003f8a:	e070      	b.n	800406e <USB_EPStartXfer+0x10ea>
 8003f8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d10c      	bne.n	8003fb6 <USB_EPStartXfer+0x1032>
 8003f9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003fa0:	881b      	ldrh	r3, [r3, #0]
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003fb2:	801a      	strh	r2, [r3, #0]
 8003fb4:	e05b      	b.n	800406e <USB_EPStartXfer+0x10ea>
 8003fb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003fba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	085b      	lsrs	r3, r3, #1
 8003fc4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003fc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003fcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d004      	beq.n	8003fe6 <USB_EPStartXfer+0x1062>
 8003fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003fe6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003fea:	881b      	ldrh	r3, [r3, #0]
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	029b      	lsls	r3, r3, #10
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004000:	801a      	strh	r2, [r3, #0]
 8004002:	e034      	b.n	800406e <USB_EPStartXfer+0x10ea>
 8004004:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004008:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	785b      	ldrb	r3, [r3, #1]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d12c      	bne.n	800406e <USB_EPStartXfer+0x10ea>
 8004014:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004018:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004022:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004026:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004030:	b29b      	uxth	r3, r3
 8004032:	461a      	mov	r2, r3
 8004034:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004038:	4413      	add	r3, r2
 800403a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800403e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004042:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	011a      	lsls	r2, r3, #4
 800404c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004050:	4413      	add	r3, r2
 8004052:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004056:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800405a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800405e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	b29a      	uxth	r2, r3
 8004068:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800406c:	801a      	strh	r2, [r3, #0]
 800406e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004072:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800407c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004080:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	785b      	ldrb	r3, [r3, #1]
 8004088:	2b00      	cmp	r3, #0
 800408a:	f040 809d 	bne.w	80041c8 <USB_EPStartXfer+0x1244>
 800408e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004092:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800409c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80040a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	461a      	mov	r2, r3
 80040ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80040b2:	4413      	add	r3, r2
 80040b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80040b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80040bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	011a      	lsls	r2, r3, #4
 80040c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80040ca:	4413      	add	r3, r2
 80040cc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80040d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80040d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80040d8:	881b      	ldrh	r3, [r3, #0]
 80040da:	b29b      	uxth	r3, r3
 80040dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80040e6:	801a      	strh	r2, [r3, #0]
 80040e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80040ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	2b3e      	cmp	r3, #62	@ 0x3e
 80040f6:	d92b      	bls.n	8004150 <USB_EPStartXfer+0x11cc>
 80040f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80040fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	095b      	lsrs	r3, r3, #5
 8004106:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800410a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800410e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	f003 031f 	and.w	r3, r3, #31
 800411a:	2b00      	cmp	r3, #0
 800411c:	d104      	bne.n	8004128 <USB_EPStartXfer+0x11a4>
 800411e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004122:	3b01      	subs	r3, #1
 8004124:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004128:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800412c:	881b      	ldrh	r3, [r3, #0]
 800412e:	b29a      	uxth	r2, r3
 8004130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004134:	b29b      	uxth	r3, r3
 8004136:	029b      	lsls	r3, r3, #10
 8004138:	b29b      	uxth	r3, r3
 800413a:	4313      	orrs	r3, r2
 800413c:	b29b      	uxth	r3, r3
 800413e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004142:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004146:	b29a      	uxth	r2, r3
 8004148:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800414c:	801a      	strh	r2, [r3, #0]
 800414e:	e069      	b.n	8004224 <USB_EPStartXfer+0x12a0>
 8004150:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004154:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10c      	bne.n	800417a <USB_EPStartXfer+0x11f6>
 8004160:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004164:	881b      	ldrh	r3, [r3, #0]
 8004166:	b29b      	uxth	r3, r3
 8004168:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800416c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004170:	b29a      	uxth	r2, r3
 8004172:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004176:	801a      	strh	r2, [r3, #0]
 8004178:	e054      	b.n	8004224 <USB_EPStartXfer+0x12a0>
 800417a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800417e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	085b      	lsrs	r3, r3, #1
 8004188:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800418c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004190:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	f003 0301 	and.w	r3, r3, #1
 800419c:	2b00      	cmp	r3, #0
 800419e:	d004      	beq.n	80041aa <USB_EPStartXfer+0x1226>
 80041a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041a4:	3301      	adds	r3, #1
 80041a6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80041aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80041ae:	881b      	ldrh	r3, [r3, #0]
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	029b      	lsls	r3, r3, #10
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	4313      	orrs	r3, r2
 80041be:	b29a      	uxth	r2, r3
 80041c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80041c4:	801a      	strh	r2, [r3, #0]
 80041c6:	e02d      	b.n	8004224 <USB_EPStartXfer+0x12a0>
 80041c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	785b      	ldrb	r3, [r3, #1]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d125      	bne.n	8004224 <USB_EPStartXfer+0x12a0>
 80041d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	461a      	mov	r2, r3
 80041ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80041ee:	4413      	add	r3, r2
 80041f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80041f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	011a      	lsls	r2, r3, #4
 8004202:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004206:	4413      	add	r3, r2
 8004208:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800420c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004210:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004214:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	b29a      	uxth	r2, r3
 800421e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004222:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004224:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004228:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	69db      	ldr	r3, [r3, #28]
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 8218 	beq.w	8004666 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004236:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800423a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004244:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	4413      	add	r3, r2
 8004250:	881b      	ldrh	r3, [r3, #0]
 8004252:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004256:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800425a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d005      	beq.n	800426e <USB_EPStartXfer+0x12ea>
 8004262:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004266:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10d      	bne.n	800428a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800426e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004272:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004276:	2b00      	cmp	r3, #0
 8004278:	f040 81f5 	bne.w	8004666 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800427c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004284:	2b00      	cmp	r3, #0
 8004286:	f040 81ee 	bne.w	8004666 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800428a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800428e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004298:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	4413      	add	r3, r2
 80042a4:	881b      	ldrh	r3, [r3, #0]
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042b0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80042b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80042b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80042c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	441a      	add	r2, r3
 80042ce:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80042d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80042d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80042da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042de:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	8013      	strh	r3, [r2, #0]
 80042e6:	e1be      	b.n	8004666 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80042e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80042ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	78db      	ldrb	r3, [r3, #3]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	f040 81b4 	bne.w	8004662 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80042fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80042fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	699a      	ldr	r2, [r3, #24]
 8004306:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800430a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	429a      	cmp	r2, r3
 8004314:	d917      	bls.n	8004346 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8004316:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800431a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8004326:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800432a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	699a      	ldr	r2, [r3, #24]
 8004332:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004336:	1ad2      	subs	r2, r2, r3
 8004338:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800433c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	619a      	str	r2, [r3, #24]
 8004344:	e00e      	b.n	8004364 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8004346:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800434a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8004356:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800435a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2200      	movs	r2, #0
 8004362:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004364:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004368:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	785b      	ldrb	r3, [r3, #1]
 8004370:	2b00      	cmp	r3, #0
 8004372:	f040 8085 	bne.w	8004480 <USB_EPStartXfer+0x14fc>
 8004376:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800437a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004384:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004388:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004392:	b29b      	uxth	r3, r3
 8004394:	461a      	mov	r2, r3
 8004396:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800439a:	4413      	add	r3, r2
 800439c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80043a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	011a      	lsls	r2, r3, #4
 80043ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80043b2:	4413      	add	r3, r2
 80043b4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80043b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80043bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80043c0:	881b      	ldrh	r3, [r3, #0]
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80043ce:	801a      	strh	r2, [r3, #0]
 80043d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043d4:	2b3e      	cmp	r3, #62	@ 0x3e
 80043d6:	d923      	bls.n	8004420 <USB_EPStartXfer+0x149c>
 80043d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043dc:	095b      	lsrs	r3, r3, #5
 80043de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80043e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043e6:	f003 031f 	and.w	r3, r3, #31
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d104      	bne.n	80043f8 <USB_EPStartXfer+0x1474>
 80043ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043f2:	3b01      	subs	r3, #1
 80043f4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80043f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80043fc:	881b      	ldrh	r3, [r3, #0]
 80043fe:	b29a      	uxth	r2, r3
 8004400:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004404:	b29b      	uxth	r3, r3
 8004406:	029b      	lsls	r3, r3, #10
 8004408:	b29b      	uxth	r3, r3
 800440a:	4313      	orrs	r3, r2
 800440c:	b29b      	uxth	r3, r3
 800440e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004412:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004416:	b29a      	uxth	r2, r3
 8004418:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800441c:	801a      	strh	r2, [r3, #0]
 800441e:	e060      	b.n	80044e2 <USB_EPStartXfer+0x155e>
 8004420:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10c      	bne.n	8004442 <USB_EPStartXfer+0x14be>
 8004428:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800442c:	881b      	ldrh	r3, [r3, #0]
 800442e:	b29b      	uxth	r3, r3
 8004430:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004434:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004438:	b29a      	uxth	r2, r3
 800443a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800443e:	801a      	strh	r2, [r3, #0]
 8004440:	e04f      	b.n	80044e2 <USB_EPStartXfer+0x155e>
 8004442:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004446:	085b      	lsrs	r3, r3, #1
 8004448:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800444c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	2b00      	cmp	r3, #0
 8004456:	d004      	beq.n	8004462 <USB_EPStartXfer+0x14de>
 8004458:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800445c:	3301      	adds	r3, #1
 800445e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004462:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004466:	881b      	ldrh	r3, [r3, #0]
 8004468:	b29a      	uxth	r2, r3
 800446a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800446e:	b29b      	uxth	r3, r3
 8004470:	029b      	lsls	r3, r3, #10
 8004472:	b29b      	uxth	r3, r3
 8004474:	4313      	orrs	r3, r2
 8004476:	b29a      	uxth	r2, r3
 8004478:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800447c:	801a      	strh	r2, [r3, #0]
 800447e:	e030      	b.n	80044e2 <USB_EPStartXfer+0x155e>
 8004480:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004484:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	785b      	ldrb	r3, [r3, #1]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d128      	bne.n	80044e2 <USB_EPStartXfer+0x155e>
 8004490:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004494:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800449e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	461a      	mov	r2, r3
 80044b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044b4:	4413      	add	r3, r2
 80044b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80044ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	011a      	lsls	r2, r3, #4
 80044c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044cc:	4413      	add	r3, r2
 80044ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80044d2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80044d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044da:	b29a      	uxth	r2, r3
 80044dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80044e0:	801a      	strh	r2, [r3, #0]
 80044e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80044f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	785b      	ldrb	r3, [r3, #1]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f040 8085 	bne.w	800460c <USB_EPStartXfer+0x1688>
 8004502:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004506:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004510:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004514:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800451e:	b29b      	uxth	r3, r3
 8004520:	461a      	mov	r2, r3
 8004522:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004526:	4413      	add	r3, r2
 8004528:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800452c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004530:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	011a      	lsls	r2, r3, #4
 800453a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800453e:	4413      	add	r3, r2
 8004540:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004544:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004548:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800454c:	881b      	ldrh	r3, [r3, #0]
 800454e:	b29b      	uxth	r3, r3
 8004550:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004554:	b29a      	uxth	r2, r3
 8004556:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800455a:	801a      	strh	r2, [r3, #0]
 800455c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004560:	2b3e      	cmp	r3, #62	@ 0x3e
 8004562:	d923      	bls.n	80045ac <USB_EPStartXfer+0x1628>
 8004564:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004568:	095b      	lsrs	r3, r3, #5
 800456a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800456e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004572:	f003 031f 	and.w	r3, r3, #31
 8004576:	2b00      	cmp	r3, #0
 8004578:	d104      	bne.n	8004584 <USB_EPStartXfer+0x1600>
 800457a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800457e:	3b01      	subs	r3, #1
 8004580:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004584:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004588:	881b      	ldrh	r3, [r3, #0]
 800458a:	b29a      	uxth	r2, r3
 800458c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004590:	b29b      	uxth	r3, r3
 8004592:	029b      	lsls	r3, r3, #10
 8004594:	b29b      	uxth	r3, r3
 8004596:	4313      	orrs	r3, r2
 8004598:	b29b      	uxth	r3, r3
 800459a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800459e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80045a8:	801a      	strh	r2, [r3, #0]
 80045aa:	e05c      	b.n	8004666 <USB_EPStartXfer+0x16e2>
 80045ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d10c      	bne.n	80045ce <USB_EPStartXfer+0x164a>
 80045b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80045b8:	881b      	ldrh	r3, [r3, #0]
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80045ca:	801a      	strh	r2, [r3, #0]
 80045cc:	e04b      	b.n	8004666 <USB_EPStartXfer+0x16e2>
 80045ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045d2:	085b      	lsrs	r3, r3, #1
 80045d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80045d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045dc:	f003 0301 	and.w	r3, r3, #1
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d004      	beq.n	80045ee <USB_EPStartXfer+0x166a>
 80045e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80045e8:	3301      	adds	r3, #1
 80045ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80045ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80045f2:	881b      	ldrh	r3, [r3, #0]
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	029b      	lsls	r3, r3, #10
 80045fe:	b29b      	uxth	r3, r3
 8004600:	4313      	orrs	r3, r2
 8004602:	b29a      	uxth	r2, r3
 8004604:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004608:	801a      	strh	r2, [r3, #0]
 800460a:	e02c      	b.n	8004666 <USB_EPStartXfer+0x16e2>
 800460c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004610:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	785b      	ldrb	r3, [r3, #1]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d124      	bne.n	8004666 <USB_EPStartXfer+0x16e2>
 800461c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004620:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800462a:	b29b      	uxth	r3, r3
 800462c:	461a      	mov	r2, r3
 800462e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004632:	4413      	add	r3, r2
 8004634:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004638:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800463c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	011a      	lsls	r2, r3, #4
 8004646:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800464a:	4413      	add	r3, r2
 800464c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004650:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004654:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004658:	b29a      	uxth	r2, r3
 800465a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800465e:	801a      	strh	r2, [r3, #0]
 8004660:	e001      	b.n	8004666 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e03a      	b.n	80046dc <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004666:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800466a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004674:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	4413      	add	r3, r2
 8004680:	881b      	ldrh	r3, [r3, #0]
 8004682:	b29b      	uxth	r3, r3
 8004684:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004688:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800468c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004690:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004694:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004698:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800469c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80046a0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80046a4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80046a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	441a      	add	r2, r3
 80046c2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80046c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80046e6:	b480      	push	{r7}
 80046e8:	b085      	sub	sp, #20
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
 80046ee:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	785b      	ldrb	r3, [r3, #1]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d020      	beq.n	800473a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	4413      	add	r3, r2
 8004702:	881b      	ldrh	r3, [r3, #0]
 8004704:	b29b      	uxth	r3, r3
 8004706:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800470a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800470e:	81bb      	strh	r3, [r7, #12]
 8004710:	89bb      	ldrh	r3, [r7, #12]
 8004712:	f083 0310 	eor.w	r3, r3, #16
 8004716:	81bb      	strh	r3, [r7, #12]
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	441a      	add	r2, r3
 8004722:	89bb      	ldrh	r3, [r7, #12]
 8004724:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004728:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800472c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004730:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004734:	b29b      	uxth	r3, r3
 8004736:	8013      	strh	r3, [r2, #0]
 8004738:	e01f      	b.n	800477a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	4413      	add	r3, r2
 8004744:	881b      	ldrh	r3, [r3, #0]
 8004746:	b29b      	uxth	r3, r3
 8004748:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800474c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004750:	81fb      	strh	r3, [r7, #14]
 8004752:	89fb      	ldrh	r3, [r7, #14]
 8004754:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004758:	81fb      	strh	r3, [r7, #14]
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	441a      	add	r2, r3
 8004764:	89fb      	ldrh	r3, [r7, #14]
 8004766:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800476a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800476e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004772:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004776:	b29b      	uxth	r3, r3
 8004778:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3714      	adds	r7, #20
 8004780:	46bd      	mov	sp, r7
 8004782:	bc80      	pop	{r7}
 8004784:	4770      	bx	lr

08004786 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004786:	b480      	push	{r7}
 8004788:	b087      	sub	sp, #28
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
 800478e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	7b1b      	ldrb	r3, [r3, #12]
 8004794:	2b00      	cmp	r3, #0
 8004796:	f040 809d 	bne.w	80048d4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	785b      	ldrb	r3, [r3, #1]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d04c      	beq.n	800483c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	4413      	add	r3, r2
 80047ac:	881b      	ldrh	r3, [r3, #0]
 80047ae:	823b      	strh	r3, [r7, #16]
 80047b0:	8a3b      	ldrh	r3, [r7, #16]
 80047b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d01b      	beq.n	80047f2 <USB_EPClearStall+0x6c>
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	4413      	add	r3, r2
 80047c4:	881b      	ldrh	r3, [r3, #0]
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047d0:	81fb      	strh	r3, [r7, #14]
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	441a      	add	r2, r3
 80047dc:	89fb      	ldrh	r3, [r7, #14]
 80047de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047ea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	78db      	ldrb	r3, [r3, #3]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d06c      	beq.n	80048d4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4413      	add	r3, r2
 8004804:	881b      	ldrh	r3, [r3, #0]
 8004806:	b29b      	uxth	r3, r3
 8004808:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800480c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004810:	81bb      	strh	r3, [r7, #12]
 8004812:	89bb      	ldrh	r3, [r7, #12]
 8004814:	f083 0320 	eor.w	r3, r3, #32
 8004818:	81bb      	strh	r3, [r7, #12]
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	441a      	add	r2, r3
 8004824:	89bb      	ldrh	r3, [r7, #12]
 8004826:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800482a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800482e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004832:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004836:	b29b      	uxth	r3, r3
 8004838:	8013      	strh	r3, [r2, #0]
 800483a:	e04b      	b.n	80048d4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4413      	add	r3, r2
 8004846:	881b      	ldrh	r3, [r3, #0]
 8004848:	82fb      	strh	r3, [r7, #22]
 800484a:	8afb      	ldrh	r3, [r7, #22]
 800484c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d01b      	beq.n	800488c <USB_EPClearStall+0x106>
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	4413      	add	r3, r2
 800485e:	881b      	ldrh	r3, [r3, #0]
 8004860:	b29b      	uxth	r3, r3
 8004862:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004866:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800486a:	82bb      	strh	r3, [r7, #20]
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	441a      	add	r2, r3
 8004876:	8abb      	ldrh	r3, [r7, #20]
 8004878:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800487c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004880:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004884:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004888:	b29b      	uxth	r3, r3
 800488a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4413      	add	r3, r2
 8004896:	881b      	ldrh	r3, [r3, #0]
 8004898:	b29b      	uxth	r3, r3
 800489a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800489e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048a2:	827b      	strh	r3, [r7, #18]
 80048a4:	8a7b      	ldrh	r3, [r7, #18]
 80048a6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80048aa:	827b      	strh	r3, [r7, #18]
 80048ac:	8a7b      	ldrh	r3, [r7, #18]
 80048ae:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80048b2:	827b      	strh	r3, [r7, #18]
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	441a      	add	r2, r3
 80048be:	8a7b      	ldrh	r3, [r7, #18]
 80048c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	371c      	adds	r7, #28
 80048da:	46bd      	mov	sp, r7
 80048dc:	bc80      	pop	{r7}
 80048de:	4770      	bx	lr

080048e0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	460b      	mov	r3, r1
 80048ea:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80048ec:	78fb      	ldrb	r3, [r7, #3]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d103      	bne.n	80048fa <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2280      	movs	r2, #128	@ 0x80
 80048f6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	bc80      	pop	{r7}
 8004904:	4770      	bx	lr

08004906 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004906:	b480      	push	{r7}
 8004908:	b083      	sub	sp, #12
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	bc80      	pop	{r7}
 8004918:	4770      	bx	lr

0800491a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800491a:	b480      	push	{r7}
 800491c:	b083      	sub	sp, #12
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	bc80      	pop	{r7}
 800492c:	4770      	bx	lr

0800492e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800492e:	b480      	push	{r7}
 8004930:	b085      	sub	sp, #20
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800493c:	b29b      	uxth	r3, r3
 800493e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004940:	68fb      	ldr	r3, [r7, #12]
}
 8004942:	4618      	mov	r0, r3
 8004944:	3714      	adds	r7, #20
 8004946:	46bd      	mov	sp, r7
 8004948:	bc80      	pop	{r7}
 800494a:	4770      	bx	lr

0800494c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	bc80      	pop	{r7}
 8004960:	4770      	bx	lr

08004962 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004962:	b480      	push	{r7}
 8004964:	b08b      	sub	sp, #44	@ 0x2c
 8004966:	af00      	add	r7, sp, #0
 8004968:	60f8      	str	r0, [r7, #12]
 800496a:	60b9      	str	r1, [r7, #8]
 800496c:	4611      	mov	r1, r2
 800496e:	461a      	mov	r2, r3
 8004970:	460b      	mov	r3, r1
 8004972:	80fb      	strh	r3, [r7, #6]
 8004974:	4613      	mov	r3, r2
 8004976:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004978:	88bb      	ldrh	r3, [r7, #4]
 800497a:	3301      	adds	r3, #1
 800497c:	085b      	lsrs	r3, r3, #1
 800497e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004988:	88fb      	ldrh	r3, [r7, #6]
 800498a:	005a      	lsls	r2, r3, #1
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	4413      	add	r3, r2
 8004990:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004994:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	627b      	str	r3, [r7, #36]	@ 0x24
 800499a:	e01e      	b.n	80049da <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	3301      	adds	r3, #1
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	021b      	lsls	r3, r3, #8
 80049aa:	b21a      	sxth	r2, r3
 80049ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	b21b      	sxth	r3, r3
 80049b4:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80049b6:	6a3b      	ldr	r3, [r7, #32]
 80049b8:	8a7a      	ldrh	r2, [r7, #18]
 80049ba:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80049bc:	6a3b      	ldr	r3, [r7, #32]
 80049be:	3302      	adds	r3, #2
 80049c0:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80049c2:	6a3b      	ldr	r3, [r7, #32]
 80049c4:	3302      	adds	r3, #2
 80049c6:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	3301      	adds	r3, #1
 80049cc:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	3301      	adds	r3, #1
 80049d2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80049d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d6:	3b01      	subs	r3, #1
 80049d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80049da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1dd      	bne.n	800499c <USB_WritePMA+0x3a>
  }
}
 80049e0:	bf00      	nop
 80049e2:	bf00      	nop
 80049e4:	372c      	adds	r7, #44	@ 0x2c
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bc80      	pop	{r7}
 80049ea:	4770      	bx	lr

080049ec <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b08b      	sub	sp, #44	@ 0x2c
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	4611      	mov	r1, r2
 80049f8:	461a      	mov	r2, r3
 80049fa:	460b      	mov	r3, r1
 80049fc:	80fb      	strh	r3, [r7, #6]
 80049fe:	4613      	mov	r3, r2
 8004a00:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004a02:	88bb      	ldrh	r3, [r7, #4]
 8004a04:	085b      	lsrs	r3, r3, #1
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004a12:	88fb      	ldrh	r3, [r7, #6]
 8004a14:	005a      	lsls	r2, r3, #1
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	4413      	add	r3, r2
 8004a1a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004a1e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a24:	e01b      	b.n	8004a5e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8004a26:	6a3b      	ldr	r3, [r7, #32]
 8004a28:	881b      	ldrh	r3, [r3, #0]
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004a2e:	6a3b      	ldr	r3, [r7, #32]
 8004a30:	3302      	adds	r3, #2
 8004a32:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	b2da      	uxtb	r2, r3
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	3301      	adds	r3, #1
 8004a40:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	0a1b      	lsrs	r3, r3, #8
 8004a46:	b2da      	uxtb	r2, r3
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	3301      	adds	r3, #1
 8004a50:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004a52:	6a3b      	ldr	r3, [r7, #32]
 8004a54:	3302      	adds	r3, #2
 8004a56:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8004a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1e0      	bne.n	8004a26 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8004a64:	88bb      	ldrh	r3, [r7, #4]
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d007      	beq.n	8004a80 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8004a70:	6a3b      	ldr	r3, [r7, #32]
 8004a72:	881b      	ldrh	r3, [r3, #0]
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	b2da      	uxtb	r2, r3
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	701a      	strb	r2, [r3, #0]
  }
}
 8004a80:	bf00      	nop
 8004a82:	372c      	adds	r7, #44	@ 0x2c
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bc80      	pop	{r7}
 8004a88:	4770      	bx	lr

08004a8a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b084      	sub	sp, #16
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
 8004a92:	460b      	mov	r3, r1
 8004a94:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	7c1b      	ldrb	r3, [r3, #16]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d115      	bne.n	8004ace <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004aa2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	2181      	movs	r1, #129	@ 0x81
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f001 fe45 	bl	800673a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004ab6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004aba:	2202      	movs	r2, #2
 8004abc:	2101      	movs	r1, #1
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f001 fe3b 	bl	800673a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8004acc:	e012      	b.n	8004af4 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004ace:	2340      	movs	r3, #64	@ 0x40
 8004ad0:	2202      	movs	r2, #2
 8004ad2:	2181      	movs	r1, #129	@ 0x81
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f001 fe30 	bl	800673a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2201      	movs	r2, #1
 8004ade:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004ae0:	2340      	movs	r3, #64	@ 0x40
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	2101      	movs	r1, #1
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f001 fe27 	bl	800673a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004af4:	2308      	movs	r3, #8
 8004af6:	2203      	movs	r2, #3
 8004af8:	2182      	movs	r1, #130	@ 0x82
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f001 fe1d 	bl	800673a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004b06:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8004b0a:	f001 ff3d 	bl	8006988 <USBD_static_malloc>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d102      	bne.n	8004b26 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8004b20:	2301      	movs	r3, #1
 8004b22:	73fb      	strb	r3, [r7, #15]
 8004b24:	e026      	b.n	8004b74 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004b2c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	7c1b      	ldrb	r3, [r3, #16]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d109      	bne.n	8004b64 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004b56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004b5a:	2101      	movs	r1, #1
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f001 fedc 	bl	800691a <USBD_LL_PrepareReceive>
 8004b62:	e007      	b.n	8004b74 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004b6a:	2340      	movs	r3, #64	@ 0x40
 8004b6c:	2101      	movs	r1, #1
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f001 fed3 	bl	800691a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8004b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b084      	sub	sp, #16
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
 8004b86:	460b      	mov	r3, r1
 8004b88:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004b8e:	2181      	movs	r1, #129	@ 0x81
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f001 fdf8 	bl	8006786 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004b9c:	2101      	movs	r1, #1
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f001 fdf1 	bl	8006786 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004bac:	2182      	movs	r1, #130	@ 0x82
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f001 fde9 	bl	8006786 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d00e      	beq.n	8004be2 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f001 fee3 	bl	80069a0 <USBD_static_free>
    pdev->pClassData = NULL;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8004be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3710      	adds	r7, #16
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004bfc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004c02:	2300      	movs	r3, #0
 8004c04:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8004c06:	2300      	movs	r3, #0
 8004c08:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d039      	beq.n	8004c8a <USBD_CDC_Setup+0x9e>
 8004c16:	2b20      	cmp	r3, #32
 8004c18:	d17f      	bne.n	8004d1a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	88db      	ldrh	r3, [r3, #6]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d029      	beq.n	8004c76 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	b25b      	sxtb	r3, r3
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	da11      	bge.n	8004c50 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	683a      	ldr	r2, [r7, #0]
 8004c36:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8004c38:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004c3a:	683a      	ldr	r2, [r7, #0]
 8004c3c:	88d2      	ldrh	r2, [r2, #6]
 8004c3e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004c40:	6939      	ldr	r1, [r7, #16]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	88db      	ldrh	r3, [r3, #6]
 8004c46:	461a      	mov	r2, r3
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f001 f9d5 	bl	8005ff8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8004c4e:	e06b      	b.n	8004d28 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	785a      	ldrb	r2, [r3, #1]
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	88db      	ldrh	r3, [r3, #6]
 8004c5e:	b2da      	uxtb	r2, r3
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004c66:	6939      	ldr	r1, [r7, #16]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	88db      	ldrh	r3, [r3, #6]
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f001 f9f0 	bl	8006054 <USBD_CtlPrepareRx>
      break;
 8004c74:	e058      	b.n	8004d28 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	683a      	ldr	r2, [r7, #0]
 8004c80:	7850      	ldrb	r0, [r2, #1]
 8004c82:	2200      	movs	r2, #0
 8004c84:	6839      	ldr	r1, [r7, #0]
 8004c86:	4798      	blx	r3
      break;
 8004c88:	e04e      	b.n	8004d28 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	785b      	ldrb	r3, [r3, #1]
 8004c8e:	2b0b      	cmp	r3, #11
 8004c90:	d02e      	beq.n	8004cf0 <USBD_CDC_Setup+0x104>
 8004c92:	2b0b      	cmp	r3, #11
 8004c94:	dc38      	bgt.n	8004d08 <USBD_CDC_Setup+0x11c>
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d002      	beq.n	8004ca0 <USBD_CDC_Setup+0xb4>
 8004c9a:	2b0a      	cmp	r3, #10
 8004c9c:	d014      	beq.n	8004cc8 <USBD_CDC_Setup+0xdc>
 8004c9e:	e033      	b.n	8004d08 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004ca6:	2b03      	cmp	r3, #3
 8004ca8:	d107      	bne.n	8004cba <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004caa:	f107 030c 	add.w	r3, r7, #12
 8004cae:	2202      	movs	r2, #2
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f001 f9a0 	bl	8005ff8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004cb8:	e02e      	b.n	8004d18 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8004cba:	6839      	ldr	r1, [r7, #0]
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f001 f931 	bl	8005f24 <USBD_CtlError>
            ret = USBD_FAIL;
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	75fb      	strb	r3, [r7, #23]
          break;
 8004cc6:	e027      	b.n	8004d18 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004cce:	2b03      	cmp	r3, #3
 8004cd0:	d107      	bne.n	8004ce2 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8004cd2:	f107 030f 	add.w	r3, r7, #15
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	4619      	mov	r1, r3
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f001 f98c 	bl	8005ff8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004ce0:	e01a      	b.n	8004d18 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8004ce2:	6839      	ldr	r1, [r7, #0]
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f001 f91d 	bl	8005f24 <USBD_CtlError>
            ret = USBD_FAIL;
 8004cea:	2302      	movs	r3, #2
 8004cec:	75fb      	strb	r3, [r7, #23]
          break;
 8004cee:	e013      	b.n	8004d18 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004cf6:	2b03      	cmp	r3, #3
 8004cf8:	d00d      	beq.n	8004d16 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8004cfa:	6839      	ldr	r1, [r7, #0]
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f001 f911 	bl	8005f24 <USBD_CtlError>
            ret = USBD_FAIL;
 8004d02:	2302      	movs	r3, #2
 8004d04:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004d06:	e006      	b.n	8004d16 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8004d08:	6839      	ldr	r1, [r7, #0]
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f001 f90a 	bl	8005f24 <USBD_CtlError>
          ret = USBD_FAIL;
 8004d10:	2302      	movs	r3, #2
 8004d12:	75fb      	strb	r3, [r7, #23]
          break;
 8004d14:	e000      	b.n	8004d18 <USBD_CDC_Setup+0x12c>
          break;
 8004d16:	bf00      	nop
      }
      break;
 8004d18:	e006      	b.n	8004d28 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8004d1a:	6839      	ldr	r1, [r7, #0]
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f001 f901 	bl	8005f24 <USBD_CtlError>
      ret = USBD_FAIL;
 8004d22:	2302      	movs	r3, #2
 8004d24:	75fb      	strb	r3, [r7, #23]
      break;
 8004d26:	bf00      	nop
  }

  return ret;
 8004d28:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3718      	adds	r7, #24
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b084      	sub	sp, #16
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004d44:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8004d4c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d03a      	beq.n	8004dce <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004d58:	78fa      	ldrb	r2, [r7, #3]
 8004d5a:	6879      	ldr	r1, [r7, #4]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4413      	add	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	440b      	add	r3, r1
 8004d66:	331c      	adds	r3, #28
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d029      	beq.n	8004dc2 <USBD_CDC_DataIn+0x90>
 8004d6e:	78fa      	ldrb	r2, [r7, #3]
 8004d70:	6879      	ldr	r1, [r7, #4]
 8004d72:	4613      	mov	r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4413      	add	r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	440b      	add	r3, r1
 8004d7c:	331c      	adds	r3, #28
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	78f9      	ldrb	r1, [r7, #3]
 8004d82:	68b8      	ldr	r0, [r7, #8]
 8004d84:	460b      	mov	r3, r1
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	440b      	add	r3, r1
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	4403      	add	r3, r0
 8004d8e:	3320      	adds	r3, #32
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	fbb2 f1f3 	udiv	r1, r2, r3
 8004d96:	fb01 f303 	mul.w	r3, r1, r3
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d110      	bne.n	8004dc2 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8004da0:	78fa      	ldrb	r2, [r7, #3]
 8004da2:	6879      	ldr	r1, [r7, #4]
 8004da4:	4613      	mov	r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	4413      	add	r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	440b      	add	r3, r1
 8004dae:	331c      	adds	r3, #28
 8004db0:	2200      	movs	r2, #0
 8004db2:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004db4:	78f9      	ldrb	r1, [r7, #3]
 8004db6:	2300      	movs	r3, #0
 8004db8:	2200      	movs	r2, #0
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f001 fd8a 	bl	80068d4 <USBD_LL_Transmit>
 8004dc0:	e003      	b.n	8004dca <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	e000      	b.n	8004dd0 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8004dce:	2302      	movs	r3, #2
  }
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	460b      	mov	r3, r1
 8004de2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004dea:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004dec:	78fb      	ldrb	r3, [r7, #3]
 8004dee:	4619      	mov	r1, r3
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f001 fdb5 	bl	8006960 <USBD_LL_GetRxDataSize>
 8004df6:	4602      	mov	r2, r0
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00d      	beq.n	8004e24 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8004e1c:	4611      	mov	r1, r2
 8004e1e:	4798      	blx	r3

    return USBD_OK;
 8004e20:	2300      	movs	r3, #0
 8004e22:	e000      	b.n	8004e26 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8004e24:	2302      	movs	r3, #2
  }
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b084      	sub	sp, #16
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004e3c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d014      	beq.n	8004e72 <USBD_CDC_EP0_RxReady+0x44>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8004e4e:	2bff      	cmp	r3, #255	@ 0xff
 8004e50:	d00f      	beq.n	8004e72 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8004e60:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004e68:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	22ff      	movs	r2, #255	@ 0xff
 8004e6e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2243      	movs	r2, #67	@ 0x43
 8004e88:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8004e8a:	4b03      	ldr	r3, [pc, #12]	@ (8004e98 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bc80      	pop	{r7}
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	200000bc 	.word	0x200000bc

08004e9c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2243      	movs	r2, #67	@ 0x43
 8004ea8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8004eaa:	4b03      	ldr	r3, [pc, #12]	@ (8004eb8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bc80      	pop	{r7}
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	20000078 	.word	0x20000078

08004ebc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2243      	movs	r2, #67	@ 0x43
 8004ec8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8004eca:	4b03      	ldr	r3, [pc, #12]	@ (8004ed8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bc80      	pop	{r7}
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	20000100 	.word	0x20000100

08004edc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	220a      	movs	r2, #10
 8004ee8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8004eea:	4b03      	ldr	r3, [pc, #12]	@ (8004ef8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bc80      	pop	{r7}
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	20000034 	.word	0x20000034

08004efc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8004f06:	2302      	movs	r3, #2
 8004f08:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d005      	beq.n	8004f1c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	683a      	ldr	r2, [r7, #0]
 8004f14:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3714      	adds	r7, #20
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bc80      	pop	{r7}
 8004f26:	4770      	bx	lr

08004f28 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b087      	sub	sp, #28
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	4613      	mov	r3, r2
 8004f34:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004f3c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8004f46:	88fa      	ldrh	r2, [r7, #6]
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	371c      	adds	r7, #28
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bc80      	pop	{r7}
 8004f58:	4770      	bx	lr

08004f5a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b085      	sub	sp, #20
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
 8004f62:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004f6a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	683a      	ldr	r2, [r7, #0]
 8004f70:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3714      	adds	r7, #20
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bc80      	pop	{r7}
 8004f7e:	4770      	bx	lr

08004f80 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004f8e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d017      	beq.n	8004fca <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	7c1b      	ldrb	r3, [r3, #16]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d109      	bne.n	8004fb6 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004fa8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004fac:	2101      	movs	r1, #1
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f001 fcb3 	bl	800691a <USBD_LL_PrepareReceive>
 8004fb4:	e007      	b.n	8004fc6 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004fbc:	2340      	movs	r3, #64	@ 0x40
 8004fbe:	2101      	movs	r1, #1
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f001 fcaa 	bl	800691a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	e000      	b.n	8004fcc <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8004fca:	2302      	movs	r3, #2
  }
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d101      	bne.n	8004fec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004fe8:	2302      	movs	r3, #2
 8004fea:	e01a      	b.n	8005022 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d003      	beq.n	8004ffe <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d003      	beq.n	800500c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	68ba      	ldr	r2, [r7, #8]
 8005008:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	79fa      	ldrb	r2, [r7, #7]
 8005018:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f001 fb18 	bl	8006650 <USBD_LL_Init>

  return USBD_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800502a:	b480      	push	{r7}
 800502c:	b085      	sub	sp, #20
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
 8005032:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005034:	2300      	movs	r3, #0
 8005036:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d006      	beq.n	800504c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	683a      	ldr	r2, [r7, #0]
 8005042:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8005046:	2300      	movs	r3, #0
 8005048:	73fb      	strb	r3, [r7, #15]
 800504a:	e001      	b.n	8005050 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800504c:	2302      	movs	r3, #2
 800504e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005050:	7bfb      	ldrb	r3, [r7, #15]
}
 8005052:	4618      	mov	r0, r3
 8005054:	3714      	adds	r7, #20
 8005056:	46bd      	mov	sp, r7
 8005058:	bc80      	pop	{r7}
 800505a:	4770      	bx	lr

0800505c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f001 fb4d 	bl	8006704 <USBD_LL_Start>

  return USBD_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	3708      	adds	r7, #8
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	bc80      	pop	{r7}
 8005086:	4770      	bx	lr

08005088 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	460b      	mov	r3, r1
 8005092:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005094:	2302      	movs	r3, #2
 8005096:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00c      	beq.n	80050bc <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	78fa      	ldrb	r2, [r7, #3]
 80050ac:	4611      	mov	r1, r2
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	4798      	blx	r3
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80050b8:	2300      	movs	r3, #0
 80050ba:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80050bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b082      	sub	sp, #8
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
 80050ce:	460b      	mov	r3, r1
 80050d0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	78fa      	ldrb	r2, [r7, #3]
 80050dc:	4611      	mov	r1, r2
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	4798      	blx	r3

  return USBD_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3708      	adds	r7, #8
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80050fc:	6839      	ldr	r1, [r7, #0]
 80050fe:	4618      	mov	r0, r3
 8005100:	f000 fed7 	bl	8005eb2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005112:	461a      	mov	r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005120:	f003 031f 	and.w	r3, r3, #31
 8005124:	2b02      	cmp	r3, #2
 8005126:	d016      	beq.n	8005156 <USBD_LL_SetupStage+0x6a>
 8005128:	2b02      	cmp	r3, #2
 800512a:	d81c      	bhi.n	8005166 <USBD_LL_SetupStage+0x7a>
 800512c:	2b00      	cmp	r3, #0
 800512e:	d002      	beq.n	8005136 <USBD_LL_SetupStage+0x4a>
 8005130:	2b01      	cmp	r3, #1
 8005132:	d008      	beq.n	8005146 <USBD_LL_SetupStage+0x5a>
 8005134:	e017      	b.n	8005166 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800513c:	4619      	mov	r1, r3
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f9ca 	bl	80054d8 <USBD_StdDevReq>
      break;
 8005144:	e01a      	b.n	800517c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800514c:	4619      	mov	r1, r3
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 fa2c 	bl	80055ac <USBD_StdItfReq>
      break;
 8005154:	e012      	b.n	800517c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800515c:	4619      	mov	r1, r3
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 fa6c 	bl	800563c <USBD_StdEPReq>
      break;
 8005164:	e00a      	b.n	800517c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800516c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005170:	b2db      	uxtb	r3, r3
 8005172:	4619      	mov	r1, r3
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f001 fb25 	bl	80067c4 <USBD_LL_StallEP>
      break;
 800517a:	bf00      	nop
  }

  return USBD_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3708      	adds	r7, #8
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b086      	sub	sp, #24
 800518a:	af00      	add	r7, sp, #0
 800518c:	60f8      	str	r0, [r7, #12]
 800518e:	460b      	mov	r3, r1
 8005190:	607a      	str	r2, [r7, #4]
 8005192:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005194:	7afb      	ldrb	r3, [r7, #11]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d14b      	bne.n	8005232 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80051a0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80051a8:	2b03      	cmp	r3, #3
 80051aa:	d134      	bne.n	8005216 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	68da      	ldr	r2, [r3, #12]
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d919      	bls.n	80051ec <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	68da      	ldr	r2, [r3, #12]
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	1ad2      	subs	r2, r2, r3
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	68da      	ldr	r2, [r3, #12]
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d203      	bcs.n	80051da <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	e002      	b.n	80051e0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80051de:	b29b      	uxth	r3, r3
 80051e0:	461a      	mov	r2, r3
 80051e2:	6879      	ldr	r1, [r7, #4]
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f000 ff53 	bl	8006090 <USBD_CtlContinueRx>
 80051ea:	e038      	b.n	800525e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00a      	beq.n	800520e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80051fe:	2b03      	cmp	r3, #3
 8005200:	d105      	bne.n	800520e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800520e:	68f8      	ldr	r0, [r7, #12]
 8005210:	f000 ff50 	bl	80060b4 <USBD_CtlSendStatus>
 8005214:	e023      	b.n	800525e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800521c:	2b05      	cmp	r3, #5
 800521e:	d11e      	bne.n	800525e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005228:	2100      	movs	r1, #0
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	f001 faca 	bl	80067c4 <USBD_LL_StallEP>
 8005230:	e015      	b.n	800525e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00d      	beq.n	800525a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005244:	2b03      	cmp	r3, #3
 8005246:	d108      	bne.n	800525a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	7afa      	ldrb	r2, [r7, #11]
 8005252:	4611      	mov	r1, r2
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	4798      	blx	r3
 8005258:	e001      	b.n	800525e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800525a:	2302      	movs	r3, #2
 800525c:	e000      	b.n	8005260 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3718      	adds	r7, #24
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b086      	sub	sp, #24
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	460b      	mov	r3, r1
 8005272:	607a      	str	r2, [r7, #4]
 8005274:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005276:	7afb      	ldrb	r3, [r7, #11]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d17f      	bne.n	800537c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	3314      	adds	r3, #20
 8005280:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005288:	2b02      	cmp	r3, #2
 800528a:	d15c      	bne.n	8005346 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	68da      	ldr	r2, [r3, #12]
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	429a      	cmp	r2, r3
 8005296:	d915      	bls.n	80052c4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	68da      	ldr	r2, [r3, #12]
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	1ad2      	subs	r2, r2, r3
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	461a      	mov	r2, r3
 80052ae:	6879      	ldr	r1, [r7, #4]
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f000 febd 	bl	8006030 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80052b6:	2300      	movs	r3, #0
 80052b8:	2200      	movs	r2, #0
 80052ba:	2100      	movs	r1, #0
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f001 fb2c 	bl	800691a <USBD_LL_PrepareReceive>
 80052c2:	e04e      	b.n	8005362 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	6912      	ldr	r2, [r2, #16]
 80052cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80052d0:	fb01 f202 	mul.w	r2, r1, r2
 80052d4:	1a9b      	subs	r3, r3, r2
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d11c      	bne.n	8005314 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	689a      	ldr	r2, [r3, #8]
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d316      	bcc.n	8005314 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	689a      	ldr	r2, [r3, #8]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d20f      	bcs.n	8005314 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80052f4:	2200      	movs	r2, #0
 80052f6:	2100      	movs	r1, #0
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	f000 fe99 	bl	8006030 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005306:	2300      	movs	r3, #0
 8005308:	2200      	movs	r2, #0
 800530a:	2100      	movs	r1, #0
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f001 fb04 	bl	800691a <USBD_LL_PrepareReceive>
 8005312:	e026      	b.n	8005362 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00a      	beq.n	8005336 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005326:	2b03      	cmp	r3, #3
 8005328:	d105      	bne.n	8005336 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005336:	2180      	movs	r1, #128	@ 0x80
 8005338:	68f8      	ldr	r0, [r7, #12]
 800533a:	f001 fa43 	bl	80067c4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f000 fecb 	bl	80060da <USBD_CtlReceiveStatus>
 8005344:	e00d      	b.n	8005362 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800534c:	2b04      	cmp	r3, #4
 800534e:	d004      	beq.n	800535a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005356:	2b00      	cmp	r3, #0
 8005358:	d103      	bne.n	8005362 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800535a:	2180      	movs	r1, #128	@ 0x80
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f001 fa31 	bl	80067c4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005368:	2b01      	cmp	r3, #1
 800536a:	d11d      	bne.n	80053a8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f7ff fe81 	bl	8005074 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800537a:	e015      	b.n	80053a8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005382:	695b      	ldr	r3, [r3, #20]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00d      	beq.n	80053a4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800538e:	2b03      	cmp	r3, #3
 8005390:	d108      	bne.n	80053a4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	7afa      	ldrb	r2, [r7, #11]
 800539c:	4611      	mov	r1, r2
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	4798      	blx	r3
 80053a2:	e001      	b.n	80053a8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80053a4:	2302      	movs	r3, #2
 80053a6:	e000      	b.n	80053aa <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3718      	adds	r7, #24
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b082      	sub	sp, #8
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80053ba:	2340      	movs	r3, #64	@ 0x40
 80053bc:	2200      	movs	r2, #0
 80053be:	2100      	movs	r1, #0
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f001 f9ba 	bl	800673a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2240      	movs	r2, #64	@ 0x40
 80053d2:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80053d6:	2340      	movs	r3, #64	@ 0x40
 80053d8:	2200      	movs	r2, #0
 80053da:	2180      	movs	r1, #128	@ 0x80
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f001 f9ac 	bl	800673a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2240      	movs	r2, #64	@ 0x40
 80053ec:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005412:	2b00      	cmp	r3, #0
 8005414:	d009      	beq.n	800542a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	6852      	ldr	r2, [r2, #4]
 8005422:	b2d2      	uxtb	r2, r2
 8005424:	4611      	mov	r1, r2
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	4798      	blx	r3
  }

  return USBD_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3708      	adds	r7, #8
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	460b      	mov	r3, r1
 800543e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	78fa      	ldrb	r2, [r7, #3]
 8005444:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	bc80      	pop	{r7}
 8005450:	4770      	bx	lr

08005452 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005452:	b480      	push	{r7}
 8005454:	b083      	sub	sp, #12
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2204      	movs	r2, #4
 800546a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	bc80      	pop	{r7}
 8005478:	4770      	bx	lr

0800547a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800547a:	b480      	push	{r7}
 800547c:	b083      	sub	sp, #12
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005488:	2b04      	cmp	r3, #4
 800548a:	d105      	bne.n	8005498 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	370c      	adds	r7, #12
 800549e:	46bd      	mov	sp, r7
 80054a0:	bc80      	pop	{r7}
 80054a2:	4770      	bx	lr

080054a4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80054b2:	2b03      	cmp	r3, #3
 80054b4:	d10b      	bne.n	80054ce <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80054bc:	69db      	ldr	r3, [r3, #28]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d005      	beq.n	80054ce <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80054c8:	69db      	ldr	r3, [r3, #28]
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3708      	adds	r7, #8
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80054e2:	2300      	movs	r3, #0
 80054e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80054ee:	2b40      	cmp	r3, #64	@ 0x40
 80054f0:	d005      	beq.n	80054fe <USBD_StdDevReq+0x26>
 80054f2:	2b40      	cmp	r3, #64	@ 0x40
 80054f4:	d84f      	bhi.n	8005596 <USBD_StdDevReq+0xbe>
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d009      	beq.n	800550e <USBD_StdDevReq+0x36>
 80054fa:	2b20      	cmp	r3, #32
 80054fc:	d14b      	bne.n	8005596 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	6839      	ldr	r1, [r7, #0]
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	4798      	blx	r3
      break;
 800550c:	e048      	b.n	80055a0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	785b      	ldrb	r3, [r3, #1]
 8005512:	2b09      	cmp	r3, #9
 8005514:	d839      	bhi.n	800558a <USBD_StdDevReq+0xb2>
 8005516:	a201      	add	r2, pc, #4	@ (adr r2, 800551c <USBD_StdDevReq+0x44>)
 8005518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800551c:	0800556d 	.word	0x0800556d
 8005520:	08005581 	.word	0x08005581
 8005524:	0800558b 	.word	0x0800558b
 8005528:	08005577 	.word	0x08005577
 800552c:	0800558b 	.word	0x0800558b
 8005530:	0800554f 	.word	0x0800554f
 8005534:	08005545 	.word	0x08005545
 8005538:	0800558b 	.word	0x0800558b
 800553c:	08005563 	.word	0x08005563
 8005540:	08005559 	.word	0x08005559
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005544:	6839      	ldr	r1, [r7, #0]
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 f9dc 	bl	8005904 <USBD_GetDescriptor>
          break;
 800554c:	e022      	b.n	8005594 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800554e:	6839      	ldr	r1, [r7, #0]
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 fb3f 	bl	8005bd4 <USBD_SetAddress>
          break;
 8005556:	e01d      	b.n	8005594 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005558:	6839      	ldr	r1, [r7, #0]
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 fb7e 	bl	8005c5c <USBD_SetConfig>
          break;
 8005560:	e018      	b.n	8005594 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005562:	6839      	ldr	r1, [r7, #0]
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 fc07 	bl	8005d78 <USBD_GetConfig>
          break;
 800556a:	e013      	b.n	8005594 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800556c:	6839      	ldr	r1, [r7, #0]
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 fc37 	bl	8005de2 <USBD_GetStatus>
          break;
 8005574:	e00e      	b.n	8005594 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005576:	6839      	ldr	r1, [r7, #0]
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 fc65 	bl	8005e48 <USBD_SetFeature>
          break;
 800557e:	e009      	b.n	8005594 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005580:	6839      	ldr	r1, [r7, #0]
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 fc74 	bl	8005e70 <USBD_ClrFeature>
          break;
 8005588:	e004      	b.n	8005594 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800558a:	6839      	ldr	r1, [r7, #0]
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f000 fcc9 	bl	8005f24 <USBD_CtlError>
          break;
 8005592:	bf00      	nop
      }
      break;
 8005594:	e004      	b.n	80055a0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005596:	6839      	ldr	r1, [r7, #0]
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 fcc3 	bl	8005f24 <USBD_CtlError>
      break;
 800559e:	bf00      	nop
  }

  return ret;
 80055a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3710      	adds	r7, #16
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop

080055ac <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80055b6:	2300      	movs	r3, #0
 80055b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80055c2:	2b40      	cmp	r3, #64	@ 0x40
 80055c4:	d005      	beq.n	80055d2 <USBD_StdItfReq+0x26>
 80055c6:	2b40      	cmp	r3, #64	@ 0x40
 80055c8:	d82e      	bhi.n	8005628 <USBD_StdItfReq+0x7c>
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d001      	beq.n	80055d2 <USBD_StdItfReq+0x26>
 80055ce:	2b20      	cmp	r3, #32
 80055d0:	d12a      	bne.n	8005628 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80055d8:	3b01      	subs	r3, #1
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d81d      	bhi.n	800561a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	889b      	ldrh	r3, [r3, #4]
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d813      	bhi.n	8005610 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	6839      	ldr	r1, [r7, #0]
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	4798      	blx	r3
 80055f6:	4603      	mov	r3, r0
 80055f8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	88db      	ldrh	r3, [r3, #6]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d110      	bne.n	8005624 <USBD_StdItfReq+0x78>
 8005602:	7bfb      	ldrb	r3, [r7, #15]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d10d      	bne.n	8005624 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 fd53 	bl	80060b4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800560e:	e009      	b.n	8005624 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8005610:	6839      	ldr	r1, [r7, #0]
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 fc86 	bl	8005f24 <USBD_CtlError>
          break;
 8005618:	e004      	b.n	8005624 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800561a:	6839      	ldr	r1, [r7, #0]
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 fc81 	bl	8005f24 <USBD_CtlError>
          break;
 8005622:	e000      	b.n	8005626 <USBD_StdItfReq+0x7a>
          break;
 8005624:	bf00      	nop
      }
      break;
 8005626:	e004      	b.n	8005632 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8005628:	6839      	ldr	r1, [r7, #0]
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 fc7a 	bl	8005f24 <USBD_CtlError>
      break;
 8005630:	bf00      	nop
  }

  return USBD_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3710      	adds	r7, #16
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005646:	2300      	movs	r3, #0
 8005648:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	889b      	ldrh	r3, [r3, #4]
 800564e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005658:	2b40      	cmp	r3, #64	@ 0x40
 800565a:	d007      	beq.n	800566c <USBD_StdEPReq+0x30>
 800565c:	2b40      	cmp	r3, #64	@ 0x40
 800565e:	f200 8146 	bhi.w	80058ee <USBD_StdEPReq+0x2b2>
 8005662:	2b00      	cmp	r3, #0
 8005664:	d00a      	beq.n	800567c <USBD_StdEPReq+0x40>
 8005666:	2b20      	cmp	r3, #32
 8005668:	f040 8141 	bne.w	80058ee <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	6839      	ldr	r1, [r7, #0]
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	4798      	blx	r3
      break;
 800567a:	e13d      	b.n	80058f8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005684:	2b20      	cmp	r3, #32
 8005686:	d10a      	bne.n	800569e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	6839      	ldr	r1, [r7, #0]
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	4798      	blx	r3
 8005696:	4603      	mov	r3, r0
 8005698:	73fb      	strb	r3, [r7, #15]

        return ret;
 800569a:	7bfb      	ldrb	r3, [r7, #15]
 800569c:	e12d      	b.n	80058fa <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	785b      	ldrb	r3, [r3, #1]
 80056a2:	2b03      	cmp	r3, #3
 80056a4:	d007      	beq.n	80056b6 <USBD_StdEPReq+0x7a>
 80056a6:	2b03      	cmp	r3, #3
 80056a8:	f300 811b 	bgt.w	80058e2 <USBD_StdEPReq+0x2a6>
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d072      	beq.n	8005796 <USBD_StdEPReq+0x15a>
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d03a      	beq.n	800572a <USBD_StdEPReq+0xee>
 80056b4:	e115      	b.n	80058e2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d002      	beq.n	80056c6 <USBD_StdEPReq+0x8a>
 80056c0:	2b03      	cmp	r3, #3
 80056c2:	d015      	beq.n	80056f0 <USBD_StdEPReq+0xb4>
 80056c4:	e02b      	b.n	800571e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80056c6:	7bbb      	ldrb	r3, [r7, #14]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00c      	beq.n	80056e6 <USBD_StdEPReq+0xaa>
 80056cc:	7bbb      	ldrb	r3, [r7, #14]
 80056ce:	2b80      	cmp	r3, #128	@ 0x80
 80056d0:	d009      	beq.n	80056e6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80056d2:	7bbb      	ldrb	r3, [r7, #14]
 80056d4:	4619      	mov	r1, r3
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f001 f874 	bl	80067c4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80056dc:	2180      	movs	r1, #128	@ 0x80
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f001 f870 	bl	80067c4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80056e4:	e020      	b.n	8005728 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80056e6:	6839      	ldr	r1, [r7, #0]
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 fc1b 	bl	8005f24 <USBD_CtlError>
              break;
 80056ee:	e01b      	b.n	8005728 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	885b      	ldrh	r3, [r3, #2]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10e      	bne.n	8005716 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80056f8:	7bbb      	ldrb	r3, [r7, #14]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00b      	beq.n	8005716 <USBD_StdEPReq+0xda>
 80056fe:	7bbb      	ldrb	r3, [r7, #14]
 8005700:	2b80      	cmp	r3, #128	@ 0x80
 8005702:	d008      	beq.n	8005716 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	88db      	ldrh	r3, [r3, #6]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d104      	bne.n	8005716 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800570c:	7bbb      	ldrb	r3, [r7, #14]
 800570e:	4619      	mov	r1, r3
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f001 f857 	bl	80067c4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 fccc 	bl	80060b4 <USBD_CtlSendStatus>

              break;
 800571c:	e004      	b.n	8005728 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800571e:	6839      	ldr	r1, [r7, #0]
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 fbff 	bl	8005f24 <USBD_CtlError>
              break;
 8005726:	bf00      	nop
          }
          break;
 8005728:	e0e0      	b.n	80058ec <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005730:	2b02      	cmp	r3, #2
 8005732:	d002      	beq.n	800573a <USBD_StdEPReq+0xfe>
 8005734:	2b03      	cmp	r3, #3
 8005736:	d015      	beq.n	8005764 <USBD_StdEPReq+0x128>
 8005738:	e026      	b.n	8005788 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800573a:	7bbb      	ldrb	r3, [r7, #14]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00c      	beq.n	800575a <USBD_StdEPReq+0x11e>
 8005740:	7bbb      	ldrb	r3, [r7, #14]
 8005742:	2b80      	cmp	r3, #128	@ 0x80
 8005744:	d009      	beq.n	800575a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005746:	7bbb      	ldrb	r3, [r7, #14]
 8005748:	4619      	mov	r1, r3
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f001 f83a 	bl	80067c4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005750:	2180      	movs	r1, #128	@ 0x80
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f001 f836 	bl	80067c4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005758:	e01c      	b.n	8005794 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800575a:	6839      	ldr	r1, [r7, #0]
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f000 fbe1 	bl	8005f24 <USBD_CtlError>
              break;
 8005762:	e017      	b.n	8005794 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	885b      	ldrh	r3, [r3, #2]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d112      	bne.n	8005792 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800576c:	7bbb      	ldrb	r3, [r7, #14]
 800576e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005772:	2b00      	cmp	r3, #0
 8005774:	d004      	beq.n	8005780 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005776:	7bbb      	ldrb	r3, [r7, #14]
 8005778:	4619      	mov	r1, r3
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f001 f841 	bl	8006802 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f000 fc97 	bl	80060b4 <USBD_CtlSendStatus>
              }
              break;
 8005786:	e004      	b.n	8005792 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8005788:	6839      	ldr	r1, [r7, #0]
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 fbca 	bl	8005f24 <USBD_CtlError>
              break;
 8005790:	e000      	b.n	8005794 <USBD_StdEPReq+0x158>
              break;
 8005792:	bf00      	nop
          }
          break;
 8005794:	e0aa      	b.n	80058ec <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800579c:	2b02      	cmp	r3, #2
 800579e:	d002      	beq.n	80057a6 <USBD_StdEPReq+0x16a>
 80057a0:	2b03      	cmp	r3, #3
 80057a2:	d032      	beq.n	800580a <USBD_StdEPReq+0x1ce>
 80057a4:	e097      	b.n	80058d6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80057a6:	7bbb      	ldrb	r3, [r7, #14]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d007      	beq.n	80057bc <USBD_StdEPReq+0x180>
 80057ac:	7bbb      	ldrb	r3, [r7, #14]
 80057ae:	2b80      	cmp	r3, #128	@ 0x80
 80057b0:	d004      	beq.n	80057bc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80057b2:	6839      	ldr	r1, [r7, #0]
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 fbb5 	bl	8005f24 <USBD_CtlError>
                break;
 80057ba:	e091      	b.n	80058e0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80057bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	da0b      	bge.n	80057dc <USBD_StdEPReq+0x1a0>
 80057c4:	7bbb      	ldrb	r3, [r7, #14]
 80057c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80057ca:	4613      	mov	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4413      	add	r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	3310      	adds	r3, #16
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	4413      	add	r3, r2
 80057d8:	3304      	adds	r3, #4
 80057da:	e00b      	b.n	80057f4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80057dc:	7bbb      	ldrb	r3, [r7, #14]
 80057de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80057e2:	4613      	mov	r3, r2
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	4413      	add	r3, r2
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	4413      	add	r3, r2
 80057f2:	3304      	adds	r3, #4
 80057f4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	2200      	movs	r2, #0
 80057fa:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	2202      	movs	r2, #2
 8005800:	4619      	mov	r1, r3
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 fbf8 	bl	8005ff8 <USBD_CtlSendData>
              break;
 8005808:	e06a      	b.n	80058e0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800580a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800580e:	2b00      	cmp	r3, #0
 8005810:	da11      	bge.n	8005836 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005812:	7bbb      	ldrb	r3, [r7, #14]
 8005814:	f003 020f 	and.w	r2, r3, #15
 8005818:	6879      	ldr	r1, [r7, #4]
 800581a:	4613      	mov	r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	4413      	add	r3, r2
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	440b      	add	r3, r1
 8005824:	3318      	adds	r3, #24
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d117      	bne.n	800585c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800582c:	6839      	ldr	r1, [r7, #0]
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 fb78 	bl	8005f24 <USBD_CtlError>
                  break;
 8005834:	e054      	b.n	80058e0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005836:	7bbb      	ldrb	r3, [r7, #14]
 8005838:	f003 020f 	and.w	r2, r3, #15
 800583c:	6879      	ldr	r1, [r7, #4]
 800583e:	4613      	mov	r3, r2
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	4413      	add	r3, r2
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	440b      	add	r3, r1
 8005848:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d104      	bne.n	800585c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8005852:	6839      	ldr	r1, [r7, #0]
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 fb65 	bl	8005f24 <USBD_CtlError>
                  break;
 800585a:	e041      	b.n	80058e0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800585c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005860:	2b00      	cmp	r3, #0
 8005862:	da0b      	bge.n	800587c <USBD_StdEPReq+0x240>
 8005864:	7bbb      	ldrb	r3, [r7, #14]
 8005866:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800586a:	4613      	mov	r3, r2
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	4413      	add	r3, r2
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	3310      	adds	r3, #16
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	4413      	add	r3, r2
 8005878:	3304      	adds	r3, #4
 800587a:	e00b      	b.n	8005894 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800587c:	7bbb      	ldrb	r3, [r7, #14]
 800587e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005882:	4613      	mov	r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	4413      	add	r3, r2
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	4413      	add	r3, r2
 8005892:	3304      	adds	r3, #4
 8005894:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005896:	7bbb      	ldrb	r3, [r7, #14]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d002      	beq.n	80058a2 <USBD_StdEPReq+0x266>
 800589c:	7bbb      	ldrb	r3, [r7, #14]
 800589e:	2b80      	cmp	r3, #128	@ 0x80
 80058a0:	d103      	bne.n	80058aa <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	2200      	movs	r2, #0
 80058a6:	601a      	str	r2, [r3, #0]
 80058a8:	e00e      	b.n	80058c8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80058aa:	7bbb      	ldrb	r3, [r7, #14]
 80058ac:	4619      	mov	r1, r3
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 ffc6 	bl	8006840 <USBD_LL_IsStallEP>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d003      	beq.n	80058c2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	2201      	movs	r2, #1
 80058be:	601a      	str	r2, [r3, #0]
 80058c0:	e002      	b.n	80058c8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	2200      	movs	r2, #0
 80058c6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	2202      	movs	r2, #2
 80058cc:	4619      	mov	r1, r3
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 fb92 	bl	8005ff8 <USBD_CtlSendData>
              break;
 80058d4:	e004      	b.n	80058e0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80058d6:	6839      	ldr	r1, [r7, #0]
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 fb23 	bl	8005f24 <USBD_CtlError>
              break;
 80058de:	bf00      	nop
          }
          break;
 80058e0:	e004      	b.n	80058ec <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80058e2:	6839      	ldr	r1, [r7, #0]
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 fb1d 	bl	8005f24 <USBD_CtlError>
          break;
 80058ea:	bf00      	nop
      }
      break;
 80058ec:	e004      	b.n	80058f8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80058ee:	6839      	ldr	r1, [r7, #0]
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 fb17 	bl	8005f24 <USBD_CtlError>
      break;
 80058f6:	bf00      	nop
  }

  return ret;
 80058f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
	...

08005904 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800590e:	2300      	movs	r3, #0
 8005910:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005912:	2300      	movs	r3, #0
 8005914:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005916:	2300      	movs	r3, #0
 8005918:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	885b      	ldrh	r3, [r3, #2]
 800591e:	0a1b      	lsrs	r3, r3, #8
 8005920:	b29b      	uxth	r3, r3
 8005922:	3b01      	subs	r3, #1
 8005924:	2b06      	cmp	r3, #6
 8005926:	f200 8128 	bhi.w	8005b7a <USBD_GetDescriptor+0x276>
 800592a:	a201      	add	r2, pc, #4	@ (adr r2, 8005930 <USBD_GetDescriptor+0x2c>)
 800592c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005930:	0800594d 	.word	0x0800594d
 8005934:	08005965 	.word	0x08005965
 8005938:	080059a5 	.word	0x080059a5
 800593c:	08005b7b 	.word	0x08005b7b
 8005940:	08005b7b 	.word	0x08005b7b
 8005944:	08005b1b 	.word	0x08005b1b
 8005948:	08005b47 	.word	0x08005b47
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	7c12      	ldrb	r2, [r2, #16]
 8005958:	f107 0108 	add.w	r1, r7, #8
 800595c:	4610      	mov	r0, r2
 800595e:	4798      	blx	r3
 8005960:	60f8      	str	r0, [r7, #12]
      break;
 8005962:	e112      	b.n	8005b8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	7c1b      	ldrb	r3, [r3, #16]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d10d      	bne.n	8005988 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005974:	f107 0208 	add.w	r2, r7, #8
 8005978:	4610      	mov	r0, r2
 800597a:	4798      	blx	r3
 800597c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	3301      	adds	r3, #1
 8005982:	2202      	movs	r2, #2
 8005984:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005986:	e100      	b.n	8005b8a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800598e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005990:	f107 0208 	add.w	r2, r7, #8
 8005994:	4610      	mov	r0, r2
 8005996:	4798      	blx	r3
 8005998:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	3301      	adds	r3, #1
 800599e:	2202      	movs	r2, #2
 80059a0:	701a      	strb	r2, [r3, #0]
      break;
 80059a2:	e0f2      	b.n	8005b8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	885b      	ldrh	r3, [r3, #2]
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b05      	cmp	r3, #5
 80059ac:	f200 80ac 	bhi.w	8005b08 <USBD_GetDescriptor+0x204>
 80059b0:	a201      	add	r2, pc, #4	@ (adr r2, 80059b8 <USBD_GetDescriptor+0xb4>)
 80059b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b6:	bf00      	nop
 80059b8:	080059d1 	.word	0x080059d1
 80059bc:	08005a05 	.word	0x08005a05
 80059c0:	08005a39 	.word	0x08005a39
 80059c4:	08005a6d 	.word	0x08005a6d
 80059c8:	08005aa1 	.word	0x08005aa1
 80059cc:	08005ad5 	.word	0x08005ad5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00b      	beq.n	80059f4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	7c12      	ldrb	r2, [r2, #16]
 80059e8:	f107 0108 	add.w	r1, r7, #8
 80059ec:	4610      	mov	r0, r2
 80059ee:	4798      	blx	r3
 80059f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80059f2:	e091      	b.n	8005b18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80059f4:	6839      	ldr	r1, [r7, #0]
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 fa94 	bl	8005f24 <USBD_CtlError>
            err++;
 80059fc:	7afb      	ldrb	r3, [r7, #11]
 80059fe:	3301      	adds	r3, #1
 8005a00:	72fb      	strb	r3, [r7, #11]
          break;
 8005a02:	e089      	b.n	8005b18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00b      	beq.n	8005a28 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	7c12      	ldrb	r2, [r2, #16]
 8005a1c:	f107 0108 	add.w	r1, r7, #8
 8005a20:	4610      	mov	r0, r2
 8005a22:	4798      	blx	r3
 8005a24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005a26:	e077      	b.n	8005b18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005a28:	6839      	ldr	r1, [r7, #0]
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 fa7a 	bl	8005f24 <USBD_CtlError>
            err++;
 8005a30:	7afb      	ldrb	r3, [r7, #11]
 8005a32:	3301      	adds	r3, #1
 8005a34:	72fb      	strb	r3, [r7, #11]
          break;
 8005a36:	e06f      	b.n	8005b18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00b      	beq.n	8005a5c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	7c12      	ldrb	r2, [r2, #16]
 8005a50:	f107 0108 	add.w	r1, r7, #8
 8005a54:	4610      	mov	r0, r2
 8005a56:	4798      	blx	r3
 8005a58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005a5a:	e05d      	b.n	8005b18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005a5c:	6839      	ldr	r1, [r7, #0]
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 fa60 	bl	8005f24 <USBD_CtlError>
            err++;
 8005a64:	7afb      	ldrb	r3, [r7, #11]
 8005a66:	3301      	adds	r3, #1
 8005a68:	72fb      	strb	r3, [r7, #11]
          break;
 8005a6a:	e055      	b.n	8005b18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00b      	beq.n	8005a90 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	7c12      	ldrb	r2, [r2, #16]
 8005a84:	f107 0108 	add.w	r1, r7, #8
 8005a88:	4610      	mov	r0, r2
 8005a8a:	4798      	blx	r3
 8005a8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005a8e:	e043      	b.n	8005b18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005a90:	6839      	ldr	r1, [r7, #0]
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 fa46 	bl	8005f24 <USBD_CtlError>
            err++;
 8005a98:	7afb      	ldrb	r3, [r7, #11]
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	72fb      	strb	r3, [r7, #11]
          break;
 8005a9e:	e03b      	b.n	8005b18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8005aa6:	695b      	ldr	r3, [r3, #20]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00b      	beq.n	8005ac4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8005ab2:	695b      	ldr	r3, [r3, #20]
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	7c12      	ldrb	r2, [r2, #16]
 8005ab8:	f107 0108 	add.w	r1, r7, #8
 8005abc:	4610      	mov	r0, r2
 8005abe:	4798      	blx	r3
 8005ac0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ac2:	e029      	b.n	8005b18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ac4:	6839      	ldr	r1, [r7, #0]
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 fa2c 	bl	8005f24 <USBD_CtlError>
            err++;
 8005acc:	7afb      	ldrb	r3, [r7, #11]
 8005ace:	3301      	adds	r3, #1
 8005ad0:	72fb      	strb	r3, [r7, #11]
          break;
 8005ad2:	e021      	b.n	8005b18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00b      	beq.n	8005af8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8005ae6:	699b      	ldr	r3, [r3, #24]
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	7c12      	ldrb	r2, [r2, #16]
 8005aec:	f107 0108 	add.w	r1, r7, #8
 8005af0:	4610      	mov	r0, r2
 8005af2:	4798      	blx	r3
 8005af4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005af6:	e00f      	b.n	8005b18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005af8:	6839      	ldr	r1, [r7, #0]
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 fa12 	bl	8005f24 <USBD_CtlError>
            err++;
 8005b00:	7afb      	ldrb	r3, [r7, #11]
 8005b02:	3301      	adds	r3, #1
 8005b04:	72fb      	strb	r3, [r7, #11]
          break;
 8005b06:	e007      	b.n	8005b18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005b08:	6839      	ldr	r1, [r7, #0]
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 fa0a 	bl	8005f24 <USBD_CtlError>
          err++;
 8005b10:	7afb      	ldrb	r3, [r7, #11]
 8005b12:	3301      	adds	r3, #1
 8005b14:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8005b16:	e038      	b.n	8005b8a <USBD_GetDescriptor+0x286>
 8005b18:	e037      	b.n	8005b8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	7c1b      	ldrb	r3, [r3, #16]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d109      	bne.n	8005b36 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b2a:	f107 0208 	add.w	r2, r7, #8
 8005b2e:	4610      	mov	r0, r2
 8005b30:	4798      	blx	r3
 8005b32:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005b34:	e029      	b.n	8005b8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005b36:	6839      	ldr	r1, [r7, #0]
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 f9f3 	bl	8005f24 <USBD_CtlError>
        err++;
 8005b3e:	7afb      	ldrb	r3, [r7, #11]
 8005b40:	3301      	adds	r3, #1
 8005b42:	72fb      	strb	r3, [r7, #11]
      break;
 8005b44:	e021      	b.n	8005b8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	7c1b      	ldrb	r3, [r3, #16]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d10d      	bne.n	8005b6a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b56:	f107 0208 	add.w	r2, r7, #8
 8005b5a:	4610      	mov	r0, r2
 8005b5c:	4798      	blx	r3
 8005b5e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	3301      	adds	r3, #1
 8005b64:	2207      	movs	r2, #7
 8005b66:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005b68:	e00f      	b.n	8005b8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005b6a:	6839      	ldr	r1, [r7, #0]
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 f9d9 	bl	8005f24 <USBD_CtlError>
        err++;
 8005b72:	7afb      	ldrb	r3, [r7, #11]
 8005b74:	3301      	adds	r3, #1
 8005b76:	72fb      	strb	r3, [r7, #11]
      break;
 8005b78:	e007      	b.n	8005b8a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005b7a:	6839      	ldr	r1, [r7, #0]
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 f9d1 	bl	8005f24 <USBD_CtlError>
      err++;
 8005b82:	7afb      	ldrb	r3, [r7, #11]
 8005b84:	3301      	adds	r3, #1
 8005b86:	72fb      	strb	r3, [r7, #11]
      break;
 8005b88:	bf00      	nop
  }

  if (err != 0U)
 8005b8a:	7afb      	ldrb	r3, [r7, #11]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d11c      	bne.n	8005bca <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005b90:	893b      	ldrh	r3, [r7, #8]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d011      	beq.n	8005bba <USBD_GetDescriptor+0x2b6>
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	88db      	ldrh	r3, [r3, #6]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00d      	beq.n	8005bba <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	88da      	ldrh	r2, [r3, #6]
 8005ba2:	893b      	ldrh	r3, [r7, #8]
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	bf28      	it	cs
 8005ba8:	4613      	movcs	r3, r2
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005bae:	893b      	ldrh	r3, [r7, #8]
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	68f9      	ldr	r1, [r7, #12]
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 fa1f 	bl	8005ff8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	88db      	ldrh	r3, [r3, #6]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d104      	bne.n	8005bcc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 fa76 	bl	80060b4 <USBD_CtlSendStatus>
 8005bc8:	e000      	b.n	8005bcc <USBD_GetDescriptor+0x2c8>
    return;
 8005bca:	bf00      	nop
    }
  }
}
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop

08005bd4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	889b      	ldrh	r3, [r3, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d130      	bne.n	8005c48 <USBD_SetAddress+0x74>
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	88db      	ldrh	r3, [r3, #6]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d12c      	bne.n	8005c48 <USBD_SetAddress+0x74>
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	885b      	ldrh	r3, [r3, #2]
 8005bf2:	2b7f      	cmp	r3, #127	@ 0x7f
 8005bf4:	d828      	bhi.n	8005c48 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	885b      	ldrh	r3, [r3, #2]
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c00:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c08:	2b03      	cmp	r3, #3
 8005c0a:	d104      	bne.n	8005c16 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005c0c:	6839      	ldr	r1, [r7, #0]
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 f988 	bl	8005f24 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c14:	e01d      	b.n	8005c52 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	7bfa      	ldrb	r2, [r7, #15]
 8005c1a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005c1e:	7bfb      	ldrb	r3, [r7, #15]
 8005c20:	4619      	mov	r1, r3
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 fe37 	bl	8006896 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 fa43 	bl	80060b4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005c2e:	7bfb      	ldrb	r3, [r7, #15]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d004      	beq.n	8005c3e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2202      	movs	r2, #2
 8005c38:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c3c:	e009      	b.n	8005c52 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2201      	movs	r2, #1
 8005c42:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c46:	e004      	b.n	8005c52 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005c48:	6839      	ldr	r1, [r7, #0]
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 f96a 	bl	8005f24 <USBD_CtlError>
  }
}
 8005c50:	bf00      	nop
 8005c52:	bf00      	nop
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
	...

08005c5c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	885b      	ldrh	r3, [r3, #2]
 8005c6a:	b2da      	uxtb	r2, r3
 8005c6c:	4b41      	ldr	r3, [pc, #260]	@ (8005d74 <USBD_SetConfig+0x118>)
 8005c6e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005c70:	4b40      	ldr	r3, [pc, #256]	@ (8005d74 <USBD_SetConfig+0x118>)
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d904      	bls.n	8005c82 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005c78:	6839      	ldr	r1, [r7, #0]
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 f952 	bl	8005f24 <USBD_CtlError>
 8005c80:	e075      	b.n	8005d6e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c88:	2b02      	cmp	r3, #2
 8005c8a:	d002      	beq.n	8005c92 <USBD_SetConfig+0x36>
 8005c8c:	2b03      	cmp	r3, #3
 8005c8e:	d023      	beq.n	8005cd8 <USBD_SetConfig+0x7c>
 8005c90:	e062      	b.n	8005d58 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8005c92:	4b38      	ldr	r3, [pc, #224]	@ (8005d74 <USBD_SetConfig+0x118>)
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d01a      	beq.n	8005cd0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8005c9a:	4b36      	ldr	r3, [pc, #216]	@ (8005d74 <USBD_SetConfig+0x118>)
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2203      	movs	r2, #3
 8005ca8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005cac:	4b31      	ldr	r3, [pc, #196]	@ (8005d74 <USBD_SetConfig+0x118>)
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7ff f9e8 	bl	8005088 <USBD_SetClassConfig>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d104      	bne.n	8005cc8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8005cbe:	6839      	ldr	r1, [r7, #0]
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 f92f 	bl	8005f24 <USBD_CtlError>
            return;
 8005cc6:	e052      	b.n	8005d6e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 f9f3 	bl	80060b4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005cce:	e04e      	b.n	8005d6e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 f9ef 	bl	80060b4 <USBD_CtlSendStatus>
        break;
 8005cd6:	e04a      	b.n	8005d6e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8005cd8:	4b26      	ldr	r3, [pc, #152]	@ (8005d74 <USBD_SetConfig+0x118>)
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d112      	bne.n	8005d06 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2202      	movs	r2, #2
 8005ce4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8005ce8:	4b22      	ldr	r3, [pc, #136]	@ (8005d74 <USBD_SetConfig+0x118>)
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	461a      	mov	r2, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005cf2:	4b20      	ldr	r3, [pc, #128]	@ (8005d74 <USBD_SetConfig+0x118>)
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f7ff f9e4 	bl	80050c6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 f9d8 	bl	80060b4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005d04:	e033      	b.n	8005d6e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8005d06:	4b1b      	ldr	r3, [pc, #108]	@ (8005d74 <USBD_SetConfig+0x118>)
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d01d      	beq.n	8005d50 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f7ff f9d2 	bl	80050c6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005d22:	4b14      	ldr	r3, [pc, #80]	@ (8005d74 <USBD_SetConfig+0x118>)
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	461a      	mov	r2, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005d2c:	4b11      	ldr	r3, [pc, #68]	@ (8005d74 <USBD_SetConfig+0x118>)
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	4619      	mov	r1, r3
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f7ff f9a8 	bl	8005088 <USBD_SetClassConfig>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d104      	bne.n	8005d48 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8005d3e:	6839      	ldr	r1, [r7, #0]
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 f8ef 	bl	8005f24 <USBD_CtlError>
            return;
 8005d46:	e012      	b.n	8005d6e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 f9b3 	bl	80060b4 <USBD_CtlSendStatus>
        break;
 8005d4e:	e00e      	b.n	8005d6e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 f9af 	bl	80060b4 <USBD_CtlSendStatus>
        break;
 8005d56:	e00a      	b.n	8005d6e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8005d58:	6839      	ldr	r1, [r7, #0]
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f8e2 	bl	8005f24 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005d60:	4b04      	ldr	r3, [pc, #16]	@ (8005d74 <USBD_SetConfig+0x118>)
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	4619      	mov	r1, r3
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7ff f9ad 	bl	80050c6 <USBD_ClrClassConfig>
        break;
 8005d6c:	bf00      	nop
    }
  }
}
 8005d6e:	3708      	adds	r7, #8
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	20000234 	.word	0x20000234

08005d78 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	88db      	ldrh	r3, [r3, #6]
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d004      	beq.n	8005d94 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005d8a:	6839      	ldr	r1, [r7, #0]
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 f8c9 	bl	8005f24 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005d92:	e022      	b.n	8005dda <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	dc02      	bgt.n	8005da4 <USBD_GetConfig+0x2c>
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	dc03      	bgt.n	8005daa <USBD_GetConfig+0x32>
 8005da2:	e015      	b.n	8005dd0 <USBD_GetConfig+0x58>
 8005da4:	2b03      	cmp	r3, #3
 8005da6:	d00b      	beq.n	8005dc0 <USBD_GetConfig+0x48>
 8005da8:	e012      	b.n	8005dd0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	3308      	adds	r3, #8
 8005db4:	2201      	movs	r2, #1
 8005db6:	4619      	mov	r1, r3
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 f91d 	bl	8005ff8 <USBD_CtlSendData>
        break;
 8005dbe:	e00c      	b.n	8005dda <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	3304      	adds	r3, #4
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 f915 	bl	8005ff8 <USBD_CtlSendData>
        break;
 8005dce:	e004      	b.n	8005dda <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8005dd0:	6839      	ldr	r1, [r7, #0]
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 f8a6 	bl	8005f24 <USBD_CtlError>
        break;
 8005dd8:	bf00      	nop
}
 8005dda:	bf00      	nop
 8005ddc:	3708      	adds	r7, #8
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b082      	sub	sp, #8
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
 8005dea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005df2:	3b01      	subs	r3, #1
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d81e      	bhi.n	8005e36 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	88db      	ldrh	r3, [r3, #6]
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d004      	beq.n	8005e0a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8005e00:	6839      	ldr	r1, [r7, #0]
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 f88e 	bl	8005f24 <USBD_CtlError>
        break;
 8005e08:	e01a      	b.n	8005e40 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d005      	beq.n	8005e26 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	f043 0202 	orr.w	r2, r3, #2
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	330c      	adds	r3, #12
 8005e2a:	2202      	movs	r2, #2
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 f8e2 	bl	8005ff8 <USBD_CtlSendData>
      break;
 8005e34:	e004      	b.n	8005e40 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8005e36:	6839      	ldr	r1, [r7, #0]
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 f873 	bl	8005f24 <USBD_CtlError>
      break;
 8005e3e:	bf00      	nop
  }
}
 8005e40:	bf00      	nop
 8005e42:	3708      	adds	r7, #8
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	885b      	ldrh	r3, [r3, #2]
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d106      	bne.n	8005e68 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 f926 	bl	80060b4 <USBD_CtlSendStatus>
  }
}
 8005e68:	bf00      	nop
 8005e6a:	3708      	adds	r7, #8
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e80:	3b01      	subs	r3, #1
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d80b      	bhi.n	8005e9e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	885b      	ldrh	r3, [r3, #2]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d10c      	bne.n	8005ea8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 f90c 	bl	80060b4 <USBD_CtlSendStatus>
      }
      break;
 8005e9c:	e004      	b.n	8005ea8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005e9e:	6839      	ldr	r1, [r7, #0]
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 f83f 	bl	8005f24 <USBD_CtlError>
      break;
 8005ea6:	e000      	b.n	8005eaa <USBD_ClrFeature+0x3a>
      break;
 8005ea8:	bf00      	nop
  }
}
 8005eaa:	bf00      	nop
 8005eac:	3708      	adds	r7, #8
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b083      	sub	sp, #12
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
 8005eba:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	781a      	ldrb	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	785a      	ldrb	r2, [r3, #1]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	3302      	adds	r3, #2
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	3303      	adds	r3, #3
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	021b      	lsls	r3, r3, #8
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	4413      	add	r3, r2
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	3304      	adds	r3, #4
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	461a      	mov	r2, r3
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	3305      	adds	r3, #5
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	021b      	lsls	r3, r3, #8
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	4413      	add	r3, r2
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	3306      	adds	r3, #6
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	461a      	mov	r2, r3
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	3307      	adds	r3, #7
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	021b      	lsls	r3, r3, #8
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	4413      	add	r3, r2
 8005f14:	b29a      	uxth	r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	80da      	strh	r2, [r3, #6]

}
 8005f1a:	bf00      	nop
 8005f1c:	370c      	adds	r7, #12
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bc80      	pop	{r7}
 8005f22:	4770      	bx	lr

08005f24 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8005f2e:	2180      	movs	r1, #128	@ 0x80
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 fc47 	bl	80067c4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005f36:	2100      	movs	r1, #0
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 fc43 	bl	80067c4 <USBD_LL_StallEP>
}
 8005f3e:	bf00      	nop
 8005f40:	3708      	adds	r7, #8
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b086      	sub	sp, #24
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	60f8      	str	r0, [r7, #12]
 8005f4e:	60b9      	str	r1, [r7, #8]
 8005f50:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005f52:	2300      	movs	r3, #0
 8005f54:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d032      	beq.n	8005fc2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f000 f834 	bl	8005fca <USBD_GetLen>
 8005f62:	4603      	mov	r3, r0
 8005f64:	3301      	adds	r3, #1
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	005b      	lsls	r3, r3, #1
 8005f6a:	b29a      	uxth	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005f70:	7dfb      	ldrb	r3, [r7, #23]
 8005f72:	1c5a      	adds	r2, r3, #1
 8005f74:	75fa      	strb	r2, [r7, #23]
 8005f76:	461a      	mov	r2, r3
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	7812      	ldrb	r2, [r2, #0]
 8005f80:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005f82:	7dfb      	ldrb	r3, [r7, #23]
 8005f84:	1c5a      	adds	r2, r3, #1
 8005f86:	75fa      	strb	r2, [r7, #23]
 8005f88:	461a      	mov	r2, r3
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	2203      	movs	r2, #3
 8005f90:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8005f92:	e012      	b.n	8005fba <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	1c5a      	adds	r2, r3, #1
 8005f98:	60fa      	str	r2, [r7, #12]
 8005f9a:	7dfa      	ldrb	r2, [r7, #23]
 8005f9c:	1c51      	adds	r1, r2, #1
 8005f9e:	75f9      	strb	r1, [r7, #23]
 8005fa0:	4611      	mov	r1, r2
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	440a      	add	r2, r1
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8005faa:	7dfb      	ldrb	r3, [r7, #23]
 8005fac:	1c5a      	adds	r2, r3, #1
 8005fae:	75fa      	strb	r2, [r7, #23]
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1e8      	bne.n	8005f94 <USBD_GetString+0x4e>
    }
  }
}
 8005fc2:	bf00      	nop
 8005fc4:	3718      	adds	r7, #24
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005fca:	b480      	push	{r7}
 8005fcc:	b085      	sub	sp, #20
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8005fd6:	e005      	b.n	8005fe4 <USBD_GetLen+0x1a>
  {
    len++;
 8005fd8:	7bfb      	ldrb	r3, [r7, #15]
 8005fda:	3301      	adds	r3, #1
 8005fdc:	73fb      	strb	r3, [r7, #15]
    buf++;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d1f5      	bne.n	8005fd8 <USBD_GetLen+0xe>
  }

  return len;
 8005fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3714      	adds	r7, #20
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bc80      	pop	{r7}
 8005ff6:	4770      	bx	lr

08005ff8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	4613      	mov	r3, r2
 8006004:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2202      	movs	r2, #2
 800600a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800600e:	88fa      	ldrh	r2, [r7, #6]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006014:	88fa      	ldrh	r2, [r7, #6]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800601a:	88fb      	ldrh	r3, [r7, #6]
 800601c:	68ba      	ldr	r2, [r7, #8]
 800601e:	2100      	movs	r1, #0
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f000 fc57 	bl	80068d4 <USBD_LL_Transmit>

  return USBD_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3710      	adds	r7, #16
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	4613      	mov	r3, r2
 800603c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800603e:	88fb      	ldrh	r3, [r7, #6]
 8006040:	68ba      	ldr	r2, [r7, #8]
 8006042:	2100      	movs	r1, #0
 8006044:	68f8      	ldr	r0, [r7, #12]
 8006046:	f000 fc45 	bl	80068d4 <USBD_LL_Transmit>

  return USBD_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	3710      	adds	r7, #16
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	4613      	mov	r3, r2
 8006060:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2203      	movs	r2, #3
 8006066:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800606a:	88fa      	ldrh	r2, [r7, #6]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006072:	88fa      	ldrh	r2, [r7, #6]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800607a:	88fb      	ldrh	r3, [r7, #6]
 800607c:	68ba      	ldr	r2, [r7, #8]
 800607e:	2100      	movs	r1, #0
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	f000 fc4a 	bl	800691a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3710      	adds	r7, #16
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	4613      	mov	r3, r2
 800609c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800609e:	88fb      	ldrh	r3, [r7, #6]
 80060a0:	68ba      	ldr	r2, [r7, #8]
 80060a2:	2100      	movs	r1, #0
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	f000 fc38 	bl	800691a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3710      	adds	r7, #16
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2204      	movs	r2, #4
 80060c0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80060c4:	2300      	movs	r3, #0
 80060c6:	2200      	movs	r2, #0
 80060c8:	2100      	movs	r1, #0
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 fc02 	bl	80068d4 <USBD_LL_Transmit>

  return USBD_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3708      	adds	r7, #8
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80060da:	b580      	push	{r7, lr}
 80060dc:	b082      	sub	sp, #8
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2205      	movs	r2, #5
 80060e6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80060ea:	2300      	movs	r3, #0
 80060ec:	2200      	movs	r2, #0
 80060ee:	2100      	movs	r1, #0
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 fc12 	bl	800691a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3708      	adds	r7, #8
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006104:	2200      	movs	r2, #0
 8006106:	4912      	ldr	r1, [pc, #72]	@ (8006150 <MX_USB_DEVICE_Init+0x50>)
 8006108:	4812      	ldr	r0, [pc, #72]	@ (8006154 <MX_USB_DEVICE_Init+0x54>)
 800610a:	f7fe ff63 	bl	8004fd4 <USBD_Init>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d001      	beq.n	8006118 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006114:	f7fa fa9a 	bl	800064c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006118:	490f      	ldr	r1, [pc, #60]	@ (8006158 <MX_USB_DEVICE_Init+0x58>)
 800611a:	480e      	ldr	r0, [pc, #56]	@ (8006154 <MX_USB_DEVICE_Init+0x54>)
 800611c:	f7fe ff85 	bl	800502a <USBD_RegisterClass>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d001      	beq.n	800612a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006126:	f7fa fa91 	bl	800064c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800612a:	490c      	ldr	r1, [pc, #48]	@ (800615c <MX_USB_DEVICE_Init+0x5c>)
 800612c:	4809      	ldr	r0, [pc, #36]	@ (8006154 <MX_USB_DEVICE_Init+0x54>)
 800612e:	f7fe fee5 	bl	8004efc <USBD_CDC_RegisterInterface>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d001      	beq.n	800613c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006138:	f7fa fa88 	bl	800064c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800613c:	4805      	ldr	r0, [pc, #20]	@ (8006154 <MX_USB_DEVICE_Init+0x54>)
 800613e:	f7fe ff8d 	bl	800505c <USBD_Start>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d001      	beq.n	800614c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006148:	f7fa fa80 	bl	800064c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800614c:	bf00      	nop
 800614e:	bd80      	pop	{r7, pc}
 8006150:	20000154 	.word	0x20000154
 8006154:	20000238 	.word	0x20000238
 8006158:	20000040 	.word	0x20000040
 800615c:	20000144 	.word	0x20000144

08006160 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006164:	2200      	movs	r2, #0
 8006166:	4905      	ldr	r1, [pc, #20]	@ (800617c <CDC_Init_FS+0x1c>)
 8006168:	4805      	ldr	r0, [pc, #20]	@ (8006180 <CDC_Init_FS+0x20>)
 800616a:	f7fe fedd 	bl	8004f28 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800616e:	4905      	ldr	r1, [pc, #20]	@ (8006184 <CDC_Init_FS+0x24>)
 8006170:	4803      	ldr	r0, [pc, #12]	@ (8006180 <CDC_Init_FS+0x20>)
 8006172:	f7fe fef2 	bl	8004f5a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006176:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006178:	4618      	mov	r0, r3
 800617a:	bd80      	pop	{r7, pc}
 800617c:	200008fc 	.word	0x200008fc
 8006180:	20000238 	.word	0x20000238
 8006184:	200004fc 	.word	0x200004fc

08006188 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006188:	b480      	push	{r7}
 800618a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800618c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800618e:	4618      	mov	r0, r3
 8006190:	46bd      	mov	sp, r7
 8006192:	bc80      	pop	{r7}
 8006194:	4770      	bx	lr
	...

08006198 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	4603      	mov	r3, r0
 80061a0:	6039      	str	r1, [r7, #0]
 80061a2:	71fb      	strb	r3, [r7, #7]
 80061a4:	4613      	mov	r3, r2
 80061a6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80061a8:	79fb      	ldrb	r3, [r7, #7]
 80061aa:	2b23      	cmp	r3, #35	@ 0x23
 80061ac:	d84a      	bhi.n	8006244 <CDC_Control_FS+0xac>
 80061ae:	a201      	add	r2, pc, #4	@ (adr r2, 80061b4 <CDC_Control_FS+0x1c>)
 80061b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b4:	08006245 	.word	0x08006245
 80061b8:	08006245 	.word	0x08006245
 80061bc:	08006245 	.word	0x08006245
 80061c0:	08006245 	.word	0x08006245
 80061c4:	08006245 	.word	0x08006245
 80061c8:	08006245 	.word	0x08006245
 80061cc:	08006245 	.word	0x08006245
 80061d0:	08006245 	.word	0x08006245
 80061d4:	08006245 	.word	0x08006245
 80061d8:	08006245 	.word	0x08006245
 80061dc:	08006245 	.word	0x08006245
 80061e0:	08006245 	.word	0x08006245
 80061e4:	08006245 	.word	0x08006245
 80061e8:	08006245 	.word	0x08006245
 80061ec:	08006245 	.word	0x08006245
 80061f0:	08006245 	.word	0x08006245
 80061f4:	08006245 	.word	0x08006245
 80061f8:	08006245 	.word	0x08006245
 80061fc:	08006245 	.word	0x08006245
 8006200:	08006245 	.word	0x08006245
 8006204:	08006245 	.word	0x08006245
 8006208:	08006245 	.word	0x08006245
 800620c:	08006245 	.word	0x08006245
 8006210:	08006245 	.word	0x08006245
 8006214:	08006245 	.word	0x08006245
 8006218:	08006245 	.word	0x08006245
 800621c:	08006245 	.word	0x08006245
 8006220:	08006245 	.word	0x08006245
 8006224:	08006245 	.word	0x08006245
 8006228:	08006245 	.word	0x08006245
 800622c:	08006245 	.word	0x08006245
 8006230:	08006245 	.word	0x08006245
 8006234:	08006245 	.word	0x08006245
 8006238:	08006245 	.word	0x08006245
 800623c:	08006245 	.word	0x08006245
 8006240:	08006245 	.word	0x08006245
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006244:	bf00      	nop
  }

  return (USBD_OK);
 8006246:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006248:	4618      	mov	r0, r3
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	bc80      	pop	{r7}
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop

08006254 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
    // Chuẩn bị nhận tiếp
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800625e:	6879      	ldr	r1, [r7, #4]
 8006260:	4810      	ldr	r0, [pc, #64]	@ (80062a4 <CDC_Receive_FS+0x50>)
 8006262:	f7fe fe7a 	bl	8004f5a <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006266:	480f      	ldr	r0, [pc, #60]	@ (80062a4 <CDC_Receive_FS+0x50>)
 8006268:	f7fe fe8a 	bl	8004f80 <USBD_CDC_ReceivePacket>

    uint8_t len = (uint8_t)*Len;
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	73fb      	strb	r3, [r7, #15]
    memset(usb_rx_buffer,'\0', 64);
 8006272:	2240      	movs	r2, #64	@ 0x40
 8006274:	2100      	movs	r1, #0
 8006276:	480c      	ldr	r0, [pc, #48]	@ (80062a8 <CDC_Receive_FS+0x54>)
 8006278:	f000 fbd2 	bl	8006a20 <memset>
    memcpy(usb_rx_buffer,Buf,len);
 800627c:	7bfb      	ldrb	r3, [r7, #15]
 800627e:	461a      	mov	r2, r3
 8006280:	6879      	ldr	r1, [r7, #4]
 8006282:	4809      	ldr	r0, [pc, #36]	@ (80062a8 <CDC_Receive_FS+0x54>)
 8006284:	f000 fbf8 	bl	8006a78 <memcpy>
    memset(Buf,'\0', 64);
 8006288:	2240      	movs	r2, #64	@ 0x40
 800628a:	2100      	movs	r1, #0
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 fbc7 	bl	8006a20 <memset>

    uart_line_ready = 1;
 8006292:	4b06      	ldr	r3, [pc, #24]	@ (80062ac <CDC_Receive_FS+0x58>)
 8006294:	2201      	movs	r2, #1
 8006296:	701a      	strb	r2, [r3, #0]

    return (USBD_OK);
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	20000238 	.word	0x20000238
 80062a8:	200001c0 	.word	0x200001c0
 80062ac:	20000200 	.word	0x20000200

080062b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	4603      	mov	r3, r0
 80062b8:	6039      	str	r1, [r7, #0]
 80062ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	2212      	movs	r2, #18
 80062c0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80062c2:	4b03      	ldr	r3, [pc, #12]	@ (80062d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bc80      	pop	{r7}
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	20000170 	.word	0x20000170

080062d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	4603      	mov	r3, r0
 80062dc:	6039      	str	r1, [r7, #0]
 80062de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	2204      	movs	r2, #4
 80062e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80062e6:	4b03      	ldr	r3, [pc, #12]	@ (80062f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bc80      	pop	{r7}
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop
 80062f4:	20000184 	.word	0x20000184

080062f8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	4603      	mov	r3, r0
 8006300:	6039      	str	r1, [r7, #0]
 8006302:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006304:	79fb      	ldrb	r3, [r7, #7]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d105      	bne.n	8006316 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800630a:	683a      	ldr	r2, [r7, #0]
 800630c:	4907      	ldr	r1, [pc, #28]	@ (800632c <USBD_FS_ProductStrDescriptor+0x34>)
 800630e:	4808      	ldr	r0, [pc, #32]	@ (8006330 <USBD_FS_ProductStrDescriptor+0x38>)
 8006310:	f7ff fe19 	bl	8005f46 <USBD_GetString>
 8006314:	e004      	b.n	8006320 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006316:	683a      	ldr	r2, [r7, #0]
 8006318:	4904      	ldr	r1, [pc, #16]	@ (800632c <USBD_FS_ProductStrDescriptor+0x34>)
 800631a:	4805      	ldr	r0, [pc, #20]	@ (8006330 <USBD_FS_ProductStrDescriptor+0x38>)
 800631c:	f7ff fe13 	bl	8005f46 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006320:	4b02      	ldr	r3, [pc, #8]	@ (800632c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006322:	4618      	mov	r0, r3
 8006324:	3708      	adds	r7, #8
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	20000cfc 	.word	0x20000cfc
 8006330:	08006ac0 	.word	0x08006ac0

08006334 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	4603      	mov	r3, r0
 800633c:	6039      	str	r1, [r7, #0]
 800633e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006340:	683a      	ldr	r2, [r7, #0]
 8006342:	4904      	ldr	r1, [pc, #16]	@ (8006354 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006344:	4804      	ldr	r0, [pc, #16]	@ (8006358 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006346:	f7ff fdfe 	bl	8005f46 <USBD_GetString>
  return USBD_StrDesc;
 800634a:	4b02      	ldr	r3, [pc, #8]	@ (8006354 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800634c:	4618      	mov	r0, r3
 800634e:	3708      	adds	r7, #8
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	20000cfc 	.word	0x20000cfc
 8006358:	08006ad8 	.word	0x08006ad8

0800635c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	4603      	mov	r3, r0
 8006364:	6039      	str	r1, [r7, #0]
 8006366:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	221a      	movs	r2, #26
 800636c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800636e:	f000 f843 	bl	80063f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006372:	4b02      	ldr	r3, [pc, #8]	@ (800637c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006374:	4618      	mov	r0, r3
 8006376:	3708      	adds	r7, #8
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	20000188 	.word	0x20000188

08006380 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
 8006386:	4603      	mov	r3, r0
 8006388:	6039      	str	r1, [r7, #0]
 800638a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800638c:	79fb      	ldrb	r3, [r7, #7]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d105      	bne.n	800639e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006392:	683a      	ldr	r2, [r7, #0]
 8006394:	4907      	ldr	r1, [pc, #28]	@ (80063b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006396:	4808      	ldr	r0, [pc, #32]	@ (80063b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006398:	f7ff fdd5 	bl	8005f46 <USBD_GetString>
 800639c:	e004      	b.n	80063a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800639e:	683a      	ldr	r2, [r7, #0]
 80063a0:	4904      	ldr	r1, [pc, #16]	@ (80063b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80063a2:	4805      	ldr	r0, [pc, #20]	@ (80063b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80063a4:	f7ff fdcf 	bl	8005f46 <USBD_GetString>
  }
  return USBD_StrDesc;
 80063a8:	4b02      	ldr	r3, [pc, #8]	@ (80063b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3708      	adds	r7, #8
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	20000cfc 	.word	0x20000cfc
 80063b8:	08006aec 	.word	0x08006aec

080063bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	4603      	mov	r3, r0
 80063c4:	6039      	str	r1, [r7, #0]
 80063c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80063c8:	79fb      	ldrb	r3, [r7, #7]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d105      	bne.n	80063da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80063ce:	683a      	ldr	r2, [r7, #0]
 80063d0:	4907      	ldr	r1, [pc, #28]	@ (80063f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80063d2:	4808      	ldr	r0, [pc, #32]	@ (80063f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80063d4:	f7ff fdb7 	bl	8005f46 <USBD_GetString>
 80063d8:	e004      	b.n	80063e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80063da:	683a      	ldr	r2, [r7, #0]
 80063dc:	4904      	ldr	r1, [pc, #16]	@ (80063f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80063de:	4805      	ldr	r0, [pc, #20]	@ (80063f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80063e0:	f7ff fdb1 	bl	8005f46 <USBD_GetString>
  }
  return USBD_StrDesc;
 80063e4:	4b02      	ldr	r3, [pc, #8]	@ (80063f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3708      	adds	r7, #8
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	20000cfc 	.word	0x20000cfc
 80063f4:	08006af8 	.word	0x08006af8

080063f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80063fe:	4b0f      	ldr	r3, [pc, #60]	@ (800643c <Get_SerialNum+0x44>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006404:	4b0e      	ldr	r3, [pc, #56]	@ (8006440 <Get_SerialNum+0x48>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800640a:	4b0e      	ldr	r3, [pc, #56]	@ (8006444 <Get_SerialNum+0x4c>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4413      	add	r3, r2
 8006416:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d009      	beq.n	8006432 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800641e:	2208      	movs	r2, #8
 8006420:	4909      	ldr	r1, [pc, #36]	@ (8006448 <Get_SerialNum+0x50>)
 8006422:	68f8      	ldr	r0, [r7, #12]
 8006424:	f000 f814 	bl	8006450 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006428:	2204      	movs	r2, #4
 800642a:	4908      	ldr	r1, [pc, #32]	@ (800644c <Get_SerialNum+0x54>)
 800642c:	68b8      	ldr	r0, [r7, #8]
 800642e:	f000 f80f 	bl	8006450 <IntToUnicode>
  }
}
 8006432:	bf00      	nop
 8006434:	3710      	adds	r7, #16
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	1ffff7e8 	.word	0x1ffff7e8
 8006440:	1ffff7ec 	.word	0x1ffff7ec
 8006444:	1ffff7f0 	.word	0x1ffff7f0
 8006448:	2000018a 	.word	0x2000018a
 800644c:	2000019a 	.word	0x2000019a

08006450 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006450:	b480      	push	{r7}
 8006452:	b087      	sub	sp, #28
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	4613      	mov	r3, r2
 800645c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800645e:	2300      	movs	r3, #0
 8006460:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006462:	2300      	movs	r3, #0
 8006464:	75fb      	strb	r3, [r7, #23]
 8006466:	e027      	b.n	80064b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	0f1b      	lsrs	r3, r3, #28
 800646c:	2b09      	cmp	r3, #9
 800646e:	d80b      	bhi.n	8006488 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	0f1b      	lsrs	r3, r3, #28
 8006474:	b2da      	uxtb	r2, r3
 8006476:	7dfb      	ldrb	r3, [r7, #23]
 8006478:	005b      	lsls	r3, r3, #1
 800647a:	4619      	mov	r1, r3
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	440b      	add	r3, r1
 8006480:	3230      	adds	r2, #48	@ 0x30
 8006482:	b2d2      	uxtb	r2, r2
 8006484:	701a      	strb	r2, [r3, #0]
 8006486:	e00a      	b.n	800649e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	0f1b      	lsrs	r3, r3, #28
 800648c:	b2da      	uxtb	r2, r3
 800648e:	7dfb      	ldrb	r3, [r7, #23]
 8006490:	005b      	lsls	r3, r3, #1
 8006492:	4619      	mov	r1, r3
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	440b      	add	r3, r1
 8006498:	3237      	adds	r2, #55	@ 0x37
 800649a:	b2d2      	uxtb	r2, r2
 800649c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	011b      	lsls	r3, r3, #4
 80064a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80064a4:	7dfb      	ldrb	r3, [r7, #23]
 80064a6:	005b      	lsls	r3, r3, #1
 80064a8:	3301      	adds	r3, #1
 80064aa:	68ba      	ldr	r2, [r7, #8]
 80064ac:	4413      	add	r3, r2
 80064ae:	2200      	movs	r2, #0
 80064b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80064b2:	7dfb      	ldrb	r3, [r7, #23]
 80064b4:	3301      	adds	r3, #1
 80064b6:	75fb      	strb	r3, [r7, #23]
 80064b8:	7dfa      	ldrb	r2, [r7, #23]
 80064ba:	79fb      	ldrb	r3, [r7, #7]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d3d3      	bcc.n	8006468 <IntToUnicode+0x18>
  }
}
 80064c0:	bf00      	nop
 80064c2:	bf00      	nop
 80064c4:	371c      	adds	r7, #28
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bc80      	pop	{r7}
 80064ca:	4770      	bx	lr

080064cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a0d      	ldr	r2, [pc, #52]	@ (8006510 <HAL_PCD_MspInit+0x44>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d113      	bne.n	8006506 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80064de:	4b0d      	ldr	r3, [pc, #52]	@ (8006514 <HAL_PCD_MspInit+0x48>)
 80064e0:	69db      	ldr	r3, [r3, #28]
 80064e2:	4a0c      	ldr	r2, [pc, #48]	@ (8006514 <HAL_PCD_MspInit+0x48>)
 80064e4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80064e8:	61d3      	str	r3, [r2, #28]
 80064ea:	4b0a      	ldr	r3, [pc, #40]	@ (8006514 <HAL_PCD_MspInit+0x48>)
 80064ec:	69db      	ldr	r3, [r3, #28]
 80064ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80064f2:	60fb      	str	r3, [r7, #12]
 80064f4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80064f6:	2200      	movs	r2, #0
 80064f8:	2100      	movs	r1, #0
 80064fa:	2014      	movs	r0, #20
 80064fc:	f7fa f9a6 	bl	800084c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006500:	2014      	movs	r0, #20
 8006502:	f7fa f9bf 	bl	8000884 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006506:	bf00      	nop
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	40005c00 	.word	0x40005c00
 8006514:	40021000 	.word	0x40021000

08006518 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800652c:	4619      	mov	r1, r3
 800652e:	4610      	mov	r0, r2
 8006530:	f7fe fddc 	bl	80050ec <USBD_LL_SetupStage>
}
 8006534:	bf00      	nop
 8006536:	3708      	adds	r7, #8
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	460b      	mov	r3, r1
 8006546:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800654e:	78fa      	ldrb	r2, [r7, #3]
 8006550:	6879      	ldr	r1, [r7, #4]
 8006552:	4613      	mov	r3, r2
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	4413      	add	r3, r2
 8006558:	00db      	lsls	r3, r3, #3
 800655a:	440b      	add	r3, r1
 800655c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	78fb      	ldrb	r3, [r7, #3]
 8006564:	4619      	mov	r1, r3
 8006566:	f7fe fe0e 	bl	8005186 <USBD_LL_DataOutStage>
}
 800656a:	bf00      	nop
 800656c:	3708      	adds	r7, #8
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006572:	b580      	push	{r7, lr}
 8006574:	b082      	sub	sp, #8
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
 800657a:	460b      	mov	r3, r1
 800657c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8006584:	78fa      	ldrb	r2, [r7, #3]
 8006586:	6879      	ldr	r1, [r7, #4]
 8006588:	4613      	mov	r3, r2
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	4413      	add	r3, r2
 800658e:	00db      	lsls	r3, r3, #3
 8006590:	440b      	add	r3, r1
 8006592:	3324      	adds	r3, #36	@ 0x24
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	78fb      	ldrb	r3, [r7, #3]
 8006598:	4619      	mov	r1, r3
 800659a:	f7fe fe65 	bl	8005268 <USBD_LL_DataInStage>
}
 800659e:	bf00      	nop
 80065a0:	3708      	adds	r7, #8
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b082      	sub	sp, #8
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80065b4:	4618      	mov	r0, r3
 80065b6:	f7fe ff75 	bl	80054a4 <USBD_LL_SOF>
}
 80065ba:	bf00      	nop
 80065bc:	3708      	adds	r7, #8
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}

080065c2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80065c2:	b580      	push	{r7, lr}
 80065c4:	b084      	sub	sp, #16
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80065ca:	2301      	movs	r3, #1
 80065cc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	799b      	ldrb	r3, [r3, #6]
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d001      	beq.n	80065da <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80065d6:	f7fa f839 	bl	800064c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80065e0:	7bfa      	ldrb	r2, [r7, #15]
 80065e2:	4611      	mov	r1, r2
 80065e4:	4618      	mov	r0, r3
 80065e6:	f7fe ff25 	bl	8005434 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80065f0:	4618      	mov	r0, r3
 80065f2:	f7fe fede 	bl	80053b2 <USBD_LL_Reset>
}
 80065f6:	bf00      	nop
 80065f8:	3710      	adds	r7, #16
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
	...

08006600 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800660e:	4618      	mov	r0, r3
 8006610:	f7fe ff1f 	bl	8005452 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	7a9b      	ldrb	r3, [r3, #10]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d005      	beq.n	8006628 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800661c:	4b04      	ldr	r3, [pc, #16]	@ (8006630 <HAL_PCD_SuspendCallback+0x30>)
 800661e:	691b      	ldr	r3, [r3, #16]
 8006620:	4a03      	ldr	r2, [pc, #12]	@ (8006630 <HAL_PCD_SuspendCallback+0x30>)
 8006622:	f043 0306 	orr.w	r3, r3, #6
 8006626:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006628:	bf00      	nop
 800662a:	3708      	adds	r7, #8
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}
 8006630:	e000ed00 	.word	0xe000ed00

08006634 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006642:	4618      	mov	r0, r3
 8006644:	f7fe ff19 	bl	800547a <USBD_LL_Resume>
}
 8006648:	bf00      	nop
 800664a:	3708      	adds	r7, #8
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8006658:	4a28      	ldr	r2, [pc, #160]	@ (80066fc <USBD_LL_Init+0xac>)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a26      	ldr	r2, [pc, #152]	@ (80066fc <USBD_LL_Init+0xac>)
 8006664:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8006668:	4b24      	ldr	r3, [pc, #144]	@ (80066fc <USBD_LL_Init+0xac>)
 800666a:	4a25      	ldr	r2, [pc, #148]	@ (8006700 <USBD_LL_Init+0xb0>)
 800666c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800666e:	4b23      	ldr	r3, [pc, #140]	@ (80066fc <USBD_LL_Init+0xac>)
 8006670:	2208      	movs	r2, #8
 8006672:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006674:	4b21      	ldr	r3, [pc, #132]	@ (80066fc <USBD_LL_Init+0xac>)
 8006676:	2202      	movs	r2, #2
 8006678:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800667a:	4b20      	ldr	r3, [pc, #128]	@ (80066fc <USBD_LL_Init+0xac>)
 800667c:	2200      	movs	r2, #0
 800667e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006680:	4b1e      	ldr	r3, [pc, #120]	@ (80066fc <USBD_LL_Init+0xac>)
 8006682:	2200      	movs	r2, #0
 8006684:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006686:	4b1d      	ldr	r3, [pc, #116]	@ (80066fc <USBD_LL_Init+0xac>)
 8006688:	2200      	movs	r2, #0
 800668a:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800668c:	481b      	ldr	r0, [pc, #108]	@ (80066fc <USBD_LL_Init+0xac>)
 800668e:	f7fa f907 	bl	80008a0 <HAL_PCD_Init>
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d001      	beq.n	800669c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8006698:	f7f9 ffd8 	bl	800064c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80066a2:	2318      	movs	r3, #24
 80066a4:	2200      	movs	r2, #0
 80066a6:	2100      	movs	r1, #0
 80066a8:	f7fb fe18 	bl	80022dc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80066b2:	2358      	movs	r3, #88	@ 0x58
 80066b4:	2200      	movs	r2, #0
 80066b6:	2180      	movs	r1, #128	@ 0x80
 80066b8:	f7fb fe10 	bl	80022dc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80066c2:	23c0      	movs	r3, #192	@ 0xc0
 80066c4:	2200      	movs	r2, #0
 80066c6:	2181      	movs	r1, #129	@ 0x81
 80066c8:	f7fb fe08 	bl	80022dc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80066d2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80066d6:	2200      	movs	r2, #0
 80066d8:	2101      	movs	r1, #1
 80066da:	f7fb fdff 	bl	80022dc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80066e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80066e8:	2200      	movs	r2, #0
 80066ea:	2182      	movs	r1, #130	@ 0x82
 80066ec:	f7fb fdf6 	bl	80022dc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3708      	adds	r7, #8
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	20000efc 	.word	0x20000efc
 8006700:	40005c00 	.word	0x40005c00

08006704 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800670c:	2300      	movs	r3, #0
 800670e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006710:	2300      	movs	r3, #0
 8006712:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800671a:	4618      	mov	r0, r3
 800671c:	f7fa f9b6 	bl	8000a8c <HAL_PCD_Start>
 8006720:	4603      	mov	r3, r0
 8006722:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006724:	7bfb      	ldrb	r3, [r7, #15]
 8006726:	4618      	mov	r0, r3
 8006728:	f000 f94e 	bl	80069c8 <USBD_Get_USB_Status>
 800672c:	4603      	mov	r3, r0
 800672e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006730:	7bbb      	ldrb	r3, [r7, #14]
}
 8006732:	4618      	mov	r0, r3
 8006734:	3710      	adds	r7, #16
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}

0800673a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800673a:	b580      	push	{r7, lr}
 800673c:	b084      	sub	sp, #16
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
 8006742:	4608      	mov	r0, r1
 8006744:	4611      	mov	r1, r2
 8006746:	461a      	mov	r2, r3
 8006748:	4603      	mov	r3, r0
 800674a:	70fb      	strb	r3, [r7, #3]
 800674c:	460b      	mov	r3, r1
 800674e:	70bb      	strb	r3, [r7, #2]
 8006750:	4613      	mov	r3, r2
 8006752:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006754:	2300      	movs	r3, #0
 8006756:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006758:	2300      	movs	r3, #0
 800675a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8006762:	78bb      	ldrb	r3, [r7, #2]
 8006764:	883a      	ldrh	r2, [r7, #0]
 8006766:	78f9      	ldrb	r1, [r7, #3]
 8006768:	f7fa fb0a 	bl	8000d80 <HAL_PCD_EP_Open>
 800676c:	4603      	mov	r3, r0
 800676e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006770:	7bfb      	ldrb	r3, [r7, #15]
 8006772:	4618      	mov	r0, r3
 8006774:	f000 f928 	bl	80069c8 <USBD_Get_USB_Status>
 8006778:	4603      	mov	r3, r0
 800677a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800677c:	7bbb      	ldrb	r3, [r7, #14]
}
 800677e:	4618      	mov	r0, r3
 8006780:	3710      	adds	r7, #16
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}

08006786 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006786:	b580      	push	{r7, lr}
 8006788:	b084      	sub	sp, #16
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
 800678e:	460b      	mov	r3, r1
 8006790:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006792:	2300      	movs	r3, #0
 8006794:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006796:	2300      	movs	r3, #0
 8006798:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80067a0:	78fa      	ldrb	r2, [r7, #3]
 80067a2:	4611      	mov	r1, r2
 80067a4:	4618      	mov	r0, r3
 80067a6:	f7fa fb48 	bl	8000e3a <HAL_PCD_EP_Close>
 80067aa:	4603      	mov	r3, r0
 80067ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80067ae:	7bfb      	ldrb	r3, [r7, #15]
 80067b0:	4618      	mov	r0, r3
 80067b2:	f000 f909 	bl	80069c8 <USBD_Get_USB_Status>
 80067b6:	4603      	mov	r3, r0
 80067b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80067ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3710      	adds	r7, #16
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	460b      	mov	r3, r1
 80067ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80067d0:	2300      	movs	r3, #0
 80067d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80067d4:	2300      	movs	r3, #0
 80067d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80067de:	78fa      	ldrb	r2, [r7, #3]
 80067e0:	4611      	mov	r1, r2
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7fa fbf0 	bl	8000fc8 <HAL_PCD_EP_SetStall>
 80067e8:	4603      	mov	r3, r0
 80067ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80067ec:	7bfb      	ldrb	r3, [r7, #15]
 80067ee:	4618      	mov	r0, r3
 80067f0:	f000 f8ea 	bl	80069c8 <USBD_Get_USB_Status>
 80067f4:	4603      	mov	r3, r0
 80067f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80067f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3710      	adds	r7, #16
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b084      	sub	sp, #16
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
 800680a:	460b      	mov	r3, r1
 800680c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800680e:	2300      	movs	r3, #0
 8006810:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006812:	2300      	movs	r3, #0
 8006814:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800681c:	78fa      	ldrb	r2, [r7, #3]
 800681e:	4611      	mov	r1, r2
 8006820:	4618      	mov	r0, r3
 8006822:	f7fa fc31 	bl	8001088 <HAL_PCD_EP_ClrStall>
 8006826:	4603      	mov	r3, r0
 8006828:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800682a:	7bfb      	ldrb	r3, [r7, #15]
 800682c:	4618      	mov	r0, r3
 800682e:	f000 f8cb 	bl	80069c8 <USBD_Get_USB_Status>
 8006832:	4603      	mov	r3, r0
 8006834:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006836:	7bbb      	ldrb	r3, [r7, #14]
}
 8006838:	4618      	mov	r0, r3
 800683a:	3710      	adds	r7, #16
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	460b      	mov	r3, r1
 800684a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006852:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006854:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006858:	2b00      	cmp	r3, #0
 800685a:	da0b      	bge.n	8006874 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800685c:	78fb      	ldrb	r3, [r7, #3]
 800685e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006862:	68f9      	ldr	r1, [r7, #12]
 8006864:	4613      	mov	r3, r2
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	4413      	add	r3, r2
 800686a:	00db      	lsls	r3, r3, #3
 800686c:	440b      	add	r3, r1
 800686e:	3312      	adds	r3, #18
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	e00b      	b.n	800688c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006874:	78fb      	ldrb	r3, [r7, #3]
 8006876:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800687a:	68f9      	ldr	r1, [r7, #12]
 800687c:	4613      	mov	r3, r2
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	4413      	add	r3, r2
 8006882:	00db      	lsls	r3, r3, #3
 8006884:	440b      	add	r3, r1
 8006886:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800688a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800688c:	4618      	mov	r0, r3
 800688e:	3714      	adds	r7, #20
 8006890:	46bd      	mov	sp, r7
 8006892:	bc80      	pop	{r7}
 8006894:	4770      	bx	lr

08006896 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b084      	sub	sp, #16
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
 800689e:	460b      	mov	r3, r1
 80068a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80068a2:	2300      	movs	r3, #0
 80068a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80068a6:	2300      	movs	r3, #0
 80068a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80068b0:	78fa      	ldrb	r2, [r7, #3]
 80068b2:	4611      	mov	r1, r2
 80068b4:	4618      	mov	r0, r3
 80068b6:	f7fa fa3f 	bl	8000d38 <HAL_PCD_SetAddress>
 80068ba:	4603      	mov	r3, r0
 80068bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80068be:	7bfb      	ldrb	r3, [r7, #15]
 80068c0:	4618      	mov	r0, r3
 80068c2:	f000 f881 	bl	80069c8 <USBD_Get_USB_Status>
 80068c6:	4603      	mov	r3, r0
 80068c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80068ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3710      	adds	r7, #16
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b086      	sub	sp, #24
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	607a      	str	r2, [r7, #4]
 80068de:	461a      	mov	r2, r3
 80068e0:	460b      	mov	r3, r1
 80068e2:	72fb      	strb	r3, [r7, #11]
 80068e4:	4613      	mov	r3, r2
 80068e6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80068e8:	2300      	movs	r3, #0
 80068ea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80068ec:	2300      	movs	r3, #0
 80068ee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80068f6:	893b      	ldrh	r3, [r7, #8]
 80068f8:	7af9      	ldrb	r1, [r7, #11]
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	f7fa fb2d 	bl	8000f5a <HAL_PCD_EP_Transmit>
 8006900:	4603      	mov	r3, r0
 8006902:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006904:	7dfb      	ldrb	r3, [r7, #23]
 8006906:	4618      	mov	r0, r3
 8006908:	f000 f85e 	bl	80069c8 <USBD_Get_USB_Status>
 800690c:	4603      	mov	r3, r0
 800690e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006910:	7dbb      	ldrb	r3, [r7, #22]
}
 8006912:	4618      	mov	r0, r3
 8006914:	3718      	adds	r7, #24
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}

0800691a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800691a:	b580      	push	{r7, lr}
 800691c:	b086      	sub	sp, #24
 800691e:	af00      	add	r7, sp, #0
 8006920:	60f8      	str	r0, [r7, #12]
 8006922:	607a      	str	r2, [r7, #4]
 8006924:	461a      	mov	r2, r3
 8006926:	460b      	mov	r3, r1
 8006928:	72fb      	strb	r3, [r7, #11]
 800692a:	4613      	mov	r3, r2
 800692c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800692e:	2300      	movs	r3, #0
 8006930:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006932:	2300      	movs	r3, #0
 8006934:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800693c:	893b      	ldrh	r3, [r7, #8]
 800693e:	7af9      	ldrb	r1, [r7, #11]
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	f7fa fac2 	bl	8000eca <HAL_PCD_EP_Receive>
 8006946:	4603      	mov	r3, r0
 8006948:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800694a:	7dfb      	ldrb	r3, [r7, #23]
 800694c:	4618      	mov	r0, r3
 800694e:	f000 f83b 	bl	80069c8 <USBD_Get_USB_Status>
 8006952:	4603      	mov	r3, r0
 8006954:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006956:	7dbb      	ldrb	r3, [r7, #22]
}
 8006958:	4618      	mov	r0, r3
 800695a:	3718      	adds	r7, #24
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	460b      	mov	r3, r1
 800696a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006972:	78fa      	ldrb	r2, [r7, #3]
 8006974:	4611      	mov	r1, r2
 8006976:	4618      	mov	r0, r3
 8006978:	f7fa fad8 	bl	8000f2c <HAL_PCD_EP_GetRxCount>
 800697c:	4603      	mov	r3, r0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3708      	adds	r7, #8
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
	...

08006988 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006990:	4b02      	ldr	r3, [pc, #8]	@ (800699c <USBD_static_malloc+0x14>)
}
 8006992:	4618      	mov	r0, r3
 8006994:	370c      	adds	r7, #12
 8006996:	46bd      	mov	sp, r7
 8006998:	bc80      	pop	{r7}
 800699a:	4770      	bx	lr
 800699c:	200011d4 	.word	0x200011d4

080069a0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]

}
 80069a8:	bf00      	nop
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bc80      	pop	{r7}
 80069b0:	4770      	bx	lr

080069b2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069b2:	b480      	push	{r7}
 80069b4:	b083      	sub	sp, #12
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
 80069ba:	460b      	mov	r3, r1
 80069bc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80069be:	bf00      	nop
 80069c0:	370c      	adds	r7, #12
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bc80      	pop	{r7}
 80069c6:	4770      	bx	lr

080069c8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	4603      	mov	r3, r0
 80069d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069d2:	2300      	movs	r3, #0
 80069d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80069d6:	79fb      	ldrb	r3, [r7, #7]
 80069d8:	2b03      	cmp	r3, #3
 80069da:	d817      	bhi.n	8006a0c <USBD_Get_USB_Status+0x44>
 80069dc:	a201      	add	r2, pc, #4	@ (adr r2, 80069e4 <USBD_Get_USB_Status+0x1c>)
 80069de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e2:	bf00      	nop
 80069e4:	080069f5 	.word	0x080069f5
 80069e8:	080069fb 	.word	0x080069fb
 80069ec:	08006a01 	.word	0x08006a01
 80069f0:	08006a07 	.word	0x08006a07
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80069f4:	2300      	movs	r3, #0
 80069f6:	73fb      	strb	r3, [r7, #15]
    break;
 80069f8:	e00b      	b.n	8006a12 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80069fa:	2302      	movs	r3, #2
 80069fc:	73fb      	strb	r3, [r7, #15]
    break;
 80069fe:	e008      	b.n	8006a12 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006a00:	2301      	movs	r3, #1
 8006a02:	73fb      	strb	r3, [r7, #15]
    break;
 8006a04:	e005      	b.n	8006a12 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006a06:	2302      	movs	r3, #2
 8006a08:	73fb      	strb	r3, [r7, #15]
    break;
 8006a0a:	e002      	b.n	8006a12 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006a0c:	2302      	movs	r3, #2
 8006a0e:	73fb      	strb	r3, [r7, #15]
    break;
 8006a10:	bf00      	nop
  }
  return usb_status;
 8006a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3714      	adds	r7, #20
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bc80      	pop	{r7}
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop

08006a20 <memset>:
 8006a20:	4603      	mov	r3, r0
 8006a22:	4402      	add	r2, r0
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d100      	bne.n	8006a2a <memset+0xa>
 8006a28:	4770      	bx	lr
 8006a2a:	f803 1b01 	strb.w	r1, [r3], #1
 8006a2e:	e7f9      	b.n	8006a24 <memset+0x4>

08006a30 <__libc_init_array>:
 8006a30:	b570      	push	{r4, r5, r6, lr}
 8006a32:	2600      	movs	r6, #0
 8006a34:	4d0c      	ldr	r5, [pc, #48]	@ (8006a68 <__libc_init_array+0x38>)
 8006a36:	4c0d      	ldr	r4, [pc, #52]	@ (8006a6c <__libc_init_array+0x3c>)
 8006a38:	1b64      	subs	r4, r4, r5
 8006a3a:	10a4      	asrs	r4, r4, #2
 8006a3c:	42a6      	cmp	r6, r4
 8006a3e:	d109      	bne.n	8006a54 <__libc_init_array+0x24>
 8006a40:	f000 f828 	bl	8006a94 <_init>
 8006a44:	2600      	movs	r6, #0
 8006a46:	4d0a      	ldr	r5, [pc, #40]	@ (8006a70 <__libc_init_array+0x40>)
 8006a48:	4c0a      	ldr	r4, [pc, #40]	@ (8006a74 <__libc_init_array+0x44>)
 8006a4a:	1b64      	subs	r4, r4, r5
 8006a4c:	10a4      	asrs	r4, r4, #2
 8006a4e:	42a6      	cmp	r6, r4
 8006a50:	d105      	bne.n	8006a5e <__libc_init_array+0x2e>
 8006a52:	bd70      	pop	{r4, r5, r6, pc}
 8006a54:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a58:	4798      	blx	r3
 8006a5a:	3601      	adds	r6, #1
 8006a5c:	e7ee      	b.n	8006a3c <__libc_init_array+0xc>
 8006a5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a62:	4798      	blx	r3
 8006a64:	3601      	adds	r6, #1
 8006a66:	e7f2      	b.n	8006a4e <__libc_init_array+0x1e>
 8006a68:	08006b10 	.word	0x08006b10
 8006a6c:	08006b10 	.word	0x08006b10
 8006a70:	08006b10 	.word	0x08006b10
 8006a74:	08006b14 	.word	0x08006b14

08006a78 <memcpy>:
 8006a78:	440a      	add	r2, r1
 8006a7a:	4291      	cmp	r1, r2
 8006a7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a80:	d100      	bne.n	8006a84 <memcpy+0xc>
 8006a82:	4770      	bx	lr
 8006a84:	b510      	push	{r4, lr}
 8006a86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a8a:	4291      	cmp	r1, r2
 8006a8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a90:	d1f9      	bne.n	8006a86 <memcpy+0xe>
 8006a92:	bd10      	pop	{r4, pc}

08006a94 <_init>:
 8006a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a96:	bf00      	nop
 8006a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a9a:	bc08      	pop	{r3}
 8006a9c:	469e      	mov	lr, r3
 8006a9e:	4770      	bx	lr

08006aa0 <_fini>:
 8006aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aa2:	bf00      	nop
 8006aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aa6:	bc08      	pop	{r3}
 8006aa8:	469e      	mov	lr, r3
 8006aaa:	4770      	bx	lr
